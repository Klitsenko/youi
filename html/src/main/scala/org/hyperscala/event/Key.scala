package org.hyperscala.event

import org.powerscala.enum.{Enumerated, EnumEntry}

/**
 * @author Matt Hicks <matt@outr.com>
 */
sealed abstract class Key(val code: Int, val description: String) extends EnumEntry

object Key extends Enumerated[Key] {
  case object Cancel extends Key(3, "Cancel key")
  case object Help extends Key(6, "Help key")
  case object BackSpace extends Key(8, "Backspace key")
  case object Tab extends Key(9, "Tab key")
  case object Clear extends Key(12, "'5' key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key")
  case object Return extends Key(13, "Return/enter key on the main keyboard")
  case object Enter extends Key(14, "Reserved, but not used")
  case object Shift extends Key(16, "Shift key")
  case object Control extends Key(17, "Control key")
  case object Alt extends Key(18, "Alt (Option on Mac) key")
  case object Pause extends Key(19, "Pause key")
  case object CapsLock extends Key(20, "Caps lock")
  case object Escape extends Key(27, "Escape key")
  case object Space extends Key(32, "Space bar")
  case object PageUp extends Key(33, "Page Up key")
  case object PageDown extends Key(34, "Page Down key")
  case object End extends Key(35, "End key")
  case object Home extends Key(36, "Home key")
  case object Left extends Key(37, "Left arrow")
  case object Up extends Key(38, "Up arrow")
  case object Right extends Key(39, "Right arrow")
  case object Down extends Key(40, "Down arrow")
  case object Select extends Key(41, "Linux support for this keycode was added in Gecko 4.0")
  case object Print extends Key(42, "Linux support for this keycode was added in Gecko 4.0")
  case object Execute extends Key(43, "Linux support for this keycode was added in Gecko 4.0")
  case object Printscreen extends Key(44, "Print Screen key")
  case object Insert extends Key(45, "Ins(ert) key")
  case object Delete extends Key(46, "Del(ete) key")
  case object Zero extends Key(48, "")
  case object One extends Key(49, "")
  case object Two extends Key(50, "")
  case object Three extends Key(51, "")
  case object Four extends Key(52, "")
  case object Five extends Key(53, "")
  case object Six extends Key(54, "")
  case object Seven extends Key(55, "")
  case object Eight extends Key(56, "")
  case object Nine extends Key(57, "")
  case object Colon extends Key(58, "Colon (':') key. Requires Gecko 15.0")
  case object Semicolon extends Key(59, "Semicolon (';') key")
  case object LessThan extends Key(60, "Less-than ('<') key. Requires Gecko 15.0")
  case object Equals extends Key(61, "Equals ('=') key")
  case object GreaterThan extends Key(62, "Greater-than ('>') key. Requires Gecko 15.0")
  case object QuestionMark extends Key(63, "Question mark ('?') key. Requires Gecko 15.0")
  case object At extends Key(64, "Atmark ('@') key. Requires Gecko 15.0")
  case object A extends Key(65, "")
  case object B extends Key(66, "")
  case object C extends Key(67, "")
  case object D extends Key(68, "")
  case object E extends Key(69, "")
  case object F extends Key(70, "")
  case object G extends Key(71, "")
  case object H extends Key(72, "")
  case object I extends Key(73, "")
  case object J extends Key(74, "")
  case object K extends Key(75, "")
  case object L extends Key(76, "")
  case object M extends Key(77, "")
  case object N extends Key(78, "")
  case object O extends Key(79, "")
  case object P extends Key(80, "")
  case object Q extends Key(81, "")
  case object R extends Key(82, "")
  case object S extends Key(83, "")
  case object T extends Key(84, "")
  case object U extends Key(85, "")
  case object V extends Key(86, "")
  case object W extends Key(87, "")
  case object X extends Key(88, "")
  case object Y extends Key(89, "")
  case object Z extends Key(90, "")
  case object ContextMenu extends Key(93, "")
  case object Numpad0 extends Key(96, "0 on the numeric keypad")
  case object Numpad1 extends Key(97, "1 on the numeric keypad")
  case object Numpad2 extends Key(98, "2 on the numeric keypad")
  case object Numpad3 extends Key(99, "3 on the numeric keypad")
  case object Numpad4 extends Key(100, "4 on the numeric keypad")
  case object Numpad5 extends Key(101, "5 on the numeric keypad")
  case object Numpad6 extends Key(102, "6 on the numeric keypad")
  case object Numpad7 extends Key(103, "7 on the numeric keypad")
  case object Numpad8 extends Key(104, "8 on the numeric keypad")
  case object Numpad9 extends Key(105, "9 on the numeric keypad")
  case object Multiply extends Key(106, "* on the numeric keypad")
  case object Add extends Key(107, "+ on the numeric keypad")
  case object Separator extends Key(108, "")
  case object Subtract extends Key(109, "- on the numeric keypad")
  case object Decimal extends Key(110, "Decimal point on the numeric keypad")
  case object Divide extends Key(111, "/ on the numeric keypad")
  case object F1 extends Key(112, "F1 key")
  case object F2 extends Key(113, "F2 key")
  case object F3 extends Key(114, "F3 key")
  case object F4 extends Key(115, "F4 key")
  case object F5 extends Key(116, "F5 key")
  case object F6 extends Key(117, "F6 key")
  case object F7 extends Key(118, "F7 key")
  case object F8 extends Key(119, "F8 key")
  case object F9 extends Key(120, "F9 key")
  case object F10 extends Key(121, "F10 key")
  case object F11 extends Key(122, "F11 key")
  case object F12 extends Key(123, "F12 key")
  case object F13 extends Key(124, "F13 key")
  case object F14 extends Key(125, "F14 key")
  case object F15 extends Key(126, "F15 key")
  case object F16 extends Key(127, "F16 key")
  case object F17 extends Key(128, "F17 key")
  case object F18 extends Key(129, "F18 key")
  case object F19 extends Key(130, "F19 key")
  case object F20 extends Key(131, "F20 key")
  case object F21 extends Key(132, "F21 key")
  case object F22 extends Key(133, "F22 key")
  case object F23 extends Key(134, "F23 key")
  case object F24 extends Key(135, "F24 key")
  case object NumLock extends Key(144, "Num Lock key")
  case object ScrollLock extends Key(145, "Scroll Lock key")
  case object Circumflex extends Key(160, "Circumflex ('^') key. Requires Gecko 15.0")
  case object Exclamation extends Key(161, "Exclamation ('!') key. Requires Gecko 15.0")
  case object DoubleQuote extends Key(162, "Double quote (''') key. Requires Gecko 15.0")
  case object Hash extends Key(163, "Hash ('#') key. Requires Gecko 15.0")
  case object Dollar extends Key(164, "Dollar sign ('$') key. Requires Gecko 15.0")
  case object Percent extends Key(165, "Percent ('%') key. Requires Gecko 15.0")
  case object Ampersand extends Key(166, "Ampersand ('&') key. Requires Gecko 15.0")
  case object Underscore extends Key(167, "Underscore ('_') key. Requires Gecko 15.0")
  case object OpenParen extends Key(168, "Open parenthesis ('(') key. Requires Gecko 15.0")
  case object CloseParen extends Key(169, "Close parenthesis (')') key. Requires Gecko 15.0")
  case object Asterisk extends Key(170, "Asterisk ('*') key. Requires Gecko 15.0")
  case object Plus extends Key(171, "Plus ('+') key. Requires Gecko 15.0")
  case object Pipe extends Key(172, "Pipe ('|') key. Requires Gecko 15.0")
  case object HyphenMinus extends Key(173, "Hyphen-US/docs/Minus ('-') key. Requires Gecko 15.0")
  case object OpenCurlyBracket extends Key(174, "Open curly bracket ('{') key. Requires Gecko 15.0")
  case object CloseCurlyBracket extends Key(175, "Close curly bracket ('}') key. Requires Gecko 15.0")
  case object Tilde extends Key(176, "Tilde ('~') key. Requires Gecko 15.0")
  case object Comma extends Key(188, "Comma (',') key")
  case object Period extends Key(190, "Period ('.') key")
  case object Slash extends Key(191, "Slash ('/') key")
  case object BackQuote extends Key(192, "Back tick ('`') key")
  case object OpenBracket extends Key(219, "Open square bracket ('[') key")
  case object BackSlash extends Key(220, "Back slash ('\') key")
  case object CloseBracket extends Key(221, "Close square bracket (']') key")
  case object Quote extends Key(222, "Quote (''') key")
  case object Meta extends Key(224, "Meta key on Linux, Command key on Mac")
  case object Altgr extends Key(225, "AltGr key on Linux. Requires Gecko 15.0")
  case object Win extends Key(91, "Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0")
  case object Kana extends Key(21, "Linux support for this keycode was added in Gecko 4.0")
  case object Hangul extends Key(21, "Linux support for this keycode was added in Gecko 4.0")
  case object Eisu extends Key(22, "'英数' key on Japanese Mac keyboard. Requires Gecko 15.0")
  case object Junja extends Key(23, "Linux support for this keycode was added in Gecko 4.0")
  case object Final extends Key(24, "Linux support for this keycode was added in Gecko 4.0")
  case object Hanja extends Key(25, "Linux support for this keycode was added in Gecko 4.0")
  case object Kanji extends Key(25, "Linux support for this keycode was added in Gecko 4.0")
  case object Convert extends Key(28, "Linux support for this keycode was added in Gecko 4.0")
  case object Nonconvert extends Key(29, "Linux support for this keycode was added in Gecko 4.0")
  case object Accept extends Key(30, "Linux support for this keycode was added in Gecko 4.0")
  case object Modechange extends Key(31, "Linux support for this keycode was added in Gecko 4.0")
  case object Sleep extends Key(95, "Linux support for this keycode was added in Gecko 4.0")

  def byCode(code: Int) = values.find(k => k.code == code)

  val values = findValues.toVector
}
