package io.youi

case class Key private(name: String, code: Int, lower: Option[Char], upper: Option[Char]) {
  Key.add(this)
}

object Key {
  private var names = Map.empty[String, Key]
  private var codes = Map.empty[Int, Key]
  private var chars = Map.empty[Char, Key]

  private def apply(name: String, code: Int): Key = Key(name, code, None, None)
  private def apply(name: String, code: Int, char: Char): Key = Key(name, code, Some(char), Some(char))

  private def add(key: Key): Unit = {
    names += key.name -> key
    codes += key.code -> key
    key.lower.foreach(c => chars += c -> key)
    key.upper.foreach(c => chars += c -> key)
  }

  def byName(name: String): Option[Key] = names.get(name)
  def byCode(code: Int): Option[Key] = codes.get(code)
  def byChar(char: Char): Option[Key] = chars.get(char)

  val Cancel = Key("Cancel", 3)
  val Help = Key("Help", 6)
  val BackSpace = Key("BackSpace", 8)
  val Tab = Key("Tab", 9)
  val Clear = Key("Clear", 12)
  val Return = Key("Return", 13)
  val Enter = Key("Enter", 14)
  val Shift = Key("Shift", 16)
  val Control = Key("Control", 17)
  val Alt = Key("Alt", 18)
  val Pause = Key("Pause", 19)
  val CapsLock = Key("CapsLock", 20)
  val Kana = Key("Kana", 21)
  val Hangul = Key("Hangul", 21)
  val Eisu = Key("Eisu", 22)
  val Junja = Key("Junja", 23)
  val Final = Key("Final", 24)
  val Hanja = Key("Hanja", 25)
  val Kanji = Key("Kanji", 25)
  val Escape = Key("Escape", 27)
  val Convert = Key("Convert", 28)
  val NonConvert = Key("NonConvert", 29)
  val Accept = Key("Accept", 30)
  val ModeChange = Key("ModeChange", 31)
  val Space = Key("Space", 32)
  val PageUp = Key("PageUp", 33)
  val PageDown = Key("PageDown", 34)
  val End = Key("End", 35)
  val Home = Key("Home", 36)
  val Left = Key("Left", 37)
  val Up = Key("Up", 38)
  val Right = Key("Right", 39)
  val Down = Key("Down", 40)
  val Select = Key("Select", 41)
  val Print = Key("Print", 42)
  val Execute = Key("Execute", 43)
  val PrintScreen = Key("PrintScreen", 44)
  val Insert = Key("Insert", 45)
  val Delete = Key("Delete", 46)
  val Zero = Key("Zero", 48)
  val One = Key("One", 49, '1')
  val Two = Key("Two", 50, '2')
  val Three = Key("Three", 51, '3')
  val Four = Key("Four", 52, '4')
  val Five = Key("Five", 53, '5')
  val Six = Key("Six", 54, '6')
  val Seven = Key("Seven", 55, '7')
  val Eight = Key("Eight", 56, '8')
  val Nine = Key("Nine", 57, '9')
  val Colon = Key("Colon", 58, ':')
  val SemiColon = Key("SemiColon", 59, ';')
  val LessThan = Key("LessThan", 60, '<')
  val Equals = Key("Equals", 61, '=')
  val GreaterThan = Key("GreaterThan", 62, '>')
  val QuestionMark = Key("QuestionMark", 63, '?')
  val At = Key("At", 64, '@')
  val A = Key("A", 65, lower = Some('a'), upper = Some('A'))
  val B = Key("B", 66, lower = Some('b'), upper = Some('B'))
  val C = Key("C", 67, lower = Some('c'), upper = Some('C'))
  val D = Key("D", 68, lower = Some('d'), upper = Some('D'))
  val E = Key("E", 69, lower = Some('e'), upper = Some('E'))
  val F = Key("F", 70, lower = Some('f'), upper = Some('F'))
  val G = Key("G", 71, lower = Some('g'), upper = Some('G'))
  val H = Key("H", 72, lower = Some('h'), upper = Some('H'))
  val I = Key("I", 73, lower = Some('i'), upper = Some('I'))
  val J = Key("J", 74, lower = Some('j'), upper = Some('J'))
  val K = Key("K", 75, lower = Some('k'), upper = Some('K'))
  val L = Key("L", 76, lower = Some('l'), upper = Some('L'))
  val M = Key("M", 77, lower = Some('m'), upper = Some('M'))
  val N = Key("N", 78, lower = Some('n'), upper = Some('N'))
  val O = Key("O", 79, lower = Some('o'), upper = Some('O'))
  val P = Key("P", 80, lower = Some('p'), upper = Some('P'))
  val Q = Key("Q", 81, lower = Some('q'), upper = Some('Q'))
  val R = Key("R", 82, lower = Some('r'), upper = Some('R'))
  val S = Key("S", 83, lower = Some('s'), upper = Some('S'))
  val T = Key("T", 84, lower = Some('t'), upper = Some('T'))
  val U = Key("U", 85, lower = Some('u'), upper = Some('U'))
  val V = Key("V", 86, lower = Some('v'), upper = Some('V'))
  val W = Key("W", 87, lower = Some('w'), upper = Some('W'))
  val X = Key("X", 88, lower = Some('x'), upper = Some('X'))
  val Y = Key("Y", 89, lower = Some('y'), upper = Some('Y'))
  val Z = Key("Z", 90, lower = Some('z'), upper = Some('Z'))
  val Win = Key("Win", 91)
  val ContextMenu = Key("ContextMenu", 93)
  val Sleep = Key("Sleep", 95)
  val NumpadZero = Key("NumpadZero", 96)
  val NumpadOne = Key("NumpadOne", 97)
  val NumpadTwo = Key("NumpadTwo", 98)
  val NumpadThree = Key("NumpadThree", 99)
  val NumpadFour = Key("NumpadFour", 100)
  val NumpadFive = Key("NumpadFive", 101)
  val NumpadSix = Key("NumpadSix", 102)
  val NumpadSeven = Key("NumpadSeven", 103)
  val NumpadEight = Key("NumpadEight", 104)
  val NumpadNine = Key("NumpadNine", 105)
  val Multiply = Key("Multiply", 106, '*')
  val Add = Key("Add", 107, '+')
  val Separator = Key("Separator", 108)
  val Decimal = Key("Decimal", 110, '.')
  val Divide = Key("Divide", 111, '/')
  val F1 = Key("F1", 112)
  val F2 = Key("F2", 113)
  val F3 = Key("F3", 114)
  val F4 = Key("F4", 115)
  val F5 = Key("F5", 116)
  val F6 = Key("F6", 117)
  val F7 = Key("F7", 118)
  val F8 = Key("F8", 119)
  val F9 = Key("F9", 120)
  val F10 = Key("F10", 121)
  val F11 = Key("F11", 122)
  val F12 = Key("F12", 123)
  val F13 = Key("F13", 124)
  val F14 = Key("F14", 125)
  val F15 = Key("F15", 126)
  val F16 = Key("F16", 127)
  val F17 = Key("F17", 128)
  val F18 = Key("F18", 129)
  val F19 = Key("F19", 130)
  val F20 = Key("F20", 131)
  val F21 = Key("F21", 132)
  val F22 = Key("F22", 133)
  val F23 = Key("F23", 134)
  val F24 = Key("F24", 135)
  val NumLock = Key("NumLock", 144)
  val ScrollLock = Key("ScrollLock", 145)
  val WinOEMFJJisho = Key("WinOEMFJJisho", 146)
  val WinOEMFJMasshou = Key("WinOEMFJMasshou", 147)
  val WinOEMFJTouroku = Key("WinOEMFJTouroku", 148)
  val WinOEMFJLoya = Key("WinOEMFJLoya", 149)
  val WinOEMFJRoya = Key("WinOEMFJRoya", 150)
  val Circumflex = Key("Circumflex", 160, '^')
  val Exclamation = Key("Exclamation", 161, '!')
  val DoubleQuote = Key("DoubleQuote", 162, '"')
  val Hash = Key("Hash", 163, '#')
  val Dollar = Key("Dollar", 164, '$')
  val Percent = Key("Percent", 165, '%')
  val Ampersand = Key("Ampersand", 166, '&')
  val Underscore = Key("Underscore", 167, '_')
  val OpenParen = Key("OpenParen", 168, '(')
  val CloseParen = Key("CloseParen", 169, ')')
  val Asterisk = Key("Asterisk", 170, '*')
  val Plus = Key("Plus", 171, '+')
  val Pipe = Key("Pipe", 172, '|')
  val HyphenMinus = Key("HyphenMinus", 173, '-')
  val OpenCurlyBracket = Key("OpenCurlyBracket", 174, '{')
  val CloseCurlyBracket = Key("CloseCurlyBracket", 175, '}')
  val Tilde = Key("Tilde", 176, '~')
  val VolumeMute = Key("VolumeMute", 181)
  val VolumeDown = Key("VolumeDown", 182)
  val VolumeUp = Key("VolumeUp", 183)
  val Comma = Key("Comma", 188, ',')
  val Period = Key("Period", 190, '.')
  val Slash = Key("Slash", 191, '/')
  val BackQuote = Key("BackQuote", 192, '`')
  val OpenBrackt = Key("OpenBrackt", 219, '[')
  val BackSlash = Key("BackSlash", 220, '\\')
  val CloseBracket = Key("CloseBracket", 221, ']')
  val Quote = Key("Quote", 222, '"')
  val Meta = Key("Meta", 224)
  val AltGr = Key("AltGr", 225)
  val WinIcoHelp = Key("WinIcoHelp", 227)
  val WinIco00 = Key("WinIco00", 228)
  val WinIcoClear = Key("WinIcoClear", 230)
  val WinOEMReset = Key("WinOEMReset", 233)
  val WinOEMJump = Key("WinOEMJump", 234)
  val WinOEMPA1 = Key("WinOEMPA1", 235)
  val WinOEMPA2 = Key("WinOEMPA2", 236)
  val WinOEMPA3 = Key("WinOEMPA3", 237)
  val WinOEMWSCTRL = Key("WinOEMWSCTRL", 238)
  val WinOEMCusel = Key("WinOEMCusel", 239)
  val WinOEMAttn = Key("WinOEMAttn", 240)
  val WinOEMFinish = Key("WinOEMFinish", 241)
  val WinOEMCopy = Key("WinOEMCopy", 242)
  val WinOEMAuto = Key("WinOEMAuto", 243)
  val WinOEMENLW = Key("WinOEMENLW", 244)
  val WinOEMBackTab = Key("WinOEMBackTab", 245)
  val Attn = Key("Attn", 246)
  val CrSel = Key("CrSel", 247)
  val ExSel = Key("ExSel", 248)
  val ErEOF = Key("ErEOF", 249)
  val Play = Key("Play", 250)
  val Zoom = Key("Zoom", 251)
  val Pa1 = Key("Pa1", 253)
  val WinOEMClear = Key("WinOEMClear", 254)
}