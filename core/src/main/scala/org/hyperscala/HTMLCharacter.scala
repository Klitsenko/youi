package org.hyperscala

import org.powerscala.enum.{Enumerated, EnumEntry}

/**
 * @author Matt Hicks <matt@outr.com>
 */
class HTMLCharacter private(val htmlName: String, val hex: String, val numeric: String, val block: String, val category: String, val set: String, val description: String) extends EnumEntry

object HTMLCharacter extends Enumerated[HTMLCharacter] {
  val CharacterTabulation = new HTMLCharacter("&Tab;", "&#x00009;", "&#9;", "C0 Controls and Basic Latin", "Cc", "mmlextra", "Character Tabulation")
  val LineFeed = new HTMLCharacter("&NewLine;", "&#x0000A;", "&#10;", "C0 Controls and Basic Latin", "Cc", "mmlextra", "Line Feed (Lf)")
  val ExclamationMark = new HTMLCharacter("&excl;", "&#x00021;", "&#33;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Exclamation Mark")
  val QuotationMark = new HTMLCharacter("&quot;", "&#x00022;", "&#34;", "C0 Controls and Basic Latin", "Po", "predefined xhtml1-special 9573-2003-isonum html5-uppercase", "Quotation Mark")
  val NumberSign = new HTMLCharacter("&num;", "&#x00023;", "&#35;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Number Sign")
  val DollarSign = new HTMLCharacter("&dollar;", "&#x00024;", "&#36;", "C0 Controls and Basic Latin", "Sc", "9573-2003-isonum", "Dollar Sign")
  val PercentSign = new HTMLCharacter("&percnt;", "&#x00025;", "&#37;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Percent Sign")
  val Ampersand = new HTMLCharacter("&amp;", "&#x00026;", "&#38;", "C0 Controls and Basic Latin", "Po", "predefined html5-uppercase 9573-2003-isonum", "Ampersand")
  val Apostrophe = new HTMLCharacter("&apos;", "&#x00027;", "&#39;", "C0 Controls and Basic Latin", "Po", "predefined 9573-2003-isonum", "Apostrophe")
  val LeftParenthesis = new HTMLCharacter("&lpar;", "&#x00028;", "&#40;", "C0 Controls and Basic Latin", "Ps", "9573-2003-isonum", "Left Parenthesis")
  val RightParenthesis = new HTMLCharacter("&rpar;", "&#x00029;", "&#41;", "C0 Controls and Basic Latin", "Pe", "9573-2003-isonum", "Right Parenthesis")
  val Asterisk = new HTMLCharacter("&ast;", "&#x0002A;", "&#42;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum 9573-2003-isoamsb", "Asterisk")
  val PlusSign = new HTMLCharacter("&plus;", "&#x0002B;", "&#43;", "C0 Controls and Basic Latin", "Sm", "9573-2003-isonum", "Plus Sign")
  val Comma = new HTMLCharacter("&comma;", "&#x0002C;", "&#44;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Comma")
  val FullStop = new HTMLCharacter("&period;", "&#x0002E;", "&#46;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Full Stop")
  val Solidus = new HTMLCharacter("&sol;", "&#x0002F;", "&#47;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Solidus")
  val Colon = new HTMLCharacter("&colon;", "&#x0003A;", "&#58;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Colon")
  val Semicolon = new HTMLCharacter("&semi;", "&#x0003B;", "&#59;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Semicolon")
  val LessThanSign = new HTMLCharacter("&lt;", "&#x0003C;", "&#60;", "C0 Controls and Basic Latin", "Sm", "predefined xhtml1-special 9573-2003-isonum html5-uppercase", "Less-Than Sign")
  val EqualsSign = new HTMLCharacter("&equals;", "&#x0003D;", "&#61;", "C0 Controls and Basic Latin", "Sm", "9573-2003-isonum", "Equals Sign")
  val GreaterThanSign = new HTMLCharacter("&gt;", "&#x0003E;", "&#62;", "C0 Controls and Basic Latin", "Sm", "predefined xhtml1-special 9573-2003-isonum html5-uppercase", "Greater-Than Sign")
  val QuestionMark = new HTMLCharacter("&quest;", "&#x0003F;", "&#63;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Question Mark")
  val CommercialAt = new HTMLCharacter("&commat;", "&#x00040;", "&#64;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Commercial At")
  val LeftSquareBracket = new HTMLCharacter("&lsqb;", "&#x0005B;", "&#91;", "C0 Controls and Basic Latin", "Ps", "9573-2003-isonum mmlalias", "Left Square Bracket")
  val ReverseSolidus = new HTMLCharacter("&bsol;", "&#x0005C;", "&#92;", "C0 Controls and Basic Latin", "Po", "9573-2003-isonum", "Reverse Solidus")
  val RightSquareBracket = new HTMLCharacter("&rsqb;", "&#x0005D;", "&#93;", "C0 Controls and Basic Latin", "Pe", "9573-2003-isonum mmlalias", "Right Square Bracket")
  val CircumflexAccent = new HTMLCharacter("&Hat;", "&#x0005E;", "&#94;", "C0 Controls and Basic Latin", "Sk", "mmlextra", "Circumflex Accent")
  val LowLine = new HTMLCharacter("&lowbar;", "&#x0005F;", "&#95;", "C0 Controls and Basic Latin", "Pc", "9573-2003-isonum", "Low Line")
  val GraveAccent = new HTMLCharacter("&grave;", "&#x00060;", "&#96;", "C0 Controls and Basic Latin", "Sk", "9573-2003-isodia mmlalias", "Grave Accent")
  val LeftCurlyBracket = new HTMLCharacter("&lcub;", "&#x0007B;", "&#123;", "C0 Controls and Basic Latin", "Ps", "9573-2003-isonum mmlalias", "Left Curly Bracket")
  val VerticalLine = new HTMLCharacter("&verbar;", "&#x0007C;", "&#124;", "C0 Controls and Basic Latin", "Sm", "9573-2003-isonum mmlalias mmlextra", "Vertical Line")
  val RightCurlyBracket = new HTMLCharacter("&rcub;", "&#x0007D;", "&#125;", "C0 Controls and Basic Latin", "Pe", "9573-2003-isonum mmlalias", "Right Curly Bracket")
  val NoBreakSpace = new HTMLCharacter("&nbsp;", "&#x000A0;", "&#160;", "C1 Controls and Latin-1 Supplement", "Zs", "xhtml1-lat1 9573-2003-isonum mmlalias", "No-Break Space")
  val InvertedExclamationMark = new HTMLCharacter("&iexcl;", "&#x000A1;", "&#161;", "C1 Controls and Latin-1 Supplement", "Po", "xhtml1-lat1 9573-2003-isonum", "Inverted Exclamation Mark")
  val CentSign = new HTMLCharacter("&cent;", "&#x000A2;", "&#162;", "C1 Controls and Latin-1 Supplement", "Sc", "xhtml1-lat1 9573-2003-isonum", "Cent Sign")
  val PoundSign = new HTMLCharacter("&pound;", "&#x000A3;", "&#163;", "C1 Controls and Latin-1 Supplement", "Sc", "xhtml1-lat1 9573-2003-isonum", "Pound Sign")
  val CurrencySign = new HTMLCharacter("&curren;", "&#x000A4;", "&#164;", "C1 Controls and Latin-1 Supplement", "Sc", "xhtml1-lat1 9573-2003-isonum", "Currency Sign")
  val YenSign = new HTMLCharacter("&yen;", "&#x000A5;", "&#165;", "C1 Controls and Latin-1 Supplement", "Sc", "xhtml1-lat1 9573-2003-isonum", "Yen Sign")
  val BrokenBar = new HTMLCharacter("&brvbar;", "&#x000A6;", "&#166;", "C1 Controls and Latin-1 Supplement", "So", "xhtml1-lat1 9573-2003-isonum", "Broken Bar")
  val SectionSign = new HTMLCharacter("&sect;", "&#x000A7;", "&#167;", "C1 Controls and Latin-1 Supplement", "So", "xhtml1-lat1 9573-2003-isonum", "Section Sign")
  val Diaeresis = new HTMLCharacter("&Dot;", "&#x000A8;", "&#168;", "C1 Controls and Latin-1 Supplement", "Sk", "9573-2003-isotech 9573-2003-isodia mmlalias xhtml1-lat1", "Diaeresis")
  val CopyrightSign = new HTMLCharacter("&copy;", "&#x000A9;", "&#169;", "C1 Controls and Latin-1 Supplement", "So", "xhtml1-lat1 9573-2003-isonum html5-uppercase", "Copyright Sign")
  val FeminineOrdinalIndicator = new HTMLCharacter("&ordf;", "&#x000AA;", "&#170;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isonum", "Feminine Ordinal Indicator")
  val LeftPointingDoubleAngleQuotationMark = new HTMLCharacter("&laquo;", "&#x000AB;", "&#171;", "C1 Controls and Latin-1 Supplement", "Pi", "xhtml1-lat1 9573-2003-isonum", "Left-Pointing Double Angle Quotation Mark")
  val NotSign = new HTMLCharacter("&not;", "&#x000AC;", "&#172;", "C1 Controls and Latin-1 Supplement", "Sm", "xhtml1-lat1 9573-2003-isonum", "Not Sign")
  val SoftHyphen = new HTMLCharacter("&shy;", "&#x000AD;", "&#173;", "C1 Controls and Latin-1 Supplement", "Cf", "xhtml1-lat1 9573-2003-isonum", "Soft Hyphen")
  val RegisteredSign = new HTMLCharacter("&reg;", "&#x000AE;", "&#174;", "C1 Controls and Latin-1 Supplement", "So", "xhtml1-lat1 9573-2003-isonum mmlalias html5-uppercase", "Registered Sign")
  val Macron = new HTMLCharacter("&macr;", "&#x000AF;", "&#175;", "C1 Controls and Latin-1 Supplement", "Sk", "xhtml1-lat1 9573-2003-isodia mmlextra 9573-2003-isotech", "Macron")
  val DegreeSign = new HTMLCharacter("&deg;", "&#x000B0;", "&#176;", "C1 Controls and Latin-1 Supplement", "So", "xhtml1-lat1 9573-2003-isonum", "Degree Sign")
  val PlusMinusSign = new HTMLCharacter("&plusmn;", "&#x000B1;", "&#177;", "C1 Controls and Latin-1 Supplement", "Sm", "xhtml1-lat1 9573-2003-isonum mmlalias", "Plus-Minus Sign")
  val SuperscriptTwo = new HTMLCharacter("&sup2;", "&#x000B2;", "&#178;", "C1 Controls and Latin-1 Supplement", "No", "xhtml1-lat1 9573-2003-isonum", "Superscript Two")
  val SuperscriptThree = new HTMLCharacter("&sup3;", "&#x000B3;", "&#179;", "C1 Controls and Latin-1 Supplement", "No", "xhtml1-lat1 9573-2003-isonum", "Superscript Three")
  val AcuteAccent = new HTMLCharacter("&acute;", "&#x000B4;", "&#180;", "C1 Controls and Latin-1 Supplement", "Sk", "xhtml1-lat1 9573-2003-isodia mmlalias", "Acute Accent")
  val MicroSign = new HTMLCharacter("&micro;", "&#x000B5;", "&#181;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isonum", "Micro Sign")
  val PilcrowSign = new HTMLCharacter("&para;", "&#x000B6;", "&#182;", "C1 Controls and Latin-1 Supplement", "So", "xhtml1-lat1 9573-2003-isonum", "Pilcrow Sign")
  val MiddleDot = new HTMLCharacter("&middot;", "&#x000B7;", "&#183;", "C1 Controls and Latin-1 Supplement", "Po", "xhtml1-lat1 9573-2003-isonum mmlalias", "Middle Dot")
  val Cedilla = new HTMLCharacter("&cedil;", "&#x000B8;", "&#184;", "C1 Controls and Latin-1 Supplement", "Sk", "xhtml1-lat1 9573-2003-isodia mmlalias", "Cedilla")
  val SuperscriptOne = new HTMLCharacter("&sup1;", "&#x000B9;", "&#185;", "C1 Controls and Latin-1 Supplement", "No", "xhtml1-lat1 9573-2003-isonum", "Superscript One")
  val MasculineOrdinalIndicator = new HTMLCharacter("&ordm;", "&#x000BA;", "&#186;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isonum", "Masculine Ordinal Indicator")
  val RightPointingDoubleAngleQuotationMark = new HTMLCharacter("&raquo;", "&#x000BB;", "&#187;", "C1 Controls and Latin-1 Supplement", "Pf", "xhtml1-lat1 9573-2003-isonum", "Right-Pointing Double Angle Quotation Mark")
  val VulgarFractionOneQuarter = new HTMLCharacter("&frac14;", "&#x000BC;", "&#188;", "C1 Controls and Latin-1 Supplement", "No", "xhtml1-lat1 9573-2003-isonum", "Vulgar Fraction One Quarter")
  val VulgarFractionOneHalf = new HTMLCharacter("&frac12;", "&#x000BD;", "&#189;", "C1 Controls and Latin-1 Supplement", "No", "xhtml1-lat1 9573-2003-isonum", "Vulgar Fraction One Half")
  val VulgarFractionThreeQuarters = new HTMLCharacter("&frac34;", "&#x000BE;", "&#190;", "C1 Controls and Latin-1 Supplement", "No", "xhtml1-lat1 9573-2003-isonum", "Vulgar Fraction Three Quarters")
  val InvertedQuestionMark = new HTMLCharacter("&iquest;", "&#x000BF;", "&#191;", "C1 Controls and Latin-1 Supplement", "Po", "xhtml1-lat1 9573-2003-isonum", "Inverted Question Mark")
  val LatinCapitalLetterAWithGrave = new HTMLCharacter("&Agrave;", "&#x000C0;", "&#192;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter A With Grave")
  val LatinCapitalLetterAWithAcute = new HTMLCharacter("&Aacute;", "&#x000C1;", "&#193;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter A With Acute")
  val LatinCapitalLetterAWithCircumflex = new HTMLCharacter("&Acirc;", "&#x000C2;", "&#194;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter A With Circumflex")
  val LatinCapitalLetterAWithTilde = new HTMLCharacter("&Atilde;", "&#x000C3;", "&#195;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter A With Tilde")
  val LatinCapitalLetterAWithDiaeresis = new HTMLCharacter("&Auml;", "&#x000C4;", "&#196;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter A With Diaeresis")
  val LatinCapitalLetterAWithRingAbove = new HTMLCharacter("&Aring;", "&#x000C5;", "&#197;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter A With Ring Above")
  val LatinCapitalLetterAe = new HTMLCharacter("&AElig;", "&#x000C6;", "&#198;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter Ae")
  val LatinCapitalLetterCWithCedilla = new HTMLCharacter("&Ccedil;", "&#x000C7;", "&#199;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter C With Cedilla")
  val LatinCapitalLetterEWithGrave = new HTMLCharacter("&Egrave;", "&#x000C8;", "&#200;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter E With Grave")
  val LatinCapitalLetterEWithAcute = new HTMLCharacter("&Eacute;", "&#x000C9;", "&#201;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter E With Acute")
  val LatinCapitalLetterEWithCircumflex = new HTMLCharacter("&Ecirc;", "&#x000CA;", "&#202;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter E With Circumflex")
  val LatinCapitalLetterEWithDiaeresis = new HTMLCharacter("&Euml;", "&#x000CB;", "&#203;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter E With Diaeresis")
  val LatinCapitalLetterIWithGrave = new HTMLCharacter("&Igrave;", "&#x000CC;", "&#204;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter I With Grave")
  val LatinCapitalLetterIWithAcute = new HTMLCharacter("&Iacute;", "&#x000CD;", "&#205;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter I With Acute")
  val LatinCapitalLetterIWithCircumflex = new HTMLCharacter("&Icirc;", "&#x000CE;", "&#206;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter I With Circumflex")
  val LatinCapitalLetterIWithDiaeresis = new HTMLCharacter("&Iuml;", "&#x000CF;", "&#207;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter I With Diaeresis")
  val LatinCapitalLetterEth = new HTMLCharacter("&ETH;", "&#x000D0;", "&#208;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter Eth")
  val LatinCapitalLetterNWithTilde = new HTMLCharacter("&Ntilde;", "&#x000D1;", "&#209;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter N With Tilde")
  val LatinCapitalLetterOWithGrave = new HTMLCharacter("&Ograve;", "&#x000D2;", "&#210;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter O With Grave")
  val LatinCapitalLetterOWithAcute = new HTMLCharacter("&Oacute;", "&#x000D3;", "&#211;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter O With Acute")
  val LatinCapitalLetterOWithCircumflex = new HTMLCharacter("&Ocirc;", "&#x000D4;", "&#212;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter O With Circumflex")
  val LatinCapitalLetterOWithTilde = new HTMLCharacter("&Otilde;", "&#x000D5;", "&#213;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter O With Tilde")
  val LatinCapitalLetterOWithDiaeresis = new HTMLCharacter("&Ouml;", "&#x000D6;", "&#214;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter O With Diaeresis")
  val MultiplicationSign = new HTMLCharacter("&times;", "&#x000D7;", "&#215;", "C1 Controls and Latin-1 Supplement", "Sm", "xhtml1-lat1 9573-2003-isonum", "Multiplication Sign")
  val LatinCapitalLetterOWithStroke = new HTMLCharacter("&Oslash;", "&#x000D8;", "&#216;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter O With Stroke")
  val LatinCapitalLetterUWithGrave = new HTMLCharacter("&Ugrave;", "&#x000D9;", "&#217;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter U With Grave")
  val LatinCapitalLetterUWithAcute = new HTMLCharacter("&Uacute;", "&#x000DA;", "&#218;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter U With Acute")
  val LatinCapitalLetterUWithCircumflex = new HTMLCharacter("&Ucirc;", "&#x000DB;", "&#219;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter U With Circumflex")
  val LatinCapitalLetterUWithDiaeresis = new HTMLCharacter("&Uuml;", "&#x000DC;", "&#220;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter U With Diaeresis")
  val LatinCapitalLetterYWithAcute = new HTMLCharacter("&Yacute;", "&#x000DD;", "&#221;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter Y With Acute")
  val LatinCapitalLetterThorn = new HTMLCharacter("&THORN;", "&#x000DE;", "&#222;", "C1 Controls and Latin-1 Supplement", "Lu", "xhtml1-lat1 9573-2003-isolat1", "Latin Capital Letter Thorn")
  val LatinSmallLetterSharpS = new HTMLCharacter("&szlig;", "&#x000DF;", "&#223;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter Sharp S")
  val LatinSmallLetterAWithGrave = new HTMLCharacter("&agrave;", "&#x000E0;", "&#224;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter A With Grave")
  val LatinSmallLetterAWithAcute = new HTMLCharacter("&aacute;", "&#x000E1;", "&#225;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter A With Acute")
  val LatinSmallLetterAWithCircumflex = new HTMLCharacter("&acirc;", "&#x000E2;", "&#226;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter A With Circumflex")
  val LatinSmallLetterAWithTilde = new HTMLCharacter("&atilde;", "&#x000E3;", "&#227;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter A With Tilde")
  val LatinSmallLetterAWithDiaeresis = new HTMLCharacter("&auml;", "&#x000E4;", "&#228;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter A With Diaeresis")
  val LatinSmallLetterAWithRingAbove = new HTMLCharacter("&aring;", "&#x000E5;", "&#229;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter A With Ring Above")
  val LatinSmallLetterAe = new HTMLCharacter("&aelig;", "&#x000E6;", "&#230;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter Ae")
  val LatinSmallLetterCWithCedilla = new HTMLCharacter("&ccedil;", "&#x000E7;", "&#231;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter C With Cedilla")
  val LatinSmallLetterEWithGrave = new HTMLCharacter("&egrave;", "&#x000E8;", "&#232;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter E With Grave")
  val LatinSmallLetterEWithAcute = new HTMLCharacter("&eacute;", "&#x000E9;", "&#233;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter E With Acute")
  val LatinSmallLetterEWithCircumflex = new HTMLCharacter("&ecirc;", "&#x000EA;", "&#234;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter E With Circumflex")
  val LatinSmallLetterEWithDiaeresis = new HTMLCharacter("&euml;", "&#x000EB;", "&#235;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter E With Diaeresis")
  val LatinSmallLetterIWithGrave = new HTMLCharacter("&igrave;", "&#x000EC;", "&#236;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter I With Grave")
  val LatinSmallLetterIWithAcute = new HTMLCharacter("&iacute;", "&#x000ED;", "&#237;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter I With Acute")
  val LatinSmallLetterIWithCircumflex = new HTMLCharacter("&icirc;", "&#x000EE;", "&#238;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter I With Circumflex")
  val LatinSmallLetterIWithDiaeresis = new HTMLCharacter("&iuml;", "&#x000EF;", "&#239;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter I With Diaeresis")
  val LatinSmallLetterEth = new HTMLCharacter("&eth;", "&#x000F0;", "&#240;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter Eth")
  val LatinSmallLetterNWithTilde = new HTMLCharacter("&ntilde;", "&#x000F1;", "&#241;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter N With Tilde")
  val LatinSmallLetterOWithGrave = new HTMLCharacter("&ograve;", "&#x000F2;", "&#242;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter O With Grave")
  val LatinSmallLetterOWithAcute = new HTMLCharacter("&oacute;", "&#x000F3;", "&#243;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter O With Acute")
  val LatinSmallLetterOWithCircumflex = new HTMLCharacter("&ocirc;", "&#x000F4;", "&#244;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter O With Circumflex")
  val LatinSmallLetterOWithTilde = new HTMLCharacter("&otilde;", "&#x000F5;", "&#245;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter O With Tilde")
  val LatinSmallLetterOWithDiaeresis = new HTMLCharacter("&ouml;", "&#x000F6;", "&#246;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter O With Diaeresis")
  val DivisionSign = new HTMLCharacter("&divide;", "&#x000F7;", "&#247;", "C1 Controls and Latin-1 Supplement", "Sm", "xhtml1-lat1 9573-2003-isonum mmlalias", "Division Sign")
  val LatinSmallLetterOWithStroke = new HTMLCharacter("&oslash;", "&#x000F8;", "&#248;", "C1 Controls and Latin-1 Supplement", "Ll", "9573-2003-isolat1 xhtml1-lat1", "Latin Small Letter O With Stroke")
  val LatinSmallLetterUWithGrave = new HTMLCharacter("&ugrave;", "&#x000F9;", "&#249;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter U With Grave")
  val LatinSmallLetterUWithAcute = new HTMLCharacter("&uacute;", "&#x000FA;", "&#250;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter U With Acute")
  val LatinSmallLetterUWithCircumflex = new HTMLCharacter("&ucirc;", "&#x000FB;", "&#251;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter U With Circumflex")
  val LatinSmallLetterUWithDiaeresis = new HTMLCharacter("&uuml;", "&#x000FC;", "&#252;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter U With Diaeresis")
  val LatinSmallLetterYWithAcute = new HTMLCharacter("&yacute;", "&#x000FD;", "&#253;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter Y With Acute")
  val LatinSmallLetterThorn = new HTMLCharacter("&thorn;", "&#x000FE;", "&#254;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter Thorn")
  val LatinSmallLetterYWithDiaeresis = new HTMLCharacter("&yuml;", "&#x000FF;", "&#255;", "C1 Controls and Latin-1 Supplement", "Ll", "xhtml1-lat1 9573-2003-isolat1", "Latin Small Letter Y With Diaeresis")
  val LatinCapitalLetterAWithMacron = new HTMLCharacter("&Amacr;", "&#x00100;", "&#256;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter A With Macron")
  val LatinSmallLetterAWithMacron = new HTMLCharacter("&amacr;", "&#x00101;", "&#257;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter A With Macron")
  val LatinCapitalLetterAWithBreve = new HTMLCharacter("&Abreve;", "&#x00102;", "&#258;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter A With Breve")
  val LatinSmallLetterAWithBreve = new HTMLCharacter("&abreve;", "&#x00103;", "&#259;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter A With Breve")
  val LatinCapitalLetterAWithOgonek = new HTMLCharacter("&Aogon;", "&#x00104;", "&#260;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter A With Ogonek")
  val LatinSmallLetterAWithOgonek = new HTMLCharacter("&aogon;", "&#x00105;", "&#261;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter A With Ogonek")
  val LatinCapitalLetterCWithAcute = new HTMLCharacter("&Cacute;", "&#x00106;", "&#262;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter C With Acute")
  val LatinSmallLetterCWithAcute = new HTMLCharacter("&cacute;", "&#x00107;", "&#263;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter C With Acute")
  val LatinCapitalLetterCWithCircumflex = new HTMLCharacter("&Ccirc;", "&#x00108;", "&#264;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter C With Circumflex")
  val LatinSmallLetterCWithCircumflex = new HTMLCharacter("&ccirc;", "&#x00109;", "&#265;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter C With Circumflex")
  val LatinCapitalLetterCWithDotAbove = new HTMLCharacter("&Cdot;", "&#x0010A;", "&#266;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter C With Dot Above")
  val LatinSmallLetterCWithDotAbove = new HTMLCharacter("&cdot;", "&#x0010B;", "&#267;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter C With Dot Above")
  val LatinCapitalLetterCWithCaron = new HTMLCharacter("&Ccaron;", "&#x0010C;", "&#268;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter C With Caron")
  val LatinSmallLetterCWithCaron = new HTMLCharacter("&ccaron;", "&#x0010D;", "&#269;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter C With Caron")
  val LatinCapitalLetterDWithCaron = new HTMLCharacter("&Dcaron;", "&#x0010E;", "&#270;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter D With Caron")
  val LatinSmallLetterDWithCaron = new HTMLCharacter("&dcaron;", "&#x0010F;", "&#271;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter D With Caron")
  val LatinCapitalLetterDWithStroke = new HTMLCharacter("&Dstrok;", "&#x00110;", "&#272;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter D With Stroke")
  val LatinSmallLetterDWithStroke = new HTMLCharacter("&dstrok;", "&#x00111;", "&#273;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter D With Stroke")
  val LatinCapitalLetterEWithMacron = new HTMLCharacter("&Emacr;", "&#x00112;", "&#274;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter E With Macron")
  val LatinSmallLetterEWithMacron = new HTMLCharacter("&emacr;", "&#x00113;", "&#275;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter E With Macron")
  val LatinCapitalLetterEWithDotAbove = new HTMLCharacter("&Edot;", "&#x00116;", "&#278;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter E With Dot Above")
  val LatinSmallLetterEWithDotAbove = new HTMLCharacter("&edot;", "&#x00117;", "&#279;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter E With Dot Above")
  val LatinCapitalLetterEWithOgonek = new HTMLCharacter("&Eogon;", "&#x00118;", "&#280;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter E With Ogonek")
  val LatinSmallLetterEWithOgonek = new HTMLCharacter("&eogon;", "&#x00119;", "&#281;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter E With Ogonek")
  val LatinCapitalLetterEWithCaron = new HTMLCharacter("&Ecaron;", "&#x0011A;", "&#282;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter E With Caron")
  val LatinSmallLetterEWithCaron = new HTMLCharacter("&ecaron;", "&#x0011B;", "&#283;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter E With Caron")
  val LatinCapitalLetterGWithCircumflex = new HTMLCharacter("&Gcirc;", "&#x0011C;", "&#284;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter G With Circumflex")
  val LatinSmallLetterGWithCircumflex = new HTMLCharacter("&gcirc;", "&#x0011D;", "&#285;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter G With Circumflex")
  val LatinCapitalLetterGWithBreve = new HTMLCharacter("&Gbreve;", "&#x0011E;", "&#286;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter G With Breve")
  val LatinSmallLetterGWithBreve = new HTMLCharacter("&gbreve;", "&#x0011F;", "&#287;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter G With Breve")
  val LatinCapitalLetterGWithDotAbove = new HTMLCharacter("&Gdot;", "&#x00120;", "&#288;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter G With Dot Above")
  val LatinSmallLetterGWithDotAbove = new HTMLCharacter("&gdot;", "&#x00121;", "&#289;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter G With Dot Above")
  val LatinCapitalLetterGWithCedilla = new HTMLCharacter("&Gcedil;", "&#x00122;", "&#290;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter G With Cedilla")
  val LatinCapitalLetterHWithCircumflex = new HTMLCharacter("&Hcirc;", "&#x00124;", "&#292;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter H With Circumflex")
  val LatinSmallLetterHWithCircumflex = new HTMLCharacter("&hcirc;", "&#x00125;", "&#293;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter H With Circumflex")
  val LatinCapitalLetterHWithStroke = new HTMLCharacter("&Hstrok;", "&#x00126;", "&#294;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter H With Stroke")
  val LatinSmallLetterHWithStroke = new HTMLCharacter("&hstrok;", "&#x00127;", "&#295;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter H With Stroke")
  val LatinCapitalLetterIWithTilde = new HTMLCharacter("&Itilde;", "&#x00128;", "&#296;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter I With Tilde")
  val LatinSmallLetterIWithTilde = new HTMLCharacter("&itilde;", "&#x00129;", "&#297;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter I With Tilde")
  val LatinCapitalLetterIWithMacron = new HTMLCharacter("&Imacr;", "&#x0012A;", "&#298;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter I With Macron")
  val LatinSmallLetterIWithMacron = new HTMLCharacter("&imacr;", "&#x0012B;", "&#299;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter I With Macron")
  val LatinCapitalLetterIWithOgonek = new HTMLCharacter("&Iogon;", "&#x0012E;", "&#302;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter I With Ogonek")
  val LatinSmallLetterIWithOgonek = new HTMLCharacter("&iogon;", "&#x0012F;", "&#303;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter I With Ogonek")
  val LatinCapitalLetterIWithDotAbove = new HTMLCharacter("&Idot;", "&#x00130;", "&#304;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter I With Dot Above")
  val LatinSmallLetterDotlessI = new HTMLCharacter("&imath;", "&#x00131;", "&#305;", "Latin Extended-A", "Ll", "9573-2003-isoamso 9573-2003-isolat2", "Latin Small Letter Dotless I")
  val LatinCapitalLigatureIj = new HTMLCharacter("&IJlig;", "&#x00132;", "&#306;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Ligature Ij")
  val LatinSmallLigatureIj = new HTMLCharacter("&ijlig;", "&#x00133;", "&#307;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Ligature Ij")
  val LatinCapitalLetterJWithCircumflex = new HTMLCharacter("&Jcirc;", "&#x00134;", "&#308;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter J With Circumflex")
  val LatinSmallLetterJWithCircumflex = new HTMLCharacter("&jcirc;", "&#x00135;", "&#309;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter J With Circumflex")
  val LatinCapitalLetterKWithCedilla = new HTMLCharacter("&Kcedil;", "&#x00136;", "&#310;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter K With Cedilla")
  val LatinSmallLetterKWithCedilla = new HTMLCharacter("&kcedil;", "&#x00137;", "&#311;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter K With Cedilla")
  val LatinSmallLetterKra = new HTMLCharacter("&kgreen;", "&#x00138;", "&#312;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter Kra")
  val LatinCapitalLetterLWithAcute = new HTMLCharacter("&Lacute;", "&#x00139;", "&#313;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter L With Acute")
  val LatinSmallLetterLWithAcute = new HTMLCharacter("&lacute;", "&#x0013A;", "&#314;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter L With Acute")
  val LatinCapitalLetterLWithCedilla = new HTMLCharacter("&Lcedil;", "&#x0013B;", "&#315;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter L With Cedilla")
  val LatinSmallLetterLWithCedilla = new HTMLCharacter("&lcedil;", "&#x0013C;", "&#316;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter L With Cedilla")
  val LatinCapitalLetterLWithCaron = new HTMLCharacter("&Lcaron;", "&#x0013D;", "&#317;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter L With Caron")
  val LatinSmallLetterLWithCaron = new HTMLCharacter("&lcaron;", "&#x0013E;", "&#318;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter L With Caron")
  val LatinCapitalLetterLWithMiddleDot = new HTMLCharacter("&Lmidot;", "&#x0013F;", "&#319;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter L With Middle Dot")
  val LatinSmallLetterLWithMiddleDot = new HTMLCharacter("&lmidot;", "&#x00140;", "&#320;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter L With Middle Dot")
  val LatinCapitalLetterLWithStroke = new HTMLCharacter("&Lstrok;", "&#x00141;", "&#321;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter L With Stroke")
  val LatinSmallLetterLWithStroke = new HTMLCharacter("&lstrok;", "&#x00142;", "&#322;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter L With Stroke")
  val LatinCapitalLetterNWithAcute = new HTMLCharacter("&Nacute;", "&#x00143;", "&#323;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter N With Acute")
  val LatinSmallLetterNWithAcute = new HTMLCharacter("&nacute;", "&#x00144;", "&#324;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter N With Acute")
  val LatinCapitalLetterNWithCedilla = new HTMLCharacter("&Ncedil;", "&#x00145;", "&#325;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter N With Cedilla")
  val LatinSmallLetterNWithCedilla = new HTMLCharacter("&ncedil;", "&#x00146;", "&#326;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter N With Cedilla")
  val LatinCapitalLetterNWithCaron = new HTMLCharacter("&Ncaron;", "&#x00147;", "&#327;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter N With Caron")
  val LatinSmallLetterNWithCaron = new HTMLCharacter("&ncaron;", "&#x00148;", "&#328;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter N With Caron")
  val LatinSmallLetterNPrecededByApostrophe = new HTMLCharacter("&napos;", "&#x00149;", "&#329;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter N Preceded By Apostrophe")
  val LatinCapitalLetterEng = new HTMLCharacter("&ENG;", "&#x0014A;", "&#330;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter Eng")
  val LatinSmallLetterEng = new HTMLCharacter("&eng;", "&#x0014B;", "&#331;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter Eng")
  val LatinCapitalLetterOWithMacron = new HTMLCharacter("&Omacr;", "&#x0014C;", "&#332;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter O With Macron")
  val LatinSmallLetterOWithMacron = new HTMLCharacter("&omacr;", "&#x0014D;", "&#333;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter O With Macron")
  val LatinCapitalLetterOWithDoubleAcute = new HTMLCharacter("&Odblac;", "&#x00150;", "&#336;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter O With Double Acute")
  val LatinSmallLetterOWithDoubleAcute = new HTMLCharacter("&odblac;", "&#x00151;", "&#337;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter O With Double Acute")
  val LatinCapitalLigatureOe = new HTMLCharacter("&OElig;", "&#x00152;", "&#338;", "Latin Extended-A", "Lu", "xhtml1-special 9573-2003-isolat2", "Latin Capital Ligature Oe")
  val LatinSmallLigatureOe = new HTMLCharacter("&oelig;", "&#x00153;", "&#339;", "Latin Extended-A", "Ll", "xhtml1-special 9573-2003-isolat2", "Latin Small Ligature Oe")
  val LatinCapitalLetterRWithAcute = new HTMLCharacter("&Racute;", "&#x00154;", "&#340;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter R With Acute")
  val LatinSmallLetterRWithAcute = new HTMLCharacter("&racute;", "&#x00155;", "&#341;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter R With Acute")
  val LatinCapitalLetterRWithCedilla = new HTMLCharacter("&Rcedil;", "&#x00156;", "&#342;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter R With Cedilla")
  val LatinSmallLetterRWithCedilla = new HTMLCharacter("&rcedil;", "&#x00157;", "&#343;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter R With Cedilla")
  val LatinCapitalLetterRWithCaron = new HTMLCharacter("&Rcaron;", "&#x00158;", "&#344;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter R With Caron")
  val LatinSmallLetterRWithCaron = new HTMLCharacter("&rcaron;", "&#x00159;", "&#345;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter R With Caron")
  val LatinCapitalLetterSWithAcute = new HTMLCharacter("&Sacute;", "&#x0015A;", "&#346;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter S With Acute")
  val LatinSmallLetterSWithAcute = new HTMLCharacter("&sacute;", "&#x0015B;", "&#347;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter S With Acute")
  val LatinCapitalLetterSWithCircumflex = new HTMLCharacter("&Scirc;", "&#x0015C;", "&#348;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter S With Circumflex")
  val LatinSmallLetterSWithCircumflex = new HTMLCharacter("&scirc;", "&#x0015D;", "&#349;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter S With Circumflex")
  val LatinCapitalLetterSWithCedilla = new HTMLCharacter("&Scedil;", "&#x0015E;", "&#350;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter S With Cedilla")
  val LatinSmallLetterSWithCedilla = new HTMLCharacter("&scedil;", "&#x0015F;", "&#351;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter S With Cedilla")
  val LatinCapitalLetterSWithCaron = new HTMLCharacter("&Scaron;", "&#x00160;", "&#352;", "Latin Extended-A", "Lu", "xhtml1-special 9573-2003-isolat2", "Latin Capital Letter S With Caron")
  val LatinSmallLetterSWithCaron = new HTMLCharacter("&scaron;", "&#x00161;", "&#353;", "Latin Extended-A", "Ll", "xhtml1-special 9573-2003-isolat2", "Latin Small Letter S With Caron")
  val LatinCapitalLetterTWithCedilla = new HTMLCharacter("&Tcedil;", "&#x00162;", "&#354;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter T With Cedilla")
  val LatinSmallLetterTWithCedilla = new HTMLCharacter("&tcedil;", "&#x00163;", "&#355;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter T With Cedilla")
  val LatinCapitalLetterTWithCaron = new HTMLCharacter("&Tcaron;", "&#x00164;", "&#356;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter T With Caron")
  val LatinSmallLetterTWithCaron = new HTMLCharacter("&tcaron;", "&#x00165;", "&#357;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter T With Caron")
  val LatinCapitalLetterTWithStroke = new HTMLCharacter("&Tstrok;", "&#x00166;", "&#358;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter T With Stroke")
  val LatinSmallLetterTWithStroke = new HTMLCharacter("&tstrok;", "&#x00167;", "&#359;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter T With Stroke")
  val LatinCapitalLetterUWithTilde = new HTMLCharacter("&Utilde;", "&#x00168;", "&#360;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter U With Tilde")
  val LatinSmallLetterUWithTilde = new HTMLCharacter("&utilde;", "&#x00169;", "&#361;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter U With Tilde")
  val LatinCapitalLetterUWithMacron = new HTMLCharacter("&Umacr;", "&#x0016A;", "&#362;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter U With Macron")
  val LatinSmallLetterUWithMacron = new HTMLCharacter("&umacr;", "&#x0016B;", "&#363;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter U With Macron")
  val LatinCapitalLetterUWithBreve = new HTMLCharacter("&Ubreve;", "&#x0016C;", "&#364;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter U With Breve")
  val LatinSmallLetterUWithBreve = new HTMLCharacter("&ubreve;", "&#x0016D;", "&#365;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter U With Breve")
  val LatinCapitalLetterUWithRingAbove = new HTMLCharacter("&Uring;", "&#x0016E;", "&#366;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter U With Ring Above")
  val LatinSmallLetterUWithRingAbove = new HTMLCharacter("&uring;", "&#x0016F;", "&#367;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter U With Ring Above")
  val LatinCapitalLetterUWithDoubleAcute = new HTMLCharacter("&Udblac;", "&#x00170;", "&#368;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter U With Double Acute")
  val LatinSmallLetterUWithDoubleAcute = new HTMLCharacter("&udblac;", "&#x00171;", "&#369;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter U With Double Acute")
  val LatinCapitalLetterUWithOgonek = new HTMLCharacter("&Uogon;", "&#x00172;", "&#370;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter U With Ogonek")
  val LatinSmallLetterUWithOgonek = new HTMLCharacter("&uogon;", "&#x00173;", "&#371;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter U With Ogonek")
  val LatinCapitalLetterWWithCircumflex = new HTMLCharacter("&Wcirc;", "&#x00174;", "&#372;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter W With Circumflex")
  val LatinSmallLetterWWithCircumflex = new HTMLCharacter("&wcirc;", "&#x00175;", "&#373;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter W With Circumflex")
  val LatinCapitalLetterYWithCircumflex = new HTMLCharacter("&Ycirc;", "&#x00176;", "&#374;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter Y With Circumflex")
  val LatinSmallLetterYWithCircumflex = new HTMLCharacter("&ycirc;", "&#x00177;", "&#375;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter Y With Circumflex")
  val LatinCapitalLetterYWithDiaeresis = new HTMLCharacter("&Yuml;", "&#x00178;", "&#376;", "Latin Extended-A", "Lu", "xhtml1-special 9573-2003-isolat2", "Latin Capital Letter Y With Diaeresis")
  val LatinCapitalLetterZWithAcute = new HTMLCharacter("&Zacute;", "&#x00179;", "&#377;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter Z With Acute")
  val LatinSmallLetterZWithAcute = new HTMLCharacter("&zacute;", "&#x0017A;", "&#378;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter Z With Acute")
  val LatinCapitalLetterZWithDotAbove = new HTMLCharacter("&Zdot;", "&#x0017B;", "&#379;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter Z With Dot Above")
  val LatinSmallLetterZWithDotAbove = new HTMLCharacter("&zdot;", "&#x0017C;", "&#380;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter Z With Dot Above")
  val LatinCapitalLetterZWithCaron = new HTMLCharacter("&Zcaron;", "&#x0017D;", "&#381;", "Latin Extended-A", "Lu", "9573-2003-isolat2", "Latin Capital Letter Z With Caron")
  val LatinSmallLetterZWithCaron = new HTMLCharacter("&zcaron;", "&#x0017E;", "&#382;", "Latin Extended-A", "Ll", "9573-2003-isolat2", "Latin Small Letter Z With Caron")
  val LatinSmallLetterFWithHook = new HTMLCharacter("&fnof;", "&#x00192;", "&#402;", "Latin Extended-B", "Ll", "xhtml1-symbol 9573-2003-isotech", "Latin Small Letter F With Hook")
  val LatinCapitalLetterZWithStroke = new HTMLCharacter("&imped;", "&#x001B5;", "&#437;", "Latin Extended-B", "Lu", "9573-2003-isotech", "Latin Capital Letter Z With Stroke")
  val LatinSmallLetterGWithAcute = new HTMLCharacter("&gacute;", "&#x001F5;", "&#501;", "Latin Extended-B", "Ll", "9573-2003-isolat2", "Latin Small Letter G With Acute")
  val LatinSmallLetterDotlessJ = new HTMLCharacter("&jmath;", "&#x00237;", "&#567;", "Latin Extended-B", "Ll", "9573-2003-isoamso", "Latin Small Letter Dotless J")
  val ModifierLetterCircumflexAccent = new HTMLCharacter("&circ;", "&#x002C6;", "&#710;", "Spacing Modifier Letters", "Lm", "xhtml1-special 9573-2003-isodia", "Modifier Letter Circumflex Accent")
  val Caron = new HTMLCharacter("&caron;", "&#x002C7;", "&#711;", "Spacing Modifier Letters", "Lm", "9573-2003-isodia mmlalias", "Caron")
  val Breve = new HTMLCharacter("&breve;", "&#x002D8;", "&#728;", "Spacing Modifier Letters", "Sk", "9573-2003-isodia mmlalias", "Breve")
  val DotAbove = new HTMLCharacter("&dot;", "&#x002D9;", "&#729;", "Spacing Modifier Letters", "Sk", "9573-2003-isodia mmlalias", "Dot Above")
  val RingAbove = new HTMLCharacter("&ring;", "&#x002DA;", "&#730;", "Spacing Modifier Letters", "Sk", "9573-2003-isodia", "Ring Above")
  val Ogonek = new HTMLCharacter("&ogon;", "&#x002DB;", "&#731;", "Spacing Modifier Letters", "Sk", "9573-2003-isodia", "Ogonek")
  val SmallTilde = new HTMLCharacter("&tilde;", "&#x002DC;", "&#732;", "Spacing Modifier Letters", "Sk", "xhtml1-special 9573-2003-isodia mmlalias", "Small Tilde")
  val DoubleAcuteAccent = new HTMLCharacter("&dblac;", "&#x002DD;", "&#733;", "Spacing Modifier Letters", "Sk", "9573-2003-isodia mmlalias", "Double Acute Accent")
  val CombiningInvertedBreve = new HTMLCharacter("&DownBreve;", "&#x00311;", "&#785;", "Combining Diacritical Marks", "Mn", "mmlextra", "Combining Inverted Breve")
  val CombiningLowLine = new HTMLCharacter("&UnderBar;", "&#x00332;", "&#818;", "Combining Diacritical Marks", "Mn", "mmlextra", "Combining Low Line")
  val GreekCapitalLetterAlpha = new HTMLCharacter("&Alpha;", "&#x00391;", "&#913;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Alpha")
  val GreekCapitalLetterBeta = new HTMLCharacter("&Beta;", "&#x00392;", "&#914;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Beta")
  val GreekCapitalLetterGamma = new HTMLCharacter("&Gamma;", "&#x00393;", "&#915;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Gamma")
  val GreekCapitalLetterDelta = new HTMLCharacter("&Delta;", "&#x00394;", "&#916;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Delta")
  val GreekCapitalLetterEpsilon = new HTMLCharacter("&Epsilon;", "&#x00395;", "&#917;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Epsilon")
  val GreekCapitalLetterZeta = new HTMLCharacter("&Zeta;", "&#x00396;", "&#918;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Zeta")
  val GreekCapitalLetterEta = new HTMLCharacter("&Eta;", "&#x00397;", "&#919;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Eta")
  val GreekCapitalLetterTheta = new HTMLCharacter("&Theta;", "&#x00398;", "&#920;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Theta")
  val GreekCapitalLetterIota = new HTMLCharacter("&Iota;", "&#x00399;", "&#921;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Iota")
  val GreekCapitalLetterKappa = new HTMLCharacter("&Kappa;", "&#x0039A;", "&#922;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Kappa")
  val GreekCapitalLetterLamda = new HTMLCharacter("&Lambda;", "&#x0039B;", "&#923;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Lamda")
  val GreekCapitalLetterMu = new HTMLCharacter("&Mu;", "&#x0039C;", "&#924;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Mu")
  val GreekCapitalLetterNu = new HTMLCharacter("&Nu;", "&#x0039D;", "&#925;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Nu")
  val GreekCapitalLetterXi = new HTMLCharacter("&Xi;", "&#x0039E;", "&#926;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Xi")
  val GreekCapitalLetterOmicron = new HTMLCharacter("&Omicron;", "&#x0039F;", "&#927;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Omicron")
  val GreekCapitalLetterPi = new HTMLCharacter("&Pi;", "&#x003A0;", "&#928;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Pi")
  val GreekCapitalLetterRho = new HTMLCharacter("&Rho;", "&#x003A1;", "&#929;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Rho")
  val GreekCapitalLetterSigma = new HTMLCharacter("&Sigma;", "&#x003A3;", "&#931;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Sigma")
  val GreekCapitalLetterTau = new HTMLCharacter("&Tau;", "&#x003A4;", "&#932;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Tau")
  val GreekCapitalLetterUpsilon = new HTMLCharacter("&Upsilon;", "&#x003A5;", "&#933;", "Greek and Coptic", "Lu", "mmlextra xhtml1-symbol", "Greek Capital Letter Upsilon")
  val GreekCapitalLetterPhi = new HTMLCharacter("&Phi;", "&#x003A6;", "&#934;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Phi")
  val GreekCapitalLetterChi = new HTMLCharacter("&Chi;", "&#x003A7;", "&#935;", "Greek and Coptic", "Lu", "xhtml1-symbol", "Greek Capital Letter Chi")
  val GreekCapitalLetterPsi = new HTMLCharacter("&Psi;", "&#x003A8;", "&#936;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Psi")
  val GreekCapitalLetterOmega = new HTMLCharacter("&Omega;", "&#x003A9;", "&#937;", "Greek and Coptic", "Lu", "xhtml1-symbol 9573-2003-isogrk3", "Greek Capital Letter Omega")
  val GreekSmallLetterAlpha = new HTMLCharacter("&alpha;", "&#x003B1;", "&#945;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Alpha")
  val GreekSmallLetterBeta = new HTMLCharacter("&beta;", "&#x003B2;", "&#946;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Beta")
  val GreekSmallLetterGamma = new HTMLCharacter("&gamma;", "&#x003B3;", "&#947;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Gamma")
  val GreekSmallLetterDelta = new HTMLCharacter("&delta;", "&#x003B4;", "&#948;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Delta")
  val GreekSmallLetterEpsilon = new HTMLCharacter("&epsiv;", "&#x003B5;", "&#949;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias xhtml1-symbol", "Greek Small Letter Epsilon")
  val GreekSmallLetterZeta = new HTMLCharacter("&zeta;", "&#x003B6;", "&#950;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Zeta")
  val GreekSmallLetterEta = new HTMLCharacter("&eta;", "&#x003B7;", "&#951;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Eta")
  val GreekSmallLetterTheta = new HTMLCharacter("&theta;", "&#x003B8;", "&#952;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 xhtml1-symbol", "Greek Small Letter Theta")
  val GreekSmallLetterIota = new HTMLCharacter("&iota;", "&#x003B9;", "&#953;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Iota")
  val GreekSmallLetterKappa = new HTMLCharacter("&kappa;", "&#x003BA;", "&#954;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Kappa")
  val GreekSmallLetterLamda = new HTMLCharacter("&lambda;", "&#x003BB;", "&#955;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Lamda")
  val GreekSmallLetterMu = new HTMLCharacter("&mu;", "&#x003BC;", "&#956;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Mu")
  val GreekSmallLetterNu = new HTMLCharacter("&nu;", "&#x003BD;", "&#957;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Nu")
  val GreekSmallLetterXi = new HTMLCharacter("&xi;", "&#x003BE;", "&#958;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Xi")
  val GreekSmallLetterOmicron = new HTMLCharacter("&omicron;", "&#x003BF;", "&#959;", "Greek and Coptic", "Ll", "xhtml1-symbol", "Greek Small Letter Omicron")
  val GreekSmallLetterPi = new HTMLCharacter("&pi;", "&#x003C0;", "&#960;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Pi")
  val GreekSmallLetterRho = new HTMLCharacter("&rho;", "&#x003C1;", "&#961;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Rho")
  val GreekSmallLetterFinalSigma = new HTMLCharacter("&sigmav;", "&#x003C2;", "&#962;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias xhtml1-symbol", "Greek Small Letter Final Sigma")
  val GreekSmallLetterSigma = new HTMLCharacter("&sigma;", "&#x003C3;", "&#963;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Sigma")
  val GreekSmallLetterTau = new HTMLCharacter("&tau;", "&#x003C4;", "&#964;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Tau")
  val GreekSmallLetterUpsilon = new HTMLCharacter("&upsi;", "&#x003C5;", "&#965;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias xhtml1-symbol", "Greek Small Letter Upsilon")
  val GreekSmallLetterPhi = new HTMLCharacter("&phi;", "&#x003C6;", "&#966;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 xhtml1-symbol mmlalias", "Greek Small Letter Phi")
  val GreekSmallLetterChi = new HTMLCharacter("&chi;", "&#x003C7;", "&#967;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Chi")
  val GreekSmallLetterPsi = new HTMLCharacter("&psi;", "&#x003C8;", "&#968;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Psi")
  val GreekSmallLetterOmega = new HTMLCharacter("&omega;", "&#x003C9;", "&#969;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3", "Greek Small Letter Omega")
  val GreekThetaSymbol = new HTMLCharacter("&thetav;", "&#x003D1;", "&#977;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias xhtml1-symbol", "Greek Theta Symbol")
  val GreekUpsilonWithHookSymbol = new HTMLCharacter("&Upsi;", "&#x003D2;", "&#978;", "Greek and Coptic", "Lu", "9573-2003-isogrk3 xhtml1-symbol", "Greek Upsilon With Hook Symbol")
  val GreekPhiSymbol = new HTMLCharacter("&straightphi;", "&#x003D5;", "&#981;", "Greek and Coptic", "Ll", "mmlalias", "Greek Phi Symbol")
  val GreekPiSymbol = new HTMLCharacter("&piv;", "&#x003D6;", "&#982;", "Greek and Coptic", "Ll", "xhtml1-symbol 9573-2003-isogrk3 mmlalias", "Greek Pi Symbol")
  val GreekLetterDigamma = new HTMLCharacter("&Gammad;", "&#x003DC;", "&#988;", "Greek and Coptic", "Lu", "9573-2003-isogrk3", "Greek Letter Digamma")
  val GreekSmallLetterDigamma = new HTMLCharacter("&gammad;", "&#x003DD;", "&#989;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias", "Greek Small Letter Digamma")
  val GreekKappaSymbol = new HTMLCharacter("&kappav;", "&#x003F0;", "&#1008;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias", "Greek Kappa Symbol")
  val GreekRhoSymbol = new HTMLCharacter("&rhov;", "&#x003F1;", "&#1009;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias", "Greek Rho Symbol")
  val GreekLunateEpsilonSymbol = new HTMLCharacter("&epsi;", "&#x003F5;", "&#1013;", "Greek and Coptic", "Ll", "9573-2003-isogrk3 mmlalias", "Greek Lunate Epsilon Symbol")
  val GreekReversedLunateEpsilonSymbol = new HTMLCharacter("&bepsi;", "&#x003F6;", "&#1014;", "Greek and Coptic", "Sm", "9573-2003-isoamsr mmlalias", "Greek Reversed Lunate Epsilon Symbol")
  val CyrillicCapitalLetterIo = new HTMLCharacter("&IOcy;", "&#x00401;", "&#1025;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Io")
  val CyrillicCapitalLetterDje = new HTMLCharacter("&DJcy;", "&#x00402;", "&#1026;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Dje")
  val CyrillicCapitalLetterGje = new HTMLCharacter("&GJcy;", "&#x00403;", "&#1027;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Gje")
  val CyrillicCapitalLetterUkrainianIe = new HTMLCharacter("&Jukcy;", "&#x00404;", "&#1028;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Ukrainian Ie")
  val CyrillicCapitalLetterDze = new HTMLCharacter("&DScy;", "&#x00405;", "&#1029;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Dze")
  val CyrillicCapitalLetterByelorussianUkrainianI = new HTMLCharacter("&Iukcy;", "&#x00406;", "&#1030;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Byelorussian-Ukrainian I")
  val CyrillicCapitalLetterYi = new HTMLCharacter("&YIcy;", "&#x00407;", "&#1031;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Yi")
  val CyrillicCapitalLetterJe = new HTMLCharacter("&Jsercy;", "&#x00408;", "&#1032;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Je")
  val CyrillicCapitalLetterLje = new HTMLCharacter("&LJcy;", "&#x00409;", "&#1033;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Lje")
  val CyrillicCapitalLetterNje = new HTMLCharacter("&NJcy;", "&#x0040A;", "&#1034;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Nje")
  val CyrillicCapitalLetterTshe = new HTMLCharacter("&TSHcy;", "&#x0040B;", "&#1035;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Tshe")
  val CyrillicCapitalLetterKje = new HTMLCharacter("&KJcy;", "&#x0040C;", "&#1036;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Kje")
  val CyrillicCapitalLetterShortU = new HTMLCharacter("&Ubrcy;", "&#x0040E;", "&#1038;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Short U")
  val CyrillicCapitalLetterDzhe = new HTMLCharacter("&DZcy;", "&#x0040F;", "&#1039;", "Cyrillic", "Lu", "9573-2003-isocyr2", "Cyrillic Capital Letter Dzhe")
  val CyrillicCapitalLetterA = new HTMLCharacter("&Acy;", "&#x00410;", "&#1040;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter A")
  val CyrillicCapitalLetterBe = new HTMLCharacter("&Bcy;", "&#x00411;", "&#1041;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Be")
  val CyrillicCapitalLetterVe = new HTMLCharacter("&Vcy;", "&#x00412;", "&#1042;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ve")
  val CyrillicCapitalLetterGhe = new HTMLCharacter("&Gcy;", "&#x00413;", "&#1043;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ghe")
  val CyrillicCapitalLetterDe = new HTMLCharacter("&Dcy;", "&#x00414;", "&#1044;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter De")
  val CyrillicCapitalLetterIe = new HTMLCharacter("&IEcy;", "&#x00415;", "&#1045;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ie")
  val CyrillicCapitalLetterZhe = new HTMLCharacter("&ZHcy;", "&#x00416;", "&#1046;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Zhe")
  val CyrillicCapitalLetterZe = new HTMLCharacter("&Zcy;", "&#x00417;", "&#1047;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ze")
  val CyrillicCapitalLetterI = new HTMLCharacter("&Icy;", "&#x00418;", "&#1048;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter I")
  val CyrillicCapitalLetterShortI = new HTMLCharacter("&Jcy;", "&#x00419;", "&#1049;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Short I")
  val CyrillicCapitalLetterKa = new HTMLCharacter("&Kcy;", "&#x0041A;", "&#1050;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ka")
  val CyrillicCapitalLetterEl = new HTMLCharacter("&Lcy;", "&#x0041B;", "&#1051;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter El")
  val CyrillicCapitalLetterEm = new HTMLCharacter("&Mcy;", "&#x0041C;", "&#1052;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Em")
  val CyrillicCapitalLetterEn = new HTMLCharacter("&Ncy;", "&#x0041D;", "&#1053;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter En")
  val CyrillicCapitalLetterO = new HTMLCharacter("&Ocy;", "&#x0041E;", "&#1054;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter O")
  val CyrillicCapitalLetterPe = new HTMLCharacter("&Pcy;", "&#x0041F;", "&#1055;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Pe")
  val CyrillicCapitalLetterEr = new HTMLCharacter("&Rcy;", "&#x00420;", "&#1056;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Er")
  val CyrillicCapitalLetterEs = new HTMLCharacter("&Scy;", "&#x00421;", "&#1057;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Es")
  val CyrillicCapitalLetterTe = new HTMLCharacter("&Tcy;", "&#x00422;", "&#1058;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Te")
  val CyrillicCapitalLetterU = new HTMLCharacter("&Ucy;", "&#x00423;", "&#1059;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter U")
  val CyrillicCapitalLetterEf = new HTMLCharacter("&Fcy;", "&#x00424;", "&#1060;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ef")
  val CyrillicCapitalLetterHa = new HTMLCharacter("&KHcy;", "&#x00425;", "&#1061;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ha")
  val CyrillicCapitalLetterTse = new HTMLCharacter("&TScy;", "&#x00426;", "&#1062;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Tse")
  val CyrillicCapitalLetterChe = new HTMLCharacter("&CHcy;", "&#x00427;", "&#1063;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Che")
  val CyrillicCapitalLetterSha = new HTMLCharacter("&SHcy;", "&#x00428;", "&#1064;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Sha")
  val CyrillicCapitalLetterShcha = new HTMLCharacter("&SHCHcy;", "&#x00429;", "&#1065;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Shcha")
  val CyrillicCapitalLetterHardSign = new HTMLCharacter("&HARDcy;", "&#x0042A;", "&#1066;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Hard Sign")
  val CyrillicCapitalLetterYeru = new HTMLCharacter("&Ycy;", "&#x0042B;", "&#1067;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Yeru")
  val CyrillicCapitalLetterSoftSign = new HTMLCharacter("&SOFTcy;", "&#x0042C;", "&#1068;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Soft Sign")
  val CyrillicCapitalLetterE = new HTMLCharacter("&Ecy;", "&#x0042D;", "&#1069;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter E")
  val CyrillicCapitalLetterYu = new HTMLCharacter("&YUcy;", "&#x0042E;", "&#1070;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Yu")
  val CyrillicCapitalLetterYa = new HTMLCharacter("&YAcy;", "&#x0042F;", "&#1071;", "Cyrillic", "Lu", "9573-2003-isocyr1", "Cyrillic Capital Letter Ya")
  val CyrillicSmallLetterA = new HTMLCharacter("&acy;", "&#x00430;", "&#1072;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter A")
  val CyrillicSmallLetterBe = new HTMLCharacter("&bcy;", "&#x00431;", "&#1073;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Be")
  val CyrillicSmallLetterVe = new HTMLCharacter("&vcy;", "&#x00432;", "&#1074;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ve")
  val CyrillicSmallLetterGhe = new HTMLCharacter("&gcy;", "&#x00433;", "&#1075;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ghe")
  val CyrillicSmallLetterDe = new HTMLCharacter("&dcy;", "&#x00434;", "&#1076;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter De")
  val CyrillicSmallLetterIe = new HTMLCharacter("&iecy;", "&#x00435;", "&#1077;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ie")
  val CyrillicSmallLetterZhe = new HTMLCharacter("&zhcy;", "&#x00436;", "&#1078;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Zhe")
  val CyrillicSmallLetterZe = new HTMLCharacter("&zcy;", "&#x00437;", "&#1079;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ze")
  val CyrillicSmallLetterI = new HTMLCharacter("&icy;", "&#x00438;", "&#1080;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter I")
  val CyrillicSmallLetterShortI = new HTMLCharacter("&jcy;", "&#x00439;", "&#1081;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Short I")
  val CyrillicSmallLetterKa = new HTMLCharacter("&kcy;", "&#x0043A;", "&#1082;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ka")
  val CyrillicSmallLetterEl = new HTMLCharacter("&lcy;", "&#x0043B;", "&#1083;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter El")
  val CyrillicSmallLetterEm = new HTMLCharacter("&mcy;", "&#x0043C;", "&#1084;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Em")
  val CyrillicSmallLetterEn = new HTMLCharacter("&ncy;", "&#x0043D;", "&#1085;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter En")
  val CyrillicSmallLetterO = new HTMLCharacter("&ocy;", "&#x0043E;", "&#1086;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter O")
  val CyrillicSmallLetterPe = new HTMLCharacter("&pcy;", "&#x0043F;", "&#1087;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Pe")
  val CyrillicSmallLetterEr = new HTMLCharacter("&rcy;", "&#x00440;", "&#1088;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Er")
  val CyrillicSmallLetterEs = new HTMLCharacter("&scy;", "&#x00441;", "&#1089;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Es")
  val CyrillicSmallLetterTe = new HTMLCharacter("&tcy;", "&#x00442;", "&#1090;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Te")
  val CyrillicSmallLetterU = new HTMLCharacter("&ucy;", "&#x00443;", "&#1091;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter U")
  val CyrillicSmallLetterEf = new HTMLCharacter("&fcy;", "&#x00444;", "&#1092;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ef")
  val CyrillicSmallLetterHa = new HTMLCharacter("&khcy;", "&#x00445;", "&#1093;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ha")
  val CyrillicSmallLetterTse = new HTMLCharacter("&tscy;", "&#x00446;", "&#1094;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Tse")
  val CyrillicSmallLetterChe = new HTMLCharacter("&chcy;", "&#x00447;", "&#1095;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Che")
  val CyrillicSmallLetterSha = new HTMLCharacter("&shcy;", "&#x00448;", "&#1096;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Sha")
  val CyrillicSmallLetterShcha = new HTMLCharacter("&shchcy;", "&#x00449;", "&#1097;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Shcha")
  val CyrillicSmallLetterHardSign = new HTMLCharacter("&hardcy;", "&#x0044A;", "&#1098;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Hard Sign")
  val CyrillicSmallLetterYeru = new HTMLCharacter("&ycy;", "&#x0044B;", "&#1099;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Yeru")
  val CyrillicSmallLetterSoftSign = new HTMLCharacter("&softcy;", "&#x0044C;", "&#1100;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Soft Sign")
  val CyrillicSmallLetterE = new HTMLCharacter("&ecy;", "&#x0044D;", "&#1101;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter E")
  val CyrillicSmallLetterYu = new HTMLCharacter("&yucy;", "&#x0044E;", "&#1102;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Yu")
  val CyrillicSmallLetterYa = new HTMLCharacter("&yacy;", "&#x0044F;", "&#1103;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Ya")
  val CyrillicSmallLetterIo = new HTMLCharacter("&iocy;", "&#x00451;", "&#1105;", "Cyrillic", "Ll", "9573-2003-isocyr1", "Cyrillic Small Letter Io")
  val CyrillicSmallLetterDje = new HTMLCharacter("&djcy;", "&#x00452;", "&#1106;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Dje")
  val CyrillicSmallLetterGje = new HTMLCharacter("&gjcy;", "&#x00453;", "&#1107;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Gje")
  val CyrillicSmallLetterUkrainianIe = new HTMLCharacter("&jukcy;", "&#x00454;", "&#1108;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Ukrainian Ie")
  val CyrillicSmallLetterDze = new HTMLCharacter("&dscy;", "&#x00455;", "&#1109;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Dze")
  val CyrillicSmallLetterByelorussianUkrainianI = new HTMLCharacter("&iukcy;", "&#x00456;", "&#1110;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Byelorussian-Ukrainian I")
  val CyrillicSmallLetterYi = new HTMLCharacter("&yicy;", "&#x00457;", "&#1111;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Yi")
  val CyrillicSmallLetterJe = new HTMLCharacter("&jsercy;", "&#x00458;", "&#1112;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Je")
  val CyrillicSmallLetterLje = new HTMLCharacter("&ljcy;", "&#x00459;", "&#1113;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Lje")
  val CyrillicSmallLetterNje = new HTMLCharacter("&njcy;", "&#x0045A;", "&#1114;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Nje")
  val CyrillicSmallLetterTshe = new HTMLCharacter("&tshcy;", "&#x0045B;", "&#1115;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Tshe")
  val CyrillicSmallLetterKje = new HTMLCharacter("&kjcy;", "&#x0045C;", "&#1116;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Kje")
  val CyrillicSmallLetterShortU = new HTMLCharacter("&ubrcy;", "&#x0045E;", "&#1118;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Short U")
  val CyrillicSmallLetterDzhe = new HTMLCharacter("&dzcy;", "&#x0045F;", "&#1119;", "Cyrillic", "Ll", "9573-2003-isocyr2", "Cyrillic Small Letter Dzhe")
  val EnSpace = new HTMLCharacter("&ensp;", "&#x02002;", "&#8194;", "General Punctuation", "Zs", "xhtml1-special 9573-2003-isopub", "En Space")
  val EmSpace = new HTMLCharacter("&emsp;", "&#x02003;", "&#8195;", "General Punctuation", "Zs", "xhtml1-special 9573-2003-isopub", "Em Space")
  val ThreePerEmSpace = new HTMLCharacter("&emsp13;", "&#x02004;", "&#8196;", "General Punctuation", "Zs", "9573-2003-isopub", "Three-Per-Em Space")
  val FourPerEmSpace = new HTMLCharacter("&emsp14;", "&#x02005;", "&#8197;", "General Punctuation", "Zs", "9573-2003-isopub", "Four-Per-Em Space")
  val FigureSpace = new HTMLCharacter("&numsp;", "&#x02007;", "&#8199;", "General Punctuation", "Zs", "9573-2003-isopub", "Figure Space")
  val PunctuationSpace = new HTMLCharacter("&puncsp;", "&#x02008;", "&#8200;", "General Punctuation", "Zs", "9573-2003-isopub", "Punctuation Space")
  val ThinSpace = new HTMLCharacter("&thinsp;", "&#x02009;", "&#8201;", "General Punctuation", "Zs", "xhtml1-special mmlalias 9573-2003-isopub", "Thin Space")
  val HairSpace = new HTMLCharacter("&hairsp;", "&#x0200A;", "&#8202;", "General Punctuation", "Zs", "9573-2003-isopub mmlalias", "Hair Space")
  val ZeroWidthSpace = new HTMLCharacter("&ZeroWidthSpace;", "&#x0200B;", "&#8203;", "General Punctuation", "Cf", "mmlextra mmlalias", "Zero Width Space")
  val ZeroWidthNonJoiner = new HTMLCharacter("&zwnj;", "&#x0200C;", "&#8204;", "General Punctuation", "Cf", "xhtml1-special", "Zero Width Non-Joiner")
  val ZeroWidthJoiner = new HTMLCharacter("&zwj;", "&#x0200D;", "&#8205;", "General Punctuation", "Cf", "xhtml1-special", "Zero Width Joiner")
  val LeftToRightMark = new HTMLCharacter("&lrm;", "&#x0200E;", "&#8206;", "General Punctuation", "Cf", "xhtml1-special", "Left-To-Right Mark")
  val RightToLeftMark = new HTMLCharacter("&rlm;", "&#x0200F;", "&#8207;", "General Punctuation", "Cf", "xhtml1-special", "Right-To-Left Mark")
  val Hyphen = new HTMLCharacter("&hyphen;", "&#x02010;", "&#8208;", "General Punctuation", "Pd", "9573-2003-isonum 9573-2003-isopub", "Hyphen")
  val EnDash = new HTMLCharacter("&ndash;", "&#x02013;", "&#8211;", "General Punctuation", "Pd", "xhtml1-special 9573-2003-isopub", "En Dash")
  val EmDash = new HTMLCharacter("&mdash;", "&#x02014;", "&#8212;", "General Punctuation", "Pd", "9573-2003-isopub xhtml1-special", "Em Dash")
  val HorizontalBar = new HTMLCharacter("&horbar;", "&#x02015;", "&#8213;", "General Punctuation", "Pd", "9573-2003-isonum", "Horizontal Bar")
  val DoubleVerticalLine = new HTMLCharacter("&Verbar;", "&#x02016;", "&#8214;", "General Punctuation", "Po", "9573-2003-isotech mmlalias", "Double Vertical Line")
  val LeftSingleQuotationMark = new HTMLCharacter("&lsquo;", "&#x02018;", "&#8216;", "General Punctuation", "Pi", "xhtml1-special 9573-2003-isonum mmlalias", "Left Single Quotation Mark")
  val RightSingleQuotationMark = new HTMLCharacter("&rsquo;", "&#x02019;", "&#8217;", "General Punctuation", "Pf", "xhtml1-special 9573-2003-isonum 9573-2003-isopub mmlalias", "Right Single Quotation Mark")
  val SingleLow9QuotationMark = new HTMLCharacter("&lsquor;", "&#x0201A;", "&#8218;", "General Punctuation", "Ps", "9573-2003-isopub xhtml1-special", "Single Low-9 Quotation Mark")
  val LeftDoubleQuotationMark = new HTMLCharacter("&ldquo;", "&#x0201C;", "&#8220;", "General Punctuation", "Pi", "xhtml1-special 9573-2003-isonum mmlalias", "Left Double Quotation Mark")
  val RightDoubleQuotationMark = new HTMLCharacter("&rdquo;", "&#x0201D;", "&#8221;", "General Punctuation", "Pf", "xhtml1-special 9573-2003-isonum 9573-2003-isopub mmlalias", "Right Double Quotation Mark")
  val DoubleLow9QuotationMark = new HTMLCharacter("&ldquor;", "&#x0201E;", "&#8222;", "General Punctuation", "Ps", "9573-2003-isopub xhtml1-special", "Double Low-9 Quotation Mark")
  val Dagger = new HTMLCharacter("&dagger;", "&#x02020;", "&#8224;", "General Punctuation", "Po", "xhtml1-special 9573-2003-isopub 9573-2003-isoamsb", "Dagger")
  val DoubleDagger = new HTMLCharacter("&Dagger;", "&#x02021;", "&#8225;", "General Punctuation", "Po", "xhtml1-special 9573-2003-isopub 9573-2003-isoamsb mmlalias", "Double Dagger")
  val Bullet = new HTMLCharacter("&bull;", "&#x02022;", "&#8226;", "General Punctuation", "Po", "xhtml1-symbol 9573-2003-isopub mmlalias", "Bullet")
  val TwoDotLeader = new HTMLCharacter("&nldr;", "&#x02025;", "&#8229;", "General Punctuation", "Po", "9573-2003-isopub", "Two Dot Leader")
  val HorizontalEllipsis = new HTMLCharacter("&hellip;", "&#x02026;", "&#8230;", "General Punctuation", "Po", "xhtml1-symbol 9573-2003-isopub", "Horizontal Ellipsis")
  val PerMilleSign = new HTMLCharacter("&permil;", "&#x02030;", "&#8240;", "General Punctuation", "Po", "xhtml1-special 9573-2003-isotech", "Per Mille Sign")
  val PerTenThousandSign = new HTMLCharacter("&pertenk;", "&#x02031;", "&#8241;", "General Punctuation", "Po", "9573-2003-isotech", "Per Ten Thousand Sign")
  val Prime = new HTMLCharacter("&prime;", "&#x02032;", "&#8242;", "General Punctuation", "Po", "xhtml1-symbol 9573-2003-isotech", "Prime")
  val DoublePrime = new HTMLCharacter("&Prime;", "&#x02033;", "&#8243;", "General Punctuation", "Po", "xhtml1-symbol 9573-2003-isotech", "Double Prime")
  val TriplePrime = new HTMLCharacter("&tprime;", "&#x02034;", "&#8244;", "General Punctuation", "Po", "9573-2003-isotech", "Triple Prime")
  val ReversedPrime = new HTMLCharacter("&bprime;", "&#x02035;", "&#8245;", "General Punctuation", "Po", "9573-2003-isoamso mmlalias", "Reversed Prime")
  val SingleLeftPointingAngleQuotationMark = new HTMLCharacter("&lsaquo;", "&#x02039;", "&#8249;", "General Punctuation", "Pi", "xhtml1-special", "Single Left-Pointing Angle Quotation Mark")
  val SingleRightPointingAngleQuotationMark = new HTMLCharacter("&rsaquo;", "&#x0203A;", "&#8250;", "General Punctuation", "Pf", "xhtml1-special", "Single Right-Pointing Angle Quotation Mark")
  val Overline = new HTMLCharacter("&oline;", "&#x0203E;", "&#8254;", "General Punctuation", "Po", "xhtml1-symbol", "Overline")
  val CaretInsertionPoint = new HTMLCharacter("&caret;", "&#x02041;", "&#8257;", "General Punctuation", "Po", "9573-2003-isopub", "Caret Insertion Point")
  val HyphenBullet = new HTMLCharacter("&hybull;", "&#x02043;", "&#8259;", "General Punctuation", "Po", "9573-2003-isopub", "Hyphen Bullet")
  val FractionSlash = new HTMLCharacter("&frasl;", "&#x02044;", "&#8260;", "General Punctuation", "Sm", "xhtml1-symbol", "Fraction Slash")
  val ReversedSemicolon = new HTMLCharacter("&bsemi;", "&#x0204F;", "&#8271;", "General Punctuation", "Po", "9573-2003-isoamso", "Reversed Semicolon")
  val QuadruplePrime = new HTMLCharacter("&qprime;", "&#x02057;", "&#8279;", "General Punctuation", "Po", "9573-2003-isotech", "Quadruple Prime")
  val MediumMathematicalSpace = new HTMLCharacter("&MediumSpace;", "&#x0205F;", "&#8287;", "General Punctuation", "Zs", "mmlextra", "Medium Mathematical Space")
  val WordJoiner = new HTMLCharacter("&NoBreak;", "&#x02060;", "&#8288;", "General Punctuation", "Cf", "mmlextra", "Word Joiner")
  val FunctionApplication = new HTMLCharacter("&ApplyFunction;", "&#x02061;", "&#8289;", "General Punctuation", "Cf", "mmlalias mmlextra", "Function Application")
  val InvisibleTimes = new HTMLCharacter("&InvisibleTimes;", "&#x02062;", "&#8290;", "General Punctuation", "Cf", "mmlalias mmlextra", "Invisible Times")
  val InvisibleSeparator = new HTMLCharacter("&InvisibleComma;", "&#x02063;", "&#8291;", "General Punctuation", "Cf", "mmlalias mmlextra", "Invisible Separator")
  val EuroSign = new HTMLCharacter("&euro;", "&#x020AC;", "&#8364;", "Currency Symbols", "Sc", "xhtml1-special", "Euro Sign")
  val CombiningThreeDotsAbove = new HTMLCharacter("&tdot;", "&#x020DB;", "&#8411;", "Combining Diacritical Marks for Symbols", "Mn", "9573-2003-isotech mmlalias", "Combining Three Dots Above")
  val CombiningFourDotsAbove = new HTMLCharacter("&DotDot;", "&#x020DC;", "&#8412;", "Combining Diacritical Marks for Symbols", "Mn", "9573-2003-isotech", "Combining Four Dots Above")
  val DoubleStruckCapitalC = new HTMLCharacter("&Copf;", "&#x02102;", "&#8450;", "Letterlike Symbols", "Lu", "9573-2003-isomopf mmlalias", "Double-Struck Capital C")
  val CareOf = new HTMLCharacter("&incare;", "&#x02105;", "&#8453;", "Letterlike Symbols", "So", "9573-2003-isopub", "Care Of")
  val ScriptSmallG = new HTMLCharacter("&gscr;", "&#x0210A;", "&#8458;", "Letterlike Symbols", "Ll", "9573-2003-isomscr", "Script Small G")
  val ScriptCapitalH = new HTMLCharacter("&hamilt;", "&#x0210B;", "&#8459;", "Letterlike Symbols", "Lu", "9573-2003-isotech mmlalias 9573-2003-isomscr", "Script Capital H")
  val BlackLetterCapitalH = new HTMLCharacter("&Hfr;", "&#x0210C;", "&#8460;", "Letterlike Symbols", "Lu", "9573-2003-isomfrk mmlalias", "Black-Letter Capital H")
  val DoubleStruckCapitalH = new HTMLCharacter("&quaternions;", "&#x0210D;", "&#8461;", "Letterlike Symbols", "Lu", "mmlalias 9573-2003-isomopf", "Double-Struck Capital H")
  val PlanckConstant = new HTMLCharacter("&planckh;", "&#x0210E;", "&#8462;", "Letterlike Symbols", "Ll", "mmlextra", "Planck Constant")
  val PlanckConstantOverTwoPi = new HTMLCharacter("&planck;", "&#x0210F;", "&#8463;", "Letterlike Symbols", "Ll", "9573-2003-isoamso mmlalias", "Planck Constant Over Two Pi")
  val ScriptCapitalI = new HTMLCharacter("&Iscr;", "&#x02110;", "&#8464;", "Letterlike Symbols", "Lu", "9573-2003-isomscr mmlalias", "Script Capital I")
  val BlackLetterCapitalI = new HTMLCharacter("&image;", "&#x02111;", "&#8465;", "Letterlike Symbols", "Lu", "xhtml1-symbol 9573-2003-isoamso mmlalias 9573-2003-isomfrk", "Black-Letter Capital I")
  val ScriptCapitalL = new HTMLCharacter("&Lscr;", "&#x02112;", "&#8466;", "Letterlike Symbols", "Lu", "9573-2003-isomscr 9573-2003-isotech mmlalias", "Script Capital L")
  val ScriptSmallL = new HTMLCharacter("&ell;", "&#x02113;", "&#8467;", "Letterlike Symbols", "Ll", "9573-2003-isoamso", "Script Small L")
  val DoubleStruckCapitalN = new HTMLCharacter("&Nopf;", "&#x02115;", "&#8469;", "Letterlike Symbols", "Lu", "9573-2003-isomopf mmlalias", "Double-Struck Capital N")
  val NumeroSign = new HTMLCharacter("&numero;", "&#x02116;", "&#8470;", "Letterlike Symbols", "So", "9573-2003-isocyr1", "Numero Sign")
  val SoundRecordingCopyright = new HTMLCharacter("&copysr;", "&#x02117;", "&#8471;", "Letterlike Symbols", "So", "9573-2003-isopub", "Sound Recording Copyright")
  val ScriptCapitalP = new HTMLCharacter("&weierp;", "&#x02118;", "&#8472;", "Letterlike Symbols", "So", "xhtml1-symbol 9573-2003-isoamso mmlalias", "Script Capital P")
  val DoubleStruckCapitalP = new HTMLCharacter("&Popf;", "&#x02119;", "&#8473;", "Letterlike Symbols", "Lu", "9573-2003-isomopf mmlalias", "Double-Struck Capital P")
  val DoubleStruckCapitalQ = new HTMLCharacter("&rationals;", "&#x0211A;", "&#8474;", "Letterlike Symbols", "Lu", "mmlalias 9573-2003-isomopf", "Double-Struck Capital Q")
  val ScriptCapitalR = new HTMLCharacter("&Rscr;", "&#x0211B;", "&#8475;", "Letterlike Symbols", "Lu", "9573-2003-isomscr mmlalias", "Script Capital R")
  val BlackLetterCapitalR = new HTMLCharacter("&real;", "&#x0211C;", "&#8476;", "Letterlike Symbols", "Lu", "xhtml1-symbol 9573-2003-isoamso mmlalias 9573-2003-isomfrk", "Black-Letter Capital R")
  val DoubleStruckCapitalR = new HTMLCharacter("&reals;", "&#x0211D;", "&#8477;", "Letterlike Symbols", "Lu", "mmlalias 9573-2003-isomopf", "Double-Struck Capital R")
  val PrescriptionTake = new HTMLCharacter("&rx;", "&#x0211E;", "&#8478;", "Letterlike Symbols", "So", "9573-2003-isopub", "Prescription Take")
  val TradeMarkSign = new HTMLCharacter("&trade;", "&#x02122;", "&#8482;", "Letterlike Symbols", "So", "xhtml1-symbol 9573-2003-isonum html5-uppercase", "Trade Mark Sign")
  val DoubleStruckCapitalZ = new HTMLCharacter("&integers;", "&#x02124;", "&#8484;", "Letterlike Symbols", "Lu", "mmlalias 9573-2003-isomopf", "Double-Struck Capital Z")
  val OhmSign = new HTMLCharacter("&ohm;", "&#x02126;", "&#8486;", "Letterlike Symbols", "Lu", "9573-2003-isonum", "Ohm Sign")
  val InvertedOhmSign = new HTMLCharacter("&mho;", "&#x02127;", "&#8487;", "Letterlike Symbols", "So", "9573-2003-isoamso", "Inverted Ohm Sign")
  val BlackLetterCapitalZ = new HTMLCharacter("&Zfr;", "&#x02128;", "&#8488;", "Letterlike Symbols", "Lu", "9573-2003-isomfrk mmlalias", "Black-Letter Capital Z")
  val TurnedGreekSmallLetterIota = new HTMLCharacter("&iiota;", "&#x02129;", "&#8489;", "Letterlike Symbols", "So", "9573-2003-isoamso", "Turned Greek Small Letter Iota")
  val AngstromSign = new HTMLCharacter("&angst;", "&#x0212B;", "&#8491;", "Letterlike Symbols", "Lu", "9573-2003-isotech", "Angstrom Sign")
  val ScriptCapitalB = new HTMLCharacter("&bernou;", "&#x0212C;", "&#8492;", "Letterlike Symbols", "Lu", "9573-2003-isotech mmlalias 9573-2003-isomscr", "Script Capital B")
  val BlackLetterCapitalC = new HTMLCharacter("&Cfr;", "&#x0212D;", "&#8493;", "Letterlike Symbols", "Lu", "9573-2003-isomfrk mmlalias", "Black-Letter Capital C")
  val ScriptSmallE = new HTMLCharacter("&escr;", "&#x0212F;", "&#8495;", "Letterlike Symbols", "Ll", "9573-2003-isomscr", "Script Small E")
  val ScriptCapitalE = new HTMLCharacter("&Escr;", "&#x02130;", "&#8496;", "Letterlike Symbols", "Lu", "9573-2003-isomscr mmlalias", "Script Capital E")
  val ScriptCapitalF = new HTMLCharacter("&Fscr;", "&#x02131;", "&#8497;", "Letterlike Symbols", "Lu", "9573-2003-isomscr mmlalias", "Script Capital F")
  val ScriptCapitalM = new HTMLCharacter("&phmmat;", "&#x02133;", "&#8499;", "Letterlike Symbols", "Lu", "9573-2003-isotech mmlalias 9573-2003-isomscr", "Script Capital M")
  val ScriptSmallO = new HTMLCharacter("&order;", "&#x02134;", "&#8500;", "Letterlike Symbols", "Ll", "9573-2003-isotech mmlalias 9573-2003-isomscr", "Script Small O")
  val AlefSymbol = new HTMLCharacter("&alefsym;", "&#x02135;", "&#8501;", "Letterlike Symbols", "Lo", "xhtml1-symbol 9573-2003-isotech", "Alef Symbol")
  val BetSymbol = new HTMLCharacter("&beth;", "&#x02136;", "&#8502;", "Letterlike Symbols", "Lo", "9573-2003-isoamso", "Bet Symbol")
  val GimelSymbol = new HTMLCharacter("&gimel;", "&#x02137;", "&#8503;", "Letterlike Symbols", "Lo", "9573-2003-isoamso", "Gimel Symbol")
  val DaletSymbol = new HTMLCharacter("&daleth;", "&#x02138;", "&#8504;", "Letterlike Symbols", "Lo", "9573-2003-isoamso", "Dalet Symbol")
  val DoubleStruckItalicCapitalD = new HTMLCharacter("&CapitalDifferentialD;", "&#x02145;", "&#8517;", "Letterlike Symbols", "Lu", "mmlalias mmlextra", "Double-Struck Italic Capital D")
  val DoubleStruckItalicSmallD = new HTMLCharacter("&DifferentialD;", "&#x02146;", "&#8518;", "Letterlike Symbols", "Ll", "mmlalias mmlextra", "Double-Struck Italic Small D")
  val DoubleStruckItalicSmallE = new HTMLCharacter("&ExponentialE;", "&#x02147;", "&#8519;", "Letterlike Symbols", "Ll", "mmlalias mmlextra", "Double-Struck Italic Small E")
  val DoubleStruckItalicSmallI = new HTMLCharacter("&ImaginaryI;", "&#x02148;", "&#8520;", "Letterlike Symbols", "Ll", "mmlalias mmlextra", "Double-Struck Italic Small I")
  val VulgarFractionOneThird = new HTMLCharacter("&frac13;", "&#x02153;", "&#8531;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction One Third")
  val VulgarFractionTwoThirds = new HTMLCharacter("&frac23;", "&#x02154;", "&#8532;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction Two Thirds")
  val VulgarFractionOneFifth = new HTMLCharacter("&frac15;", "&#x02155;", "&#8533;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction One Fifth")
  val VulgarFractionTwoFifths = new HTMLCharacter("&frac25;", "&#x02156;", "&#8534;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction Two Fifths")
  val VulgarFractionThreeFifths = new HTMLCharacter("&frac35;", "&#x02157;", "&#8535;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction Three Fifths")
  val VulgarFractionFourFifths = new HTMLCharacter("&frac45;", "&#x02158;", "&#8536;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction Four Fifths")
  val VulgarFractionOneSixth = new HTMLCharacter("&frac16;", "&#x02159;", "&#8537;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction One Sixth")
  val VulgarFractionFiveSixths = new HTMLCharacter("&frac56;", "&#x0215A;", "&#8538;", "Number Forms", "No", "9573-2003-isopub", "Vulgar Fraction Five Sixths")
  val VulgarFractionOneEighth = new HTMLCharacter("&frac18;", "&#x0215B;", "&#8539;", "Number Forms", "No", "9573-2003-isonum", "Vulgar Fraction One Eighth")
  val VulgarFractionThreeEighths = new HTMLCharacter("&frac38;", "&#x0215C;", "&#8540;", "Number Forms", "No", "9573-2003-isonum", "Vulgar Fraction Three Eighths")
  val VulgarFractionFiveEighths = new HTMLCharacter("&frac58;", "&#x0215D;", "&#8541;", "Number Forms", "No", "9573-2003-isonum", "Vulgar Fraction Five Eighths")
  val VulgarFractionSevenEighths = new HTMLCharacter("&frac78;", "&#x0215E;", "&#8542;", "Number Forms", "No", "9573-2003-isonum", "Vulgar Fraction Seven Eighths")
  val LeftwardsArrow = new HTMLCharacter("&larr;", "&#x02190;", "&#8592;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isonum mmlalias 9573-2003-isoamsa", "Leftwards Arrow")
  val UpwardsArrow = new HTMLCharacter("&uarr;", "&#x02191;", "&#8593;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isonum mmlalias", "Upwards Arrow")
  val RightwardsArrow = new HTMLCharacter("&rarr;", "&#x02192;", "&#8594;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isonum mmlalias 9573-2003-isoamsa", "Rightwards Arrow")
  val DownwardsArrow = new HTMLCharacter("&darr;", "&#x02193;", "&#8595;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isonum mmlalias", "Downwards Arrow")
  val LeftRightArrow = new HTMLCharacter("&harr;", "&#x02194;", "&#8596;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isoamsa mmlalias", "Left Right Arrow")
  val UpDownArrow = new HTMLCharacter("&varr;", "&#x02195;", "&#8597;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Up Down Arrow")
  val NorthWestArrow = new HTMLCharacter("&nwarr;", "&#x02196;", "&#8598;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "North West Arrow")
  val NorthEastArrow = new HTMLCharacter("&nearr;", "&#x02197;", "&#8599;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "North East Arrow")
  val SouthEastArrow = new HTMLCharacter("&searr;", "&#x02198;", "&#8600;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "South East Arrow")
  val SouthWestArrow = new HTMLCharacter("&swarr;", "&#x02199;", "&#8601;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "South West Arrow")
  val LeftwardsArrowWithStroke = new HTMLCharacter("&nlarr;", "&#x0219A;", "&#8602;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Leftwards Arrow With Stroke")
  val RightwardsArrowWithStroke = new HTMLCharacter("&nrarr;", "&#x0219B;", "&#8603;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Arrow With Stroke")
  val RightwardsWaveArrow = new HTMLCharacter("&rarrw;", "&#x0219D;", "&#8605;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Wave Arrow")
  val LeftwardsTwoHeadedArrow = new HTMLCharacter("&Larr;", "&#x0219E;", "&#8606;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Two Headed Arrow")
  val UpwardsTwoHeadedArrow = new HTMLCharacter("&Uarr;", "&#x0219F;", "&#8607;", "Arrows", "So", "9573-2003-isoamsa", "Upwards Two Headed Arrow")
  val RightwardsTwoHeadedArrow = new HTMLCharacter("&Rarr;", "&#x021A0;", "&#8608;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Two Headed Arrow")
  val DownwardsTwoHeadedArrow = new HTMLCharacter("&Darr;", "&#x021A1;", "&#8609;", "Arrows", "So", "9573-2003-isoamsa", "Downwards Two Headed Arrow")
  val LeftwardsArrowWithTail = new HTMLCharacter("&larrtl;", "&#x021A2;", "&#8610;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Arrow With Tail")
  val RightwardsArrowWithTail = new HTMLCharacter("&rarrtl;", "&#x021A3;", "&#8611;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Arrow With Tail")
  val LeftwardsArrowFromBar = new HTMLCharacter("&LeftTeeArrow;", "&#x021A4;", "&#8612;", "Arrows", "So", "mmlalias mmlextra", "Leftwards Arrow From Bar")
  val UpwardsArrowFromBar = new HTMLCharacter("&UpTeeArrow;", "&#x021A5;", "&#8613;", "Arrows", "So", "mmlalias mmlextra", "Upwards Arrow From Bar")
  val RightwardsArrowFromBar = new HTMLCharacter("&map;", "&#x021A6;", "&#8614;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Arrow From Bar")
  val DownwardsArrowFromBar = new HTMLCharacter("&DownTeeArrow;", "&#x021A7;", "&#8615;", "Arrows", "So", "mmlalias mmlextra", "Downwards Arrow From Bar")
  val LeftwardsArrowWithHook = new HTMLCharacter("&larrhk;", "&#x021A9;", "&#8617;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Arrow With Hook")
  val RightwardsArrowWithHook = new HTMLCharacter("&rarrhk;", "&#x021AA;", "&#8618;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Arrow With Hook")
  val LeftwardsArrowWithLoop = new HTMLCharacter("&larrlp;", "&#x021AB;", "&#8619;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Arrow With Loop")
  val RightwardsArrowWithLoop = new HTMLCharacter("&rarrlp;", "&#x021AC;", "&#8620;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Arrow With Loop")
  val LeftRightWaveArrow = new HTMLCharacter("&harrw;", "&#x021AD;", "&#8621;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Left Right Wave Arrow")
  val LeftRightArrowWithStroke = new HTMLCharacter("&nharr;", "&#x021AE;", "&#8622;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Left Right Arrow With Stroke")
  val UpwardsArrowWithTipLeftwards = new HTMLCharacter("&lsh;", "&#x021B0;", "&#8624;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Upwards Arrow With Tip Leftwards")
  val UpwardsArrowWithTipRightwards = new HTMLCharacter("&rsh;", "&#x021B1;", "&#8625;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Upwards Arrow With Tip Rightwards")
  val DownwardsArrowWithTipLeftwards = new HTMLCharacter("&ldsh;", "&#x021B2;", "&#8626;", "Arrows", "So", "9573-2003-isoamsa", "Downwards Arrow With Tip Leftwards")
  val DownwardsArrowWithTipRightwards = new HTMLCharacter("&rdsh;", "&#x021B3;", "&#8627;", "Arrows", "So", "9573-2003-isoamsa", "Downwards Arrow With Tip Rightwards")
  val DownwardsArrowWithCornerLeftwards = new HTMLCharacter("&crarr;", "&#x021B5;", "&#8629;", "Arrows", "So", "xhtml1-symbol", "Downwards Arrow With Corner Leftwards")
  val AnticlockwiseTopSemicircleArrow = new HTMLCharacter("&cularr;", "&#x021B6;", "&#8630;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Anticlockwise Top Semicircle Arrow")
  val ClockwiseTopSemicircleArrow = new HTMLCharacter("&curarr;", "&#x021B7;", "&#8631;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Clockwise Top Semicircle Arrow")
  val AnticlockwiseOpenCircleArrow = new HTMLCharacter("&olarr;", "&#x021BA;", "&#8634;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Anticlockwise Open Circle Arrow")
  val ClockwiseOpenCircleArrow = new HTMLCharacter("&orarr;", "&#x021BB;", "&#8635;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Clockwise Open Circle Arrow")
  val LeftwardsHarpoonWithBarbUpwards = new HTMLCharacter("&lharu;", "&#x021BC;", "&#8636;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Harpoon With Barb Upwards")
  val LeftwardsHarpoonWithBarbDownwards = new HTMLCharacter("&lhard;", "&#x021BD;", "&#8637;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Harpoon With Barb Downwards")
  val UpwardsHarpoonWithBarbRightwards = new HTMLCharacter("&uharr;", "&#x021BE;", "&#8638;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Upwards Harpoon With Barb Rightwards")
  val UpwardsHarpoonWithBarbLeftwards = new HTMLCharacter("&uharl;", "&#x021BF;", "&#8639;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Upwards Harpoon With Barb Leftwards")
  val RightwardsHarpoonWithBarbUpwards = new HTMLCharacter("&rharu;", "&#x021C0;", "&#8640;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Harpoon With Barb Upwards")
  val RightwardsHarpoonWithBarbDownwards = new HTMLCharacter("&rhard;", "&#x021C1;", "&#8641;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Harpoon With Barb Downwards")
  val DownwardsHarpoonWithBarbRightwards = new HTMLCharacter("&dharr;", "&#x021C2;", "&#8642;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Downwards Harpoon With Barb Rightwards")
  val DownwardsHarpoonWithBarbLeftwards = new HTMLCharacter("&dharl;", "&#x021C3;", "&#8643;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Downwards Harpoon With Barb Leftwards")
  val RightwardsArrowOverLeftwardsArrow = new HTMLCharacter("&rlarr;", "&#x021C4;", "&#8644;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Arrow Over Leftwards Arrow")
  val UpwardsArrowLeftwardsOfDownwardsArrow = new HTMLCharacter("&udarr;", "&#x021C5;", "&#8645;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Upwards Arrow Leftwards Of Downwards Arrow")
  val LeftwardsArrowOverRightwardsArrow = new HTMLCharacter("&lrarr;", "&#x021C6;", "&#8646;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Arrow Over Rightwards Arrow")
  val LeftwardsPairedArrows = new HTMLCharacter("&llarr;", "&#x021C7;", "&#8647;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Paired Arrows")
  val UpwardsPairedArrows = new HTMLCharacter("&uuarr;", "&#x021C8;", "&#8648;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Upwards Paired Arrows")
  val RightwardsPairedArrows = new HTMLCharacter("&rrarr;", "&#x021C9;", "&#8649;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Paired Arrows")
  val DownwardsPairedArrows = new HTMLCharacter("&ddarr;", "&#x021CA;", "&#8650;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Downwards Paired Arrows")
  val LeftwardsHarpoonOverRightwardsHarpoon = new HTMLCharacter("&lrhar;", "&#x021CB;", "&#8651;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Harpoon Over Rightwards Harpoon")
  val RightwardsHarpoonOverLeftwardsHarpoon = new HTMLCharacter("&rlhar;", "&#x021CC;", "&#8652;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Harpoon Over Leftwards Harpoon")
  val LeftwardsDoubleArrowWithStroke = new HTMLCharacter("&nlArr;", "&#x021CD;", "&#8653;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Double Arrow With Stroke")
  val LeftRightDoubleArrowWithStroke = new HTMLCharacter("&nhArr;", "&#x021CE;", "&#8654;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Left Right Double Arrow With Stroke")
  val RightwardsDoubleArrowWithStroke = new HTMLCharacter("&nrArr;", "&#x021CF;", "&#8655;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Double Arrow With Stroke")
  val LeftwardsDoubleArrow = new HTMLCharacter("&lArr;", "&#x021D0;", "&#8656;", "Arrows", "So", "xhtml1-symbol 9573-2003-isotech mmlalias", "Leftwards Double Arrow")
  val UpwardsDoubleArrow = new HTMLCharacter("&uArr;", "&#x021D1;", "&#8657;", "Arrows", "So", "xhtml1-symbol 9573-2003-isoamsa mmlalias", "Upwards Double Arrow")
  val RightwardsDoubleArrow = new HTMLCharacter("&rArr;", "&#x021D2;", "&#8658;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Rightwards Double Arrow")
  val DownwardsDoubleArrow = new HTMLCharacter("&dArr;", "&#x021D3;", "&#8659;", "Arrows", "So", "xhtml1-symbol 9573-2003-isoamsa mmlalias", "Downwards Double Arrow")
  val LeftRightDoubleArrow = new HTMLCharacter("&hArr;", "&#x021D4;", "&#8660;", "Arrows", "Sm", "xhtml1-symbol 9573-2003-isoamsa mmlalias 9573-2003-isotech", "Left Right Double Arrow")
  val UpDownDoubleArrow = new HTMLCharacter("&vArr;", "&#x021D5;", "&#8661;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Up Down Double Arrow")
  val NorthWestDoubleArrow = new HTMLCharacter("&nwArr;", "&#x021D6;", "&#8662;", "Arrows", "So", "9573-2003-isoamsa", "North West Double Arrow")
  val NorthEastDoubleArrow = new HTMLCharacter("&neArr;", "&#x021D7;", "&#8663;", "Arrows", "So", "9573-2003-isoamsa", "North East Double Arrow")
  val SouthEastDoubleArrow = new HTMLCharacter("&seArr;", "&#x021D8;", "&#8664;", "Arrows", "So", "9573-2003-isoamsa", "South East Double Arrow")
  val SouthWestDoubleArrow = new HTMLCharacter("&swArr;", "&#x021D9;", "&#8665;", "Arrows", "So", "9573-2003-isoamsa", "South West Double Arrow")
  val LeftwardsTripleArrow = new HTMLCharacter("&lAarr;", "&#x021DA;", "&#8666;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Leftwards Triple Arrow")
  val RightwardsTripleArrow = new HTMLCharacter("&rAarr;", "&#x021DB;", "&#8667;", "Arrows", "So", "9573-2003-isoamsa mmlalias", "Rightwards Triple Arrow")
  val RightwardsSquiggleArrow = new HTMLCharacter("&zigrarr;", "&#x021DD;", "&#8669;", "Arrows", "So", "9573-2003-isoamsa", "Rightwards Squiggle Arrow")
  val LeftwardsArrowToBar = new HTMLCharacter("&larrb;", "&#x021E4;", "&#8676;", "Arrows", "So", "mmlextra mmlalias", "Leftwards Arrow To Bar")
  val RightwardsArrowToBar = new HTMLCharacter("&rarrb;", "&#x021E5;", "&#8677;", "Arrows", "So", "mmlextra mmlalias", "Rightwards Arrow To Bar")
  val DownwardsArrowLeftwardsOfUpwardsArrow = new HTMLCharacter("&duarr;", "&#x021F5;", "&#8693;", "Arrows", "Sm", "9573-2003-isoamsa mmlalias", "Downwards Arrow Leftwards Of Upwards Arrow")
  val LeftwardsOpenHeadedArrow = new HTMLCharacter("&loarr;", "&#x021FD;", "&#8701;", "Arrows", "Sm", "9573-2003-isoamsa", "Leftwards Open-Headed Arrow")
  val RightwardsOpenHeadedArrow = new HTMLCharacter("&roarr;", "&#x021FE;", "&#8702;", "Arrows", "Sm", "9573-2003-isoamsa", "Rightwards Open-Headed Arrow")
  val LeftRightOpenHeadedArrow = new HTMLCharacter("&hoarr;", "&#x021FF;", "&#8703;", "Arrows", "Sm", "9573-2003-isoamsa", "Left Right Open-Headed Arrow")
  val ForAll = new HTMLCharacter("&forall;", "&#x02200;", "&#8704;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "For All")
  val Complement = new HTMLCharacter("&comp;", "&#x02201;", "&#8705;", "Mathematical Operators", "Sm", "9573-2003-isoamso mmlalias", "Complement")
  val PartialDifferential = new HTMLCharacter("&part;", "&#x02202;", "&#8706;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Partial Differential")
  val ThereExists = new HTMLCharacter("&exist;", "&#x02203;", "&#8707;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "There Exists")
  val ThereDoesNotExist = new HTMLCharacter("&nexist;", "&#x02204;", "&#8708;", "Mathematical Operators", "Sm", "9573-2003-isoamso mmlalias", "There Does Not Exist")
  val EmptySet = new HTMLCharacter("&empty;", "&#x02205;", "&#8709;", "Mathematical Operators", "Sm", "9573-2003-isoamso mmlalias xhtml1-symbol", "Empty Set")
  val Nabla = new HTMLCharacter("&nabla;", "&#x02207;", "&#8711;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Nabla")
  val ElementOf = new HTMLCharacter("&isin;", "&#x02208;", "&#8712;", "Mathematical Operators", "Sm", "9573-2003-isotech xhtml1-symbol mmlalias", "Element Of")
  val NotAnElementOf = new HTMLCharacter("&notin;", "&#x02209;", "&#8713;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Not An Element Of")
  val ContainsAsMember = new HTMLCharacter("&niv;", "&#x0220B;", "&#8715;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias xhtml1-symbol", "Contains As Member")
  val DoesNotContainAsMember = new HTMLCharacter("&notni;", "&#x0220C;", "&#8716;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Does Not Contain As Member")
  val NAryProduct = new HTMLCharacter("&prod;", "&#x0220F;", "&#8719;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamsb mmlextra", "N-Ary Product")
  val NAryCoproduct = new HTMLCharacter("&coprod;", "&#x02210;", "&#8720;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Coproduct")
  val NArySummation = new HTMLCharacter("&sum;", "&#x02211;", "&#8721;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamsb mmlalias", "N-Ary Summation")
  val MinusSign = new HTMLCharacter("&minus;", "&#x02212;", "&#8722;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech", "Minus Sign")
  val MinusOrPlusSign = new HTMLCharacter("&mnplus;", "&#x02213;", "&#8723;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Minus-Or-Plus Sign")
  val DotPlus = new HTMLCharacter("&plusdo;", "&#x02214;", "&#8724;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Dot Plus")
  val SetMinus = new HTMLCharacter("&setmn;", "&#x02216;", "&#8726;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Set Minus")
  val AsteriskOperator = new HTMLCharacter("&lowast;", "&#x02217;", "&#8727;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech", "Asterisk Operator")
  val RingOperator = new HTMLCharacter("&compfn;", "&#x02218;", "&#8728;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Ring Operator")
  val SquareRoot = new HTMLCharacter("&radic;", "&#x0221A;", "&#8730;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Square Root")
  val ProportionalTo = new HTMLCharacter("&prop;", "&#x0221D;", "&#8733;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias 9573-2003-isoamsr", "Proportional To")
  val Infinity = new HTMLCharacter("&infin;", "&#x0221E;", "&#8734;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech", "Infinity")
  val RightAngle = new HTMLCharacter("&angrt;", "&#x0221F;", "&#8735;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Right Angle")
  val Angle = new HTMLCharacter("&ang;", "&#x02220;", "&#8736;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamso mmlalias", "Angle")
  val MeasuredAngle = new HTMLCharacter("&angmsd;", "&#x02221;", "&#8737;", "Mathematical Operators", "Sm", "9573-2003-isoamso mmlalias", "Measured Angle")
  val SphericalAngle = new HTMLCharacter("&angsph;", "&#x02222;", "&#8738;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Spherical Angle")
  val Divides = new HTMLCharacter("&mid;", "&#x02223;", "&#8739;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Divides")
  val DoesNotDivide = new HTMLCharacter("&nmid;", "&#x02224;", "&#8740;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Divide")
  val ParallelTo = new HTMLCharacter("&par;", "&#x02225;", "&#8741;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias 9573-2003-isoamsr", "Parallel To")
  val NotParallelTo = new HTMLCharacter("&npar;", "&#x02226;", "&#8742;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Parallel To")
  val LogicalAnd = new HTMLCharacter("&and;", "&#x02227;", "&#8743;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Logical And")
  val LogicalOr = new HTMLCharacter("&or;", "&#x02228;", "&#8744;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Logical Or")
  val Intersection = new HTMLCharacter("&cap;", "&#x02229;", "&#8745;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech", "Intersection")
  val Union = new HTMLCharacter("&cup;", "&#x0222A;", "&#8746;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech", "Union")
  val Integral = new HTMLCharacter("&int;", "&#x0222B;", "&#8747;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Integral")
  val DoubleIntegral = new HTMLCharacter("&Int;", "&#x0222C;", "&#8748;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Double Integral")
  val TripleIntegral = new HTMLCharacter("&tint;", "&#x0222D;", "&#8749;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Triple Integral")
  val ContourIntegral = new HTMLCharacter("&conint;", "&#x0222E;", "&#8750;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Contour Integral")
  val SurfaceIntegral = new HTMLCharacter("&Conint;", "&#x0222F;", "&#8751;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Surface Integral")
  val VolumeIntegral = new HTMLCharacter("&Cconint;", "&#x02230;", "&#8752;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Volume Integral")
  val ClockwiseIntegral = new HTMLCharacter("&cwint;", "&#x02231;", "&#8753;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Clockwise Integral")
  val ClockwiseContourIntegral = new HTMLCharacter("&cwconint;", "&#x02232;", "&#8754;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Clockwise Contour Integral")
  val AnticlockwiseContourIntegral = new HTMLCharacter("&awconint;", "&#x02233;", "&#8755;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Anticlockwise Contour Integral")
  val Therefore = new HTMLCharacter("&there4;", "&#x02234;", "&#8756;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Therefore")
  val Because = new HTMLCharacter("&becaus;", "&#x02235;", "&#8757;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Because")
  val Ratio = new HTMLCharacter("&ratio;", "&#x02236;", "&#8758;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Ratio")
  val Proportion = new HTMLCharacter("&Colon;", "&#x02237;", "&#8759;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Proportion")
  val DotMinus = new HTMLCharacter("&minusd;", "&#x02238;", "&#8760;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Dot Minus")
  val GeometricProportion = new HTMLCharacter("&mDDot;", "&#x0223A;", "&#8762;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Geometric Proportion")
  val Homothetic = new HTMLCharacter("&homtht;", "&#x0223B;", "&#8763;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Homothetic")
  val TildeOperator = new HTMLCharacter("&sim;", "&#x0223C;", "&#8764;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias 9573-2003-isoamsr", "Tilde Operator")
  val ReversedTilde = new HTMLCharacter("&bsim;", "&#x0223D;", "&#8765;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Reversed Tilde")
  val InvertedLazyS = new HTMLCharacter("&ac;", "&#x0223E;", "&#8766;", "Mathematical Operators", "Sm", "9573-2003-isoamsb 9573-2003-isoamsr", "Inverted Lazy S")
  val SineWave = new HTMLCharacter("&acd;", "&#x0223F;", "&#8767;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Sine Wave")
  val WreathProduct = new HTMLCharacter("&wreath;", "&#x02240;", "&#8768;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Wreath Product")
  val NotTilde = new HTMLCharacter("&nsim;", "&#x02241;", "&#8769;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Tilde")
  val MinusTilde = new HTMLCharacter("&esim;", "&#x02242;", "&#8770;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Minus Tilde")
  val AsymptoticallyEqualTo = new HTMLCharacter("&sime;", "&#x02243;", "&#8771;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Asymptotically Equal To")
  val NotAsymptoticallyEqualTo = new HTMLCharacter("&nsime;", "&#x02244;", "&#8772;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Asymptotically Equal To")
  val ApproximatelyEqualTo = new HTMLCharacter("&cong;", "&#x02245;", "&#8773;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Approximately Equal To")
  val ApproximatelyButNotActuallyEqualTo = new HTMLCharacter("&simne;", "&#x02246;", "&#8774;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Approximately But Not Actually Equal To")
  val NeitherApproximatelyNorActuallyEqualTo = new HTMLCharacter("&ncong;", "&#x02247;", "&#8775;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Approximately Nor Actually Equal To")
  val AlmostEqualTo = new HTMLCharacter("&asymp;", "&#x02248;", "&#8776;", "Mathematical Operators", "Sm", "9573-2003-isoamsr xhtml1-symbol 9573-2003-isotech mmlalias", "Almost Equal To")
  val NotAlmostEqualTo = new HTMLCharacter("&nap;", "&#x02249;", "&#8777;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Almost Equal To")
  val AlmostEqualOrEqualTo = new HTMLCharacter("&ape;", "&#x0224A;", "&#8778;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Almost Equal Or Equal To")
  val TripleTilde = new HTMLCharacter("&apid;", "&#x0224B;", "&#8779;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Triple Tilde")
  val AllEqualTo = new HTMLCharacter("&bcong;", "&#x0224C;", "&#8780;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "All Equal To")
  val EquivalentTo = new HTMLCharacter("&asympeq;", "&#x0224D;", "&#8781;", "Mathematical Operators", "Sm", "mmlextra mmlalias", "Equivalent To")
  val GeometricallyEquivalentTo = new HTMLCharacter("&bump;", "&#x0224E;", "&#8782;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Geometrically Equivalent To")
  val DifferenceBetween = new HTMLCharacter("&bumpe;", "&#x0224F;", "&#8783;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Difference Between")
  val ApproachesTheLimit = new HTMLCharacter("&esdot;", "&#x02250;", "&#8784;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Approaches The Limit")
  val GeometricallyEqualTo = new HTMLCharacter("&eDot;", "&#x02251;", "&#8785;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Geometrically Equal To")
  val ApproximatelyEqualToOrTheImageOf = new HTMLCharacter("&efDot;", "&#x02252;", "&#8786;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Approximately Equal To Or The Image Of")
  val ImageOfOrApproximatelyEqualTo = new HTMLCharacter("&erDot;", "&#x02253;", "&#8787;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Image Of Or Approximately Equal To")
  val ColonEquals = new HTMLCharacter("&colone;", "&#x02254;", "&#8788;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Colon Equals")
  val EqualsColon = new HTMLCharacter("&ecolon;", "&#x02255;", "&#8789;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Equals Colon")
  val RingInEqualTo = new HTMLCharacter("&ecir;", "&#x02256;", "&#8790;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Ring In Equal To")
  val RingEqualTo = new HTMLCharacter("&cire;", "&#x02257;", "&#8791;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Ring Equal To")
  val Estimates = new HTMLCharacter("&wedgeq;", "&#x02259;", "&#8793;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Estimates")
  val EquiangularTo = new HTMLCharacter("&veeeq;", "&#x0225A;", "&#8794;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Equiangular To")
  val DeltaEqualTo = new HTMLCharacter("&trie;", "&#x0225C;", "&#8796;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Delta Equal To")
  val QuestionedEqualTo = new HTMLCharacter("&equest;", "&#x0225F;", "&#8799;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Questioned Equal To")
  val NotEqualTo = new HTMLCharacter("&ne;", "&#x02260;", "&#8800;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Not Equal To")
  val IdenticalTo = new HTMLCharacter("&equiv;", "&#x02261;", "&#8801;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Identical To")
  val NotIdenticalTo = new HTMLCharacter("&nequiv;", "&#x02262;", "&#8802;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Identical To")
  val LessThanOrEqualTo = new HTMLCharacter("&le;", "&#x02264;", "&#8804;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Less-Than Or Equal To")
  val GreaterThanOrEqualTo = new HTMLCharacter("&ge;", "&#x02265;", "&#8805;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Greater-Than Or Equal To")
  val LessThanOverEqualTo = new HTMLCharacter("&lE;", "&#x02266;", "&#8806;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Over Equal To")
  val GreaterThanOverEqualTo = new HTMLCharacter("&gE;", "&#x02267;", "&#8807;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Over Equal To")
  val LessThanButNotEqualTo = new HTMLCharacter("&lnE;", "&#x02268;", "&#8808;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Less-Than But Not Equal To")
  val GreaterThanButNotEqualTo = new HTMLCharacter("&gnE;", "&#x02269;", "&#8809;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Greater-Than But Not Equal To")
  val MuchLessThan = new HTMLCharacter("&Lt;", "&#x0226A;", "&#8810;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Much Less-Than")
  val MuchGreaterThan = new HTMLCharacter("&Gt;", "&#x0226B;", "&#8811;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Much Greater-Than")
  val Between = new HTMLCharacter("&twixt;", "&#x0226C;", "&#8812;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Between")
  val NotEquivalentTo = new HTMLCharacter("&NotCupCap;", "&#x0226D;", "&#8813;", "Mathematical Operators", "Sm", "mmlextra", "Not Equivalent To")
  val NotLessThan = new HTMLCharacter("&nlt;", "&#x0226E;", "&#8814;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Less-Than")
  val NotGreaterThan = new HTMLCharacter("&ngt;", "&#x0226F;", "&#8815;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Greater-Than")
  val NeitherLessThanNorEqualTo = new HTMLCharacter("&nle;", "&#x02270;", "&#8816;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Less-Than Nor Equal To")
  val NeitherGreaterThanNorEqualTo = new HTMLCharacter("&nge;", "&#x02271;", "&#8817;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Greater-Than Nor Equal To")
  val LessThanOrEquivalentTo = new HTMLCharacter("&lsim;", "&#x02272;", "&#8818;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Or Equivalent To")
  val GreaterThanOrEquivalentTo = new HTMLCharacter("&gsim;", "&#x02273;", "&#8819;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Or Equivalent To")
  val NeitherLessThanNorEquivalentTo = new HTMLCharacter("&nlsim;", "&#x02274;", "&#8820;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Less-Than Nor Equivalent To")
  val NeitherGreaterThanNorEquivalentTo = new HTMLCharacter("&ngsim;", "&#x02275;", "&#8821;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Greater-Than Nor Equivalent To")
  val LessThanOrGreaterThan = new HTMLCharacter("&lg;", "&#x02276;", "&#8822;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Or Greater-Than")
  val GreaterThanOrLessThan = new HTMLCharacter("&gl;", "&#x02277;", "&#8823;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Or Less-Than")
  val NeitherLessThanNorGreaterThan = new HTMLCharacter("&ntlg;", "&#x02278;", "&#8824;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Less-Than Nor Greater-Than")
  val NeitherGreaterThanNorLessThan = new HTMLCharacter("&ntgl;", "&#x02279;", "&#8825;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither Greater-Than Nor Less-Than")
  val Precedes = new HTMLCharacter("&pr;", "&#x0227A;", "&#8826;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Precedes")
  val Succeeds = new HTMLCharacter("&sc;", "&#x0227B;", "&#8827;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Succeeds")
  val PrecedesOrEqualTo = new HTMLCharacter("&prcue;", "&#x0227C;", "&#8828;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Precedes Or Equal To")
  val SucceedsOrEqualTo = new HTMLCharacter("&sccue;", "&#x0227D;", "&#8829;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Succeeds Or Equal To")
  val PrecedesOrEquivalentTo = new HTMLCharacter("&prsim;", "&#x0227E;", "&#8830;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Precedes Or Equivalent To")
  val SucceedsOrEquivalentTo = new HTMLCharacter("&scsim;", "&#x0227F;", "&#8831;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Succeeds Or Equivalent To")
  val DoesNotPrecede = new HTMLCharacter("&npr;", "&#x02280;", "&#8832;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Precede")
  val DoesNotSucceed = new HTMLCharacter("&nsc;", "&#x02281;", "&#8833;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Succeed")
  val SubsetOf = new HTMLCharacter("&sub;", "&#x02282;", "&#8834;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Subset Of")
  val SupersetOf = new HTMLCharacter("&sup;", "&#x02283;", "&#8835;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Superset Of")
  val NotASubsetOf = new HTMLCharacter("&nsub;", "&#x02284;", "&#8836;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamsn", "Not A Subset Of")
  val NotASupersetOf = new HTMLCharacter("&nsup;", "&#x02285;", "&#8837;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Not A Superset Of")
  val SubsetOfOrEqualTo = new HTMLCharacter("&sube;", "&#x02286;", "&#8838;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Subset Of Or Equal To")
  val SupersetOfOrEqualTo = new HTMLCharacter("&supe;", "&#x02287;", "&#8839;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isotech mmlalias", "Superset Of Or Equal To")
  val NeitherASubsetOfNorEqualTo = new HTMLCharacter("&nsube;", "&#x02288;", "&#8840;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither A Subset Of Nor Equal To")
  val NeitherASupersetOfNorEqualTo = new HTMLCharacter("&nsupe;", "&#x02289;", "&#8841;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Neither A Superset Of Nor Equal To")
  val SubsetOfWithNotEqualTo = new HTMLCharacter("&subne;", "&#x0228A;", "&#8842;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Subset Of With Not Equal To")
  val SupersetOfWithNotEqualTo = new HTMLCharacter("&supne;", "&#x0228B;", "&#8843;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Superset Of With Not Equal To")
  val MultisetMultiplication = new HTMLCharacter("&cupdot;", "&#x0228D;", "&#8845;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiset Multiplication")
  val MultisetUnion = new HTMLCharacter("&uplus;", "&#x0228E;", "&#8846;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Multiset Union")
  val SquareImageOf = new HTMLCharacter("&sqsub;", "&#x0228F;", "&#8847;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Square Image Of")
  val SquareOriginalOf = new HTMLCharacter("&sqsup;", "&#x02290;", "&#8848;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Square Original Of")
  val SquareImageOfOrEqualTo = new HTMLCharacter("&sqsube;", "&#x02291;", "&#8849;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Square Image Of Or Equal To")
  val SquareOriginalOfOrEqualTo = new HTMLCharacter("&sqsupe;", "&#x02292;", "&#8850;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Square Original Of Or Equal To")
  val SquareCap = new HTMLCharacter("&sqcap;", "&#x02293;", "&#8851;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Square Cap")
  val SquareCup = new HTMLCharacter("&sqcup;", "&#x02294;", "&#8852;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Square Cup")
  val CircledPlus = new HTMLCharacter("&oplus;", "&#x02295;", "&#8853;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamsb mmlalias", "Circled Plus")
  val CircledMinus = new HTMLCharacter("&ominus;", "&#x02296;", "&#8854;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Circled Minus")
  val CircledTimes = new HTMLCharacter("&otimes;", "&#x02297;", "&#8855;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamsb mmlalias", "Circled Times")
  val CircledDivisionSlash = new HTMLCharacter("&osol;", "&#x02298;", "&#8856;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Circled Division Slash")
  val CircledDotOperator = new HTMLCharacter("&odot;", "&#x02299;", "&#8857;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Circled Dot Operator")
  val CircledRingOperator = new HTMLCharacter("&ocir;", "&#x0229A;", "&#8858;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Circled Ring Operator")
  val CircledAsteriskOperator = new HTMLCharacter("&oast;", "&#x0229B;", "&#8859;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Circled Asterisk Operator")
  val CircledDash = new HTMLCharacter("&odash;", "&#x0229D;", "&#8861;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Circled Dash")
  val SquaredPlus = new HTMLCharacter("&plusb;", "&#x0229E;", "&#8862;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Squared Plus")
  val SquaredMinus = new HTMLCharacter("&minusb;", "&#x0229F;", "&#8863;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Squared Minus")
  val SquaredTimes = new HTMLCharacter("&timesb;", "&#x022A0;", "&#8864;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Squared Times")
  val SquaredDotOperator = new HTMLCharacter("&sdotb;", "&#x022A1;", "&#8865;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Squared Dot Operator")
  val RightTack = new HTMLCharacter("&vdash;", "&#x022A2;", "&#8866;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Right Tack")
  val LeftTack = new HTMLCharacter("&dashv;", "&#x022A3;", "&#8867;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Left Tack")
  val DownTack = new HTMLCharacter("&top;", "&#x022A4;", "&#8868;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Down Tack")
  val UpTack = new HTMLCharacter("&bottom;", "&#x022A5;", "&#8869;", "Mathematical Operators", "Sm", "9573-2003-isotech mmlalias xhtml1-symbol", "Up Tack")
  val Models = new HTMLCharacter("&models;", "&#x022A7;", "&#8871;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Models")
  val True = new HTMLCharacter("&vDash;", "&#x022A8;", "&#8872;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "True")
  val Forces = new HTMLCharacter("&Vdash;", "&#x022A9;", "&#8873;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Forces")
  val TripleVerticalBarRightTurnstile = new HTMLCharacter("&Vvdash;", "&#x022AA;", "&#8874;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Triple Vertical Bar Right Turnstile")
  val DoubleVerticalBarDoubleRightTurnstile = new HTMLCharacter("&VDash;", "&#x022AB;", "&#8875;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double Vertical Bar Double Right Turnstile")
  val DoesNotProve = new HTMLCharacter("&nvdash;", "&#x022AC;", "&#8876;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Does Not Prove")
  val NotTrue = new HTMLCharacter("&nvDash;", "&#x022AD;", "&#8877;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Not True")
  val DoesNotForce = new HTMLCharacter("&nVdash;", "&#x022AE;", "&#8878;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Does Not Force")
  val NegatedDoubleVerticalBarDoubleRightTurnstile = new HTMLCharacter("&nVDash;", "&#x022AF;", "&#8879;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Negated Double Vertical Bar Double Right Turnstile")
  val PrecedesUnderRelation = new HTMLCharacter("&prurel;", "&#x022B0;", "&#8880;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Precedes Under Relation")
  val NormalSubgroupOf = new HTMLCharacter("&vltri;", "&#x022B2;", "&#8882;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Normal Subgroup Of")
  val ContainsAsNormalSubgroup = new HTMLCharacter("&vrtri;", "&#x022B3;", "&#8883;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Contains As Normal Subgroup")
  val NormalSubgroupOfOrEqualTo = new HTMLCharacter("&ltrie;", "&#x022B4;", "&#8884;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Normal Subgroup Of Or Equal To")
  val ContainsAsNormalSubgroupOrEqualTo = new HTMLCharacter("&rtrie;", "&#x022B5;", "&#8885;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Contains As Normal Subgroup Or Equal To")
  val OriginalOf = new HTMLCharacter("&origof;", "&#x022B6;", "&#8886;", "Mathematical Operators", "Sm", "9573-2003-isoamsa", "Original Of")
  val ImageOf = new HTMLCharacter("&imof;", "&#x022B7;", "&#8887;", "Mathematical Operators", "Sm", "9573-2003-isoamsa", "Image Of")
  val Multimap = new HTMLCharacter("&mumap;", "&#x022B8;", "&#8888;", "Mathematical Operators", "Sm", "9573-2003-isoamsa mmlalias", "Multimap")
  val HermitianConjugateMatrix = new HTMLCharacter("&hercon;", "&#x022B9;", "&#8889;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Hermitian Conjugate Matrix")
  val Intercalate = new HTMLCharacter("&intcal;", "&#x022BA;", "&#8890;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Intercalate")
  val Xor = new HTMLCharacter("&veebar;", "&#x022BB;", "&#8891;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Xor")
  val Nor = new HTMLCharacter("&barvee;", "&#x022BD;", "&#8893;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Nor")
  val RightAngleWithArc = new HTMLCharacter("&angrtvb;", "&#x022BE;", "&#8894;", "Mathematical Operators", "Sm", "9573-2003-isoamso", "Right Angle With Arc")
  val RightTriangle = new HTMLCharacter("&lrtri;", "&#x022BF;", "&#8895;", "Mathematical Operators", "Sm", "9573-2003-isoamso", "Right Triangle")
  val NAryLogicalAnd = new HTMLCharacter("&xwedge;", "&#x022C0;", "&#8896;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Logical And")
  val NAryLogicalOr = new HTMLCharacter("&xvee;", "&#x022C1;", "&#8897;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Logical Or")
  val NAryIntersection = new HTMLCharacter("&xcap;", "&#x022C2;", "&#8898;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Intersection")
  val NAryUnion = new HTMLCharacter("&xcup;", "&#x022C3;", "&#8899;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Union")
  val DiamondOperator = new HTMLCharacter("&diam;", "&#x022C4;", "&#8900;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Diamond Operator")
  val DotOperator = new HTMLCharacter("&sdot;", "&#x022C5;", "&#8901;", "Mathematical Operators", "Sm", "xhtml1-symbol 9573-2003-isoamsb", "Dot Operator")
  val StarOperator = new HTMLCharacter("&sstarf;", "&#x022C6;", "&#8902;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Star Operator")
  val DivisionTimes = new HTMLCharacter("&divonx;", "&#x022C7;", "&#8903;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Division Times")
  val Bowtie = new HTMLCharacter("&bowtie;", "&#x022C8;", "&#8904;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Bowtie")
  val LeftNormalFactorSemidirectProduct = new HTMLCharacter("&ltimes;", "&#x022C9;", "&#8905;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Left Normal Factor Semidirect Product")
  val RightNormalFactorSemidirectProduct = new HTMLCharacter("&rtimes;", "&#x022CA;", "&#8906;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Right Normal Factor Semidirect Product")
  val LeftSemidirectProduct = new HTMLCharacter("&lthree;", "&#x022CB;", "&#8907;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Left Semidirect Product")
  val RightSemidirectProduct = new HTMLCharacter("&rthree;", "&#x022CC;", "&#8908;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Right Semidirect Product")
  val ReversedTildeEquals = new HTMLCharacter("&bsime;", "&#x022CD;", "&#8909;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Reversed Tilde Equals")
  val CurlyLogicalOr = new HTMLCharacter("&cuvee;", "&#x022CE;", "&#8910;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Curly Logical Or")
  val CurlyLogicalAnd = new HTMLCharacter("&cuwed;", "&#x022CF;", "&#8911;", "Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Curly Logical And")
  val DoubleSubset = new HTMLCharacter("&Sub;", "&#x022D0;", "&#8912;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Double Subset")
  val DoubleSuperset = new HTMLCharacter("&Sup;", "&#x022D1;", "&#8913;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Double Superset")
  val DoubleIntersection = new HTMLCharacter("&Cap;", "&#x022D2;", "&#8914;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Double Intersection")
  val DoubleUnion = new HTMLCharacter("&Cup;", "&#x022D3;", "&#8915;", "Mathematical Operators", "Sm", "9573-2003-isoamsb", "Double Union")
  val Pitchfork = new HTMLCharacter("&fork;", "&#x022D4;", "&#8916;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Pitchfork")
  val EqualAndParallelTo = new HTMLCharacter("&epar;", "&#x022D5;", "&#8917;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Equal And Parallel To")
  val LessThanWithDot = new HTMLCharacter("&ltdot;", "&#x022D6;", "&#8918;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than With Dot")
  val GreaterThanWithDot = new HTMLCharacter("&gtdot;", "&#x022D7;", "&#8919;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than With Dot")
  val VeryMuchLessThan = new HTMLCharacter("&Ll;", "&#x022D8;", "&#8920;", "Mathematical Operators", "Sm", "9573-2003-isoamsr", "Very Much Less-Than")
  val VeryMuchGreaterThan = new HTMLCharacter("&Gg;", "&#x022D9;", "&#8921;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Very Much Greater-Than")
  val LessThanEqualToOrGreaterThan = new HTMLCharacter("&leg;", "&#x022DA;", "&#8922;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Equal To Or Greater-Than")
  val GreaterThanEqualToOrLessThan = new HTMLCharacter("&gel;", "&#x022DB;", "&#8923;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Equal To Or Less-Than")
  val EqualToOrPrecedes = new HTMLCharacter("&cuepr;", "&#x022DE;", "&#8926;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Equal To Or Precedes")
  val EqualToOrSucceeds = new HTMLCharacter("&cuesc;", "&#x022DF;", "&#8927;", "Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Equal To Or Succeeds")
  val DoesNotPrecedeOrEqual = new HTMLCharacter("&nprcue;", "&#x022E0;", "&#8928;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Precede Or Equal")
  val DoesNotSucceedOrEqual = new HTMLCharacter("&nsccue;", "&#x022E1;", "&#8929;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Succeed Or Equal")
  val NotSquareImageOfOrEqualTo = new HTMLCharacter("&nsqsube;", "&#x022E2;", "&#8930;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Square Image Of Or Equal To")
  val NotSquareOriginalOfOrEqualTo = new HTMLCharacter("&nsqsupe;", "&#x022E3;", "&#8931;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Square Original Of Or Equal To")
  val LessThanButNotEquivalentTo = new HTMLCharacter("&lnsim;", "&#x022E6;", "&#8934;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Less-Than But Not Equivalent To")
  val GreaterThanButNotEquivalentTo = new HTMLCharacter("&gnsim;", "&#x022E7;", "&#8935;", "Mathematical Operators", "Sm", "9573-2003-isoamsn", "Greater-Than But Not Equivalent To")
  val PrecedesButNotEquivalentTo = new HTMLCharacter("&prnsim;", "&#x022E8;", "&#8936;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Precedes But Not Equivalent To")
  val SucceedsButNotEquivalentTo = new HTMLCharacter("&scnsim;", "&#x022E9;", "&#8937;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Succeeds But Not Equivalent To")
  val NotNormalSubgroupOf = new HTMLCharacter("&nltri;", "&#x022EA;", "&#8938;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Normal Subgroup Of")
  val DoesNotContainAsNormalSubgroup = new HTMLCharacter("&nrtri;", "&#x022EB;", "&#8939;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Contain As Normal Subgroup")
  val NotNormalSubgroupOfOrEqualTo = new HTMLCharacter("&nltrie;", "&#x022EC;", "&#8940;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Not Normal Subgroup Of Or Equal To")
  val DoesNotContainAsNormalSubgroupOrEqual = new HTMLCharacter("&nrtrie;", "&#x022ED;", "&#8941;", "Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Does Not Contain As Normal Subgroup Or Equal")
  val VerticalEllipsis = new HTMLCharacter("&vellip;", "&#x022EE;", "&#8942;", "Mathematical Operators", "Sm", "9573-2003-isopub", "Vertical Ellipsis")
  val MidlineHorizontalEllipsis = new HTMLCharacter("&ctdot;", "&#x022EF;", "&#8943;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Midline Horizontal Ellipsis")
  val UpRightDiagonalEllipsis = new HTMLCharacter("&utdot;", "&#x022F0;", "&#8944;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Up Right Diagonal Ellipsis")
  val DownRightDiagonalEllipsis = new HTMLCharacter("&dtdot;", "&#x022F1;", "&#8945;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Down Right Diagonal Ellipsis")
  val ElementOfWithLongHorizontalStroke = new HTMLCharacter("&disin;", "&#x022F2;", "&#8946;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Element Of With Long Horizontal Stroke")
  val ElementOfWithVerticalBarAtEndOfHorizontalStroke = new HTMLCharacter("&isinsv;", "&#x022F3;", "&#8947;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Element Of With Vertical Bar At End Of Horizontal Stroke")
  val SmallElementOfWithVerticalBarAtEndOfHorizontalStroke = new HTMLCharacter("&isins;", "&#x022F4;", "&#8948;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Small Element Of With Vertical Bar At End Of Horizontal Stroke")
  val ElementOfWithDotAbove = new HTMLCharacter("&isindot;", "&#x022F5;", "&#8949;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Element Of With Dot Above")
  val ElementOfWithOverbar = new HTMLCharacter("&notinvc;", "&#x022F6;", "&#8950;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Element Of With Overbar")
  val SmallElementOfWithOverbar = new HTMLCharacter("&notinvb;", "&#x022F7;", "&#8951;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Small Element Of With Overbar")
  val ElementOfWithTwoHorizontalStrokes = new HTMLCharacter("&isinE;", "&#x022F9;", "&#8953;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Element Of With Two Horizontal Strokes")
  val ContainsWithLongHorizontalStroke = new HTMLCharacter("&nisd;", "&#x022FA;", "&#8954;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Contains With Long Horizontal Stroke")
  val ContainsWithVerticalBarAtEndOfHorizontalStroke = new HTMLCharacter("&xnis;", "&#x022FB;", "&#8955;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Contains With Vertical Bar At End Of Horizontal Stroke")
  val SmallContainsWithVerticalBarAtEndOfHorizontalStroke = new HTMLCharacter("&nis;", "&#x022FC;", "&#8956;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Small Contains With Vertical Bar At End Of Horizontal Stroke")
  val ContainsWithOverbar = new HTMLCharacter("&notnivc;", "&#x022FD;", "&#8957;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Contains With Overbar")
  val SmallContainsWithOverbar = new HTMLCharacter("&notnivb;", "&#x022FE;", "&#8958;", "Mathematical Operators", "Sm", "9573-2003-isotech", "Small Contains With Overbar")
  val Projective = new HTMLCharacter("&barwed;", "&#x02305;", "&#8965;", "Miscellaneous Technical", "So", "9573-2003-isoamsb mmlalias", "Projective")
  val Perspective = new HTMLCharacter("&Barwed;", "&#x02306;", "&#8966;", "Miscellaneous Technical", "So", "9573-2003-isoamsb mmlalias", "Perspective")
  val LeftCeiling = new HTMLCharacter("&lceil;", "&#x02308;", "&#8968;", "Miscellaneous Technical", "Sm", "xhtml1-symbol 9573-2003-isoamsc mmlalias", "Left Ceiling")
  val RightCeiling = new HTMLCharacter("&rceil;", "&#x02309;", "&#8969;", "Miscellaneous Technical", "Sm", "xhtml1-symbol 9573-2003-isoamsc mmlalias", "Right Ceiling")
  val LeftFloor = new HTMLCharacter("&lfloor;", "&#x0230A;", "&#8970;", "Miscellaneous Technical", "Sm", "xhtml1-symbol 9573-2003-isoamsc mmlalias", "Left Floor")
  val RightFloor = new HTMLCharacter("&rfloor;", "&#x0230B;", "&#8971;", "Miscellaneous Technical", "Sm", "xhtml1-symbol 9573-2003-isoamsc mmlalias", "Right Floor")
  val BottomRightCrop = new HTMLCharacter("&drcrop;", "&#x0230C;", "&#8972;", "Miscellaneous Technical", "So", "9573-2003-isopub", "Bottom Right Crop")
  val BottomLeftCrop = new HTMLCharacter("&dlcrop;", "&#x0230D;", "&#8973;", "Miscellaneous Technical", "So", "9573-2003-isopub", "Bottom Left Crop")
  val TopRightCrop = new HTMLCharacter("&urcrop;", "&#x0230E;", "&#8974;", "Miscellaneous Technical", "So", "9573-2003-isopub", "Top Right Crop")
  val TopLeftCrop = new HTMLCharacter("&ulcrop;", "&#x0230F;", "&#8975;", "Miscellaneous Technical", "So", "9573-2003-isopub", "Top Left Crop")
  val ReversedNotSign = new HTMLCharacter("&bnot;", "&#x02310;", "&#8976;", "Miscellaneous Technical", "So", "9573-2003-isotech", "Reversed Not Sign")
  val Arc = new HTMLCharacter("&profline;", "&#x02312;", "&#8978;", "Miscellaneous Technical", "So", "9573-2003-isotech", "Arc")
  val Segment = new HTMLCharacter("&profsurf;", "&#x02313;", "&#8979;", "Miscellaneous Technical", "So", "9573-2003-isotech", "Segment")
  val TelephoneRecorder = new HTMLCharacter("&telrec;", "&#x02315;", "&#8981;", "Miscellaneous Technical", "So", "9573-2003-isopub", "Telephone Recorder")
  val PositionIndicator = new HTMLCharacter("&target;", "&#x02316;", "&#8982;", "Miscellaneous Technical", "So", "9573-2003-isopub", "Position Indicator")
  val TopLeftCorner = new HTMLCharacter("&ulcorn;", "&#x0231C;", "&#8988;", "Miscellaneous Technical", "So", "9573-2003-isoamsc mmlalias", "Top Left Corner")
  val TopRightCorner = new HTMLCharacter("&urcorn;", "&#x0231D;", "&#8989;", "Miscellaneous Technical", "So", "9573-2003-isoamsc mmlalias", "Top Right Corner")
  val BottomLeftCorner = new HTMLCharacter("&dlcorn;", "&#x0231E;", "&#8990;", "Miscellaneous Technical", "So", "9573-2003-isoamsc mmlalias", "Bottom Left Corner")
  val BottomRightCorner = new HTMLCharacter("&drcorn;", "&#x0231F;", "&#8991;", "Miscellaneous Technical", "So", "9573-2003-isoamsc mmlalias", "Bottom Right Corner")
  val Frown = new HTMLCharacter("&frown;", "&#x02322;", "&#8994;", "Miscellaneous Technical", "So", "9573-2003-isoamsr", "Frown")
  val Smile = new HTMLCharacter("&smile;", "&#x02323;", "&#8995;", "Miscellaneous Technical", "So", "9573-2003-isoamsr", "Smile")
  val Cylindricity = new HTMLCharacter("&cylcty;", "&#x0232D;", "&#9005;", "Miscellaneous Technical", "So", "9573-2003-isotech", "Cylindricity")
  val AllAroundProfile = new HTMLCharacter("&profalar;", "&#x0232E;", "&#9006;", "Miscellaneous Technical", "So", "9573-2003-isotech", "All Around-Profile")
  val AplFunctionalSymbolIBeam = new HTMLCharacter("&topbot;", "&#x02336;", "&#9014;", "Miscellaneous Technical", "So", "9573-2003-isotech", "Apl Functional Symbol I-Beam")
  val AplFunctionalSymbolCircleStile = new HTMLCharacter("&ovbar;", "&#x0233D;", "&#9021;", "Miscellaneous Technical", "So", "9573-2003-isoamsb", "Apl Functional Symbol Circle Stile")
  val AplFunctionalSymbolSlashBar = new HTMLCharacter("&solbar;", "&#x0233F;", "&#9023;", "Miscellaneous Technical", "So", "9573-2003-isoamsn", "Apl Functional Symbol Slash Bar")
  val RightAngleWithDownwardsZigzagArrow = new HTMLCharacter("&angzarr;", "&#x0237C;", "&#9084;", "Miscellaneous Technical", "Sm", "9573-2003-isoamsa", "Right Angle With Downwards Zigzag Arrow")
  val UpperLeftOrLowerRightCurlyBracketSection = new HTMLCharacter("&lmoust;", "&#x023B0;", "&#9136;", "Miscellaneous Technical", "Sm", "9573-2003-isoamsc mmlalias", "Upper Left Or Lower Right Curly Bracket Section")
  val UpperRightOrLowerLeftCurlyBracketSection = new HTMLCharacter("&rmoust;", "&#x023B1;", "&#9137;", "Miscellaneous Technical", "Sm", "9573-2003-isoamsc mmlalias", "Upper Right Or Lower Left Curly Bracket Section")
  val TopSquareBracket = new HTMLCharacter("&tbrk;", "&#x023B4;", "&#9140;", "Miscellaneous Technical", "So", "9573-2003-isoamso mmlextra", "Top Square Bracket")
  val BottomSquareBracket = new HTMLCharacter("&bbrk;", "&#x023B5;", "&#9141;", "Miscellaneous Technical", "So", "9573-2003-isoamso mmlextra", "Bottom Square Bracket")
  val BottomSquareBracketOverTopSquareBracket = new HTMLCharacter("&bbrktbrk;", "&#x023B6;", "&#9142;", "Miscellaneous Technical", "So", "9573-2003-isoamso", "Bottom Square Bracket Over Top Square Bracket")
  val TopParenthesis = new HTMLCharacter("&OverParenthesis;", "&#x023DC;", "&#9180;", "Miscellaneous Technical", "Sm", "mmlextra", "Top Parenthesis")
  val BottomParenthesis = new HTMLCharacter("&UnderParenthesis;", "&#x023DD;", "&#9181;", "Miscellaneous Technical", "Sm", "mmlextra", "Bottom Parenthesis")
  val TopCurlyBracket = new HTMLCharacter("&OverBrace;", "&#x023DE;", "&#9182;", "Miscellaneous Technical", "Sm", "mmlextra", "Top Curly Bracket")
  val BottomCurlyBracket = new HTMLCharacter("&UnderBrace;", "&#x023DF;", "&#9183;", "Miscellaneous Technical", "Sm", "mmlextra", "Bottom Curly Bracket")
  val WhiteTrapezium = new HTMLCharacter("&trpezium;", "&#x023E2;", "&#9186;", "Miscellaneous Technical", "So", "9573-2003-isoamso", "White Trapezium")
  val ElectricalIntersection = new HTMLCharacter("&elinters;", "&#x023E7;", "&#9191;", "Miscellaneous Technical", "So", "9573-2003-isotech", "Electrical Intersection")
  val OpenBox = new HTMLCharacter("&blank;", "&#x02423;", "&#9251;", "Control Pictures", "So", "9573-2003-isopub", "Open Box")
  val CircledLatinCapitalLetterS = new HTMLCharacter("&oS;", "&#x024C8;", "&#9416;", "Enclosed Alphanumerics", "So", "9573-2003-isoamso mmlalias", "Circled Latin Capital Letter S")
  val BoxDrawingsLightHorizontal = new HTMLCharacter("&boxh;", "&#x02500;", "&#9472;", "Box Drawing", "So", "9573-2003-isobox mmlextra", "Box Drawings Light Horizontal")
  val BoxDrawingsLightVertical = new HTMLCharacter("&boxv;", "&#x02502;", "&#9474;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Vertical")
  val BoxDrawingsLightDownAndRight = new HTMLCharacter("&boxdr;", "&#x0250C;", "&#9484;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Down And Right")
  val BoxDrawingsLightDownAndLeft = new HTMLCharacter("&boxdl;", "&#x02510;", "&#9488;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Down And Left")
  val BoxDrawingsLightUpAndRight = new HTMLCharacter("&boxur;", "&#x02514;", "&#9492;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Up And Right")
  val BoxDrawingsLightUpAndLeft = new HTMLCharacter("&boxul;", "&#x02518;", "&#9496;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Up And Left")
  val BoxDrawingsLightVerticalAndRight = new HTMLCharacter("&boxvr;", "&#x0251C;", "&#9500;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Vertical And Right")
  val BoxDrawingsLightVerticalAndLeft = new HTMLCharacter("&boxvl;", "&#x02524;", "&#9508;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Vertical And Left")
  val BoxDrawingsLightDownAndHorizontal = new HTMLCharacter("&boxhd;", "&#x0252C;", "&#9516;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Down And Horizontal")
  val BoxDrawingsLightUpAndHorizontal = new HTMLCharacter("&boxhu;", "&#x02534;", "&#9524;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Up And Horizontal")
  val BoxDrawingsLightVerticalAndHorizontal = new HTMLCharacter("&boxvh;", "&#x0253C;", "&#9532;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Light Vertical And Horizontal")
  val BoxDrawingsDoubleHorizontal = new HTMLCharacter("&boxH;", "&#x02550;", "&#9552;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Horizontal")
  val BoxDrawingsDoubleVertical = new HTMLCharacter("&boxV;", "&#x02551;", "&#9553;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Vertical")
  val BoxDrawingsDownSingleAndRightDouble = new HTMLCharacter("&boxdR;", "&#x02552;", "&#9554;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Down Single And Right Double")
  val BoxDrawingsDownDoubleAndRightSingle = new HTMLCharacter("&boxDr;", "&#x02553;", "&#9555;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Down Double And Right Single")
  val BoxDrawingsDoubleDownAndRight = new HTMLCharacter("&boxDR;", "&#x02554;", "&#9556;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Down And Right")
  val BoxDrawingsDownSingleAndLeftDouble = new HTMLCharacter("&boxdL;", "&#x02555;", "&#9557;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Down Single And Left Double")
  val BoxDrawingsDownDoubleAndLeftSingle = new HTMLCharacter("&boxDl;", "&#x02556;", "&#9558;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Down Double And Left Single")
  val BoxDrawingsDoubleDownAndLeft = new HTMLCharacter("&boxDL;", "&#x02557;", "&#9559;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Down And Left")
  val BoxDrawingsUpSingleAndRightDouble = new HTMLCharacter("&boxuR;", "&#x02558;", "&#9560;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Up Single And Right Double")
  val BoxDrawingsUpDoubleAndRightSingle = new HTMLCharacter("&boxUr;", "&#x02559;", "&#9561;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Up Double And Right Single")
  val BoxDrawingsDoubleUpAndRight = new HTMLCharacter("&boxUR;", "&#x0255A;", "&#9562;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Up And Right")
  val BoxDrawingsUpSingleAndLeftDouble = new HTMLCharacter("&boxuL;", "&#x0255B;", "&#9563;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Up Single And Left Double")
  val BoxDrawingsUpDoubleAndLeftSingle = new HTMLCharacter("&boxUl;", "&#x0255C;", "&#9564;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Up Double And Left Single")
  val BoxDrawingsDoubleUpAndLeft = new HTMLCharacter("&boxUL;", "&#x0255D;", "&#9565;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Up And Left")
  val BoxDrawingsVerticalSingleAndRightDouble = new HTMLCharacter("&boxvR;", "&#x0255E;", "&#9566;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Vertical Single And Right Double")
  val BoxDrawingsVerticalDoubleAndRightSingle = new HTMLCharacter("&boxVr;", "&#x0255F;", "&#9567;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Vertical Double And Right Single")
  val BoxDrawingsDoubleVerticalAndRight = new HTMLCharacter("&boxVR;", "&#x02560;", "&#9568;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Vertical And Right")
  val BoxDrawingsVerticalSingleAndLeftDouble = new HTMLCharacter("&boxvL;", "&#x02561;", "&#9569;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Vertical Single And Left Double")
  val BoxDrawingsVerticalDoubleAndLeftSingle = new HTMLCharacter("&boxVl;", "&#x02562;", "&#9570;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Vertical Double And Left Single")
  val BoxDrawingsDoubleVerticalAndLeft = new HTMLCharacter("&boxVL;", "&#x02563;", "&#9571;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Vertical And Left")
  val BoxDrawingsDownSingleAndHorizontalDouble = new HTMLCharacter("&boxHd;", "&#x02564;", "&#9572;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Down Single And Horizontal Double")
  val BoxDrawingsDownDoubleAndHorizontalSingle = new HTMLCharacter("&boxhD;", "&#x02565;", "&#9573;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Down Double And Horizontal Single")
  val BoxDrawingsDoubleDownAndHorizontal = new HTMLCharacter("&boxHD;", "&#x02566;", "&#9574;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Down And Horizontal")
  val BoxDrawingsUpSingleAndHorizontalDouble = new HTMLCharacter("&boxHu;", "&#x02567;", "&#9575;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Up Single And Horizontal Double")
  val BoxDrawingsUpDoubleAndHorizontalSingle = new HTMLCharacter("&boxhU;", "&#x02568;", "&#9576;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Up Double And Horizontal Single")
  val BoxDrawingsDoubleUpAndHorizontal = new HTMLCharacter("&boxHU;", "&#x02569;", "&#9577;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Up And Horizontal")
  val BoxDrawingsVerticalSingleAndHorizontalDouble = new HTMLCharacter("&boxvH;", "&#x0256A;", "&#9578;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Vertical Single And Horizontal Double")
  val BoxDrawingsVerticalDoubleAndHorizontalSingle = new HTMLCharacter("&boxVh;", "&#x0256B;", "&#9579;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Vertical Double And Horizontal Single")
  val BoxDrawingsDoubleVerticalAndHorizontal = new HTMLCharacter("&boxVH;", "&#x0256C;", "&#9580;", "Box Drawing", "So", "9573-2003-isobox", "Box Drawings Double Vertical And Horizontal")
  val UpperHalfBlock = new HTMLCharacter("&uhblk;", "&#x02580;", "&#9600;", "Block Elements", "So", "9573-2003-isopub", "Upper Half Block")
  val LowerHalfBlock = new HTMLCharacter("&lhblk;", "&#x02584;", "&#9604;", "Block Elements", "So", "9573-2003-isopub", "Lower Half Block")
  val FullBlock = new HTMLCharacter("&block;", "&#x02588;", "&#9608;", "Block Elements", "So", "9573-2003-isopub", "Full Block")
  val LightShade = new HTMLCharacter("&blk14;", "&#x02591;", "&#9617;", "Block Elements", "So", "9573-2003-isopub", "Light Shade")
  val MediumShade = new HTMLCharacter("&blk12;", "&#x02592;", "&#9618;", "Block Elements", "So", "9573-2003-isopub", "Medium Shade")
  val DarkShade = new HTMLCharacter("&blk34;", "&#x02593;", "&#9619;", "Block Elements", "So", "9573-2003-isopub", "Dark Shade")
  val WhiteSquare = new HTMLCharacter("&squ;", "&#x025A1;", "&#9633;", "Geometric Shapes", "So", "9573-2003-isopub 9573-2003-isotech mmlalias", "White Square")
  val BlackSmallSquare = new HTMLCharacter("&squf;", "&#x025AA;", "&#9642;", "Geometric Shapes", "So", "9573-2003-isopub 9573-2003-isotech mmlalias mmlextra", "Black Small Square")
  val WhiteSmallSquare = new HTMLCharacter("&EmptyVerySmallSquare;", "&#x025AB;", "&#9643;", "Geometric Shapes", "So", "mmlextra", "White Small Square")
  val WhiteRectangle = new HTMLCharacter("&rect;", "&#x025AD;", "&#9645;", "Geometric Shapes", "So", "9573-2003-isopub", "White Rectangle")
  val BlackVerticalRectangle = new HTMLCharacter("&marker;", "&#x025AE;", "&#9646;", "Geometric Shapes", "So", "9573-2003-isopub", "Black Vertical Rectangle")
  val WhiteParallelogram = new HTMLCharacter("&fltns;", "&#x025B1;", "&#9649;", "Geometric Shapes", "So", "9573-2003-isotech", "White Parallelogram")
  val WhiteUpPointingTriangle = new HTMLCharacter("&xutri;", "&#x025B3;", "&#9651;", "Geometric Shapes", "So", "9573-2003-isoamsb mmlalias", "White Up-Pointing Triangle")
  val BlackUpPointingSmallTriangle = new HTMLCharacter("&utrif;", "&#x025B4;", "&#9652;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "Black Up-Pointing Small Triangle")
  val WhiteUpPointingSmallTriangle = new HTMLCharacter("&utri;", "&#x025B5;", "&#9653;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "White Up-Pointing Small Triangle")
  val BlackRightPointingSmallTriangle = new HTMLCharacter("&rtrif;", "&#x025B8;", "&#9656;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "Black Right-Pointing Small Triangle")
  val WhiteRightPointingSmallTriangle = new HTMLCharacter("&rtri;", "&#x025B9;", "&#9657;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "White Right-Pointing Small Triangle")
  val WhiteDownPointingTriangle = new HTMLCharacter("&xdtri;", "&#x025BD;", "&#9661;", "Geometric Shapes", "So", "9573-2003-isoamsb mmlalias", "White Down-Pointing Triangle")
  val BlackDownPointingSmallTriangle = new HTMLCharacter("&dtrif;", "&#x025BE;", "&#9662;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "Black Down-Pointing Small Triangle")
  val WhiteDownPointingSmallTriangle = new HTMLCharacter("&dtri;", "&#x025BF;", "&#9663;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "White Down-Pointing Small Triangle")
  val BlackLeftPointingSmallTriangle = new HTMLCharacter("&ltrif;", "&#x025C2;", "&#9666;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "Black Left-Pointing Small Triangle")
  val WhiteLeftPointingSmallTriangle = new HTMLCharacter("&ltri;", "&#x025C3;", "&#9667;", "Geometric Shapes", "So", "9573-2003-isopub mmlalias", "White Left-Pointing Small Triangle")
  val Lozenge = new HTMLCharacter("&loz;", "&#x025CA;", "&#9674;", "Geometric Shapes", "So", "xhtml1-symbol 9573-2003-isopub mmlalias", "Lozenge")
  val WhiteCircle = new HTMLCharacter("&cir;", "&#x025CB;", "&#9675;", "Geometric Shapes", "So", "9573-2003-isopub", "White Circle")
  val WhiteUpPointingTriangleWithDot = new HTMLCharacter("&tridot;", "&#x025EC;", "&#9708;", "Geometric Shapes", "So", "9573-2003-isoamsb", "White Up-Pointing Triangle With Dot")
  val LargeCircle = new HTMLCharacter("&xcirc;", "&#x025EF;", "&#9711;", "Geometric Shapes", "So", "9573-2003-isoamsb mmlalias", "Large Circle")
  val UpperLeftTriangle = new HTMLCharacter("&ultri;", "&#x025F8;", "&#9720;", "Geometric Shapes", "Sm", "9573-2003-isoamso", "Upper Left Triangle")
  val UpperRightTriangle = new HTMLCharacter("&urtri;", "&#x025F9;", "&#9721;", "Geometric Shapes", "Sm", "9573-2003-isoamso", "Upper Right Triangle")
  val LowerLeftTriangle = new HTMLCharacter("&lltri;", "&#x025FA;", "&#9722;", "Geometric Shapes", "Sm", "9573-2003-isoamso", "Lower Left Triangle")
  val WhiteMediumSquare = new HTMLCharacter("&EmptySmallSquare;", "&#x025FB;", "&#9723;", "Geometric Shapes", "Sm", "mmlextra", "White Medium Square")
  val BlackMediumSquare = new HTMLCharacter("&FilledSmallSquare;", "&#x025FC;", "&#9724;", "Geometric Shapes", "Sm", "mmlextra", "Black Medium Square")
  val BlackStar = new HTMLCharacter("&starf;", "&#x02605;", "&#9733;", "Miscellaneous Symbols", "So", "9573-2003-isopub mmlalias", "Black Star")
  val WhiteStar = new HTMLCharacter("&star;", "&#x02606;", "&#9734;", "Miscellaneous Symbols", "So", "9573-2003-isopub", "White Star")
  val BlackTelephone = new HTMLCharacter("&phone;", "&#x0260E;", "&#9742;", "Miscellaneous Symbols", "So", "9573-2003-isopub", "Black Telephone")
  val FemaleSign = new HTMLCharacter("&female;", "&#x02640;", "&#9792;", "Miscellaneous Symbols", "So", "9573-2003-isopub", "Female Sign")
  val MaleSign = new HTMLCharacter("&male;", "&#x02642;", "&#9794;", "Miscellaneous Symbols", "So", "9573-2003-isopub", "Male Sign")
  val BlackSpadeSuit = new HTMLCharacter("&spades;", "&#x02660;", "&#9824;", "Miscellaneous Symbols", "So", "9573-2003-isopub xhtml1-symbol mmlalias", "Black Spade Suit")
  val BlackClubSuit = new HTMLCharacter("&clubs;", "&#x02663;", "&#9827;", "Miscellaneous Symbols", "So", "9573-2003-isopub mmlalias xhtml1-symbol", "Black Club Suit")
  val BlackHeartSuit = new HTMLCharacter("&hearts;", "&#x02665;", "&#9829;", "Miscellaneous Symbols", "So", "9573-2003-isopub mmlalias xhtml1-symbol", "Black Heart Suit")
  val BlackDiamondSuit = new HTMLCharacter("&diams;", "&#x02666;", "&#9830;", "Miscellaneous Symbols", "So", "9573-2003-isopub xhtml1-symbol mmlalias", "Black Diamond Suit")
  val EighthNote = new HTMLCharacter("&sung;", "&#x0266A;", "&#9834;", "Miscellaneous Symbols", "So", "9573-2003-isonum", "Eighth Note")
  val MusicFlatSign = new HTMLCharacter("&flat;", "&#x0266D;", "&#9837;", "Miscellaneous Symbols", "So", "9573-2003-isopub", "Music Flat Sign")
  val MusicNaturalSign = new HTMLCharacter("&natur;", "&#x0266E;", "&#9838;", "Miscellaneous Symbols", "So", "9573-2003-isopub mmlalias", "Music Natural Sign")
  val MusicSharpSign = new HTMLCharacter("&sharp;", "&#x0266F;", "&#9839;", "Miscellaneous Symbols", "Sm", "9573-2003-isopub", "Music Sharp Sign")
  val CheckMark = new HTMLCharacter("&check;", "&#x02713;", "&#10003;", "Dingbats", "So", "9573-2003-isopub mmlalias", "Check Mark")
  val BallotX = new HTMLCharacter("&cross;", "&#x02717;", "&#10007;", "Dingbats", "So", "9573-2003-isopub", "Ballot X")
  val MalteseCross = new HTMLCharacter("&malt;", "&#x02720;", "&#10016;", "Dingbats", "So", "9573-2003-isopub mmlalias", "Maltese Cross")
  val SixPointedBlackStar = new HTMLCharacter("&sext;", "&#x02736;", "&#10038;", "Dingbats", "So", "9573-2003-isopub", "Six Pointed Black Star")
  val LightVerticalBar = new HTMLCharacter("&VerticalSeparator;", "&#x02758;", "&#10072;", "Dingbats", "So", "mmlextra", "Light Vertical Bar")
  val LightLeftTortoiseShellBracketOrnament = new HTMLCharacter("&lbbrk;", "&#x02772;", "&#10098;", "Dingbats", "Ps", "9573-2003-isotech", "Light Left Tortoise Shell Bracket Ornament")
  val LightRightTortoiseShellBracketOrnament = new HTMLCharacter("&rbbrk;", "&#x02773;", "&#10099;", "Dingbats", "Pe", "9573-2003-isotech", "Light Right Tortoise Shell Bracket Ornament")
  val MathematicalLeftWhiteSquareBracket = new HTMLCharacter("&lobrk;", "&#x027E6;", "&#10214;", "Miscellaneous Mathematical Symbols-A", "Ps", "9573-2003-isotech mmlalias", "Mathematical Left White Square Bracket")
  val MathematicalRightWhiteSquareBracket = new HTMLCharacter("&robrk;", "&#x027E7;", "&#10215;", "Miscellaneous Mathematical Symbols-A", "Pe", "9573-2003-isotech mmlalias", "Mathematical Right White Square Bracket")
  val MathematicalLeftAngleBracket = new HTMLCharacter("&lang;", "&#x027E8;", "&#10216;", "Miscellaneous Mathematical Symbols-A", "Ps", "xhtml1-symbol 9573-2003-isotech mmlalias", "Mathematical Left Angle Bracket")
  val MathematicalRightAngleBracket = new HTMLCharacter("&rang;", "&#x027E9;", "&#10217;", "Miscellaneous Mathematical Symbols-A", "Pe", "xhtml1-symbol 9573-2003-isotech mmlalias", "Mathematical Right Angle Bracket")
  val MathematicalLeftDoubleAngleBracket = new HTMLCharacter("&Lang;", "&#x027EA;", "&#10218;", "Miscellaneous Mathematical Symbols-A", "Ps", "9573-2003-isotech", "Mathematical Left Double Angle Bracket")
  val MathematicalRightDoubleAngleBracket = new HTMLCharacter("&Rang;", "&#x027EB;", "&#10219;", "Miscellaneous Mathematical Symbols-A", "Pe", "9573-2003-isotech", "Mathematical Right Double Angle Bracket")
  val MathematicalLeftWhiteTortoiseShellBracket = new HTMLCharacter("&loang;", "&#x027EC;", "&#10220;", "Miscellaneous Mathematical Symbols-A", "Ps", "9573-2003-isotech", "Mathematical Left White Tortoise Shell Bracket")
  val MathematicalRightWhiteTortoiseShellBracket = new HTMLCharacter("&roang;", "&#x027ED;", "&#10221;", "Miscellaneous Mathematical Symbols-A", "Pe", "9573-2003-isotech", "Mathematical Right White Tortoise Shell Bracket")
  val LongLeftwardsArrow = new HTMLCharacter("&xlarr;", "&#x027F5;", "&#10229;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Leftwards Arrow")
  val LongRightwardsArrow = new HTMLCharacter("&xrarr;", "&#x027F6;", "&#10230;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Rightwards Arrow")
  val LongLeftRightArrow = new HTMLCharacter("&xharr;", "&#x027F7;", "&#10231;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Left Right Arrow")
  val LongLeftwardsDoubleArrow = new HTMLCharacter("&xlArr;", "&#x027F8;", "&#10232;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Leftwards Double Arrow")
  val LongRightwardsDoubleArrow = new HTMLCharacter("&xrArr;", "&#x027F9;", "&#10233;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Rightwards Double Arrow")
  val LongLeftRightDoubleArrow = new HTMLCharacter("&xhArr;", "&#x027FA;", "&#10234;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Left Right Double Arrow")
  val LongRightwardsArrowFromBar = new HTMLCharacter("&xmap;", "&#x027FC;", "&#10236;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa mmlalias", "Long Rightwards Arrow From Bar")
  val LongRightwardsSquiggleArrow = new HTMLCharacter("&dzigrarr;", "&#x027FF;", "&#10239;", "Supplemental Arrows-A", "Sm", "9573-2003-isoamsa", "Long Rightwards Squiggle Arrow")
  val LeftwardsDoubleArrowWithVerticalStroke = new HTMLCharacter("&nvlArr;", "&#x02902;", "&#10498;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Double Arrow With Vertical Stroke")
  val RightwardsDoubleArrowWithVerticalStroke = new HTMLCharacter("&nvrArr;", "&#x02903;", "&#10499;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Double Arrow With Vertical Stroke")
  val LeftRightDoubleArrowWithVerticalStroke = new HTMLCharacter("&nvHarr;", "&#x02904;", "&#10500;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Left Right Double Arrow With Vertical Stroke")
  val RightwardsTwoHeadedArrowFromBar = new HTMLCharacter("&Map;", "&#x02905;", "&#10501;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Two-Headed Arrow From Bar")
  val LeftwardsDoubleDashArrow = new HTMLCharacter("&lbarr;", "&#x0290C;", "&#10508;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Double Dash Arrow")
  val RightwardsDoubleDashArrow = new HTMLCharacter("&rbarr;", "&#x0290D;", "&#10509;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Double Dash Arrow")
  val LeftwardsTripleDashArrow = new HTMLCharacter("&lBarr;", "&#x0290E;", "&#10510;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Triple Dash Arrow")
  val RightwardsTripleDashArrow = new HTMLCharacter("&rBarr;", "&#x0290F;", "&#10511;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Triple Dash Arrow")
  val RightwardsTwoHeadedTripleDashArrow = new HTMLCharacter("&RBarr;", "&#x02910;", "&#10512;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "Rightwards Two-Headed Triple Dash Arrow")
  val RightwardsArrowWithDottedStem = new HTMLCharacter("&DDotrahd;", "&#x02911;", "&#10513;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow With Dotted Stem")
  val UpwardsArrowToBar = new HTMLCharacter("&UpArrowBar;", "&#x02912;", "&#10514;", "Supplemental Arrows-B", "Sm", "mmlextra", "Upwards Arrow To Bar")
  val DownwardsArrowToBar = new HTMLCharacter("&DownArrowBar;", "&#x02913;", "&#10515;", "Supplemental Arrows-B", "Sm", "mmlextra", "Downwards Arrow To Bar")
  val RightwardsTwoHeadedArrowWithTail = new HTMLCharacter("&Rarrtl;", "&#x02916;", "&#10518;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Two-Headed Arrow With Tail")
  val LeftwardsArrowTail = new HTMLCharacter("&latail;", "&#x02919;", "&#10521;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Arrow-Tail")
  val RightwardsArrowTail = new HTMLCharacter("&ratail;", "&#x0291A;", "&#10522;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow-Tail")
  val LeftwardsDoubleArrowTail = new HTMLCharacter("&lAtail;", "&#x0291B;", "&#10523;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Double Arrow-Tail")
  val RightwardsDoubleArrowTail = new HTMLCharacter("&rAtail;", "&#x0291C;", "&#10524;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Double Arrow-Tail")
  val LeftwardsArrowToBlackDiamond = new HTMLCharacter("&larrfs;", "&#x0291D;", "&#10525;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Arrow To Black Diamond")
  val RightwardsArrowToBlackDiamond = new HTMLCharacter("&rarrfs;", "&#x0291E;", "&#10526;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow To Black Diamond")
  val LeftwardsArrowFromBarToBlackDiamond = new HTMLCharacter("&larrbfs;", "&#x0291F;", "&#10527;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Arrow From Bar To Black Diamond")
  val RightwardsArrowFromBarToBlackDiamond = new HTMLCharacter("&rarrbfs;", "&#x02920;", "&#10528;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow From Bar To Black Diamond")
  val NorthWestArrowWithHook = new HTMLCharacter("&nwarhk;", "&#x02923;", "&#10531;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "North West Arrow With Hook")
  val NorthEastArrowWithHook = new HTMLCharacter("&nearhk;", "&#x02924;", "&#10532;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "North East Arrow With Hook")
  val SouthEastArrowWithHook = new HTMLCharacter("&searhk;", "&#x02925;", "&#10533;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "South East Arrow With Hook")
  val SouthWestArrowWithHook = new HTMLCharacter("&swarhk;", "&#x02926;", "&#10534;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "South West Arrow With Hook")
  val NorthWestArrowAndNorthEastArrow = new HTMLCharacter("&nwnear;", "&#x02927;", "&#10535;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "North West Arrow And North East Arrow")
  val NorthEastArrowAndSouthEastArrow = new HTMLCharacter("&nesear;", "&#x02928;", "&#10536;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "North East Arrow And South East Arrow")
  val SouthEastArrowAndSouthWestArrow = new HTMLCharacter("&seswar;", "&#x02929;", "&#10537;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "South East Arrow And South West Arrow")
  val SouthWestArrowAndNorthWestArrow = new HTMLCharacter("&swnwar;", "&#x0292A;", "&#10538;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "South West Arrow And North West Arrow")
  val WaveArrowPointingDirectlyRight = new HTMLCharacter("&rarrc;", "&#x02933;", "&#10547;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Wave Arrow Pointing Directly Right")
  val ArrowPointingRightwardsThenCurvingDownwards = new HTMLCharacter("&cudarrr;", "&#x02935;", "&#10549;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Arrow Pointing Rightwards Then Curving Downwards")
  val ArrowPointingDownwardsThenCurvingLeftwards = new HTMLCharacter("&ldca;", "&#x02936;", "&#10550;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Arrow Pointing Downwards Then Curving Leftwards")
  val ArrowPointingDownwardsThenCurvingRightwards = new HTMLCharacter("&rdca;", "&#x02937;", "&#10551;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Arrow Pointing Downwards Then Curving Rightwards")
  val RightSideArcClockwiseArrow = new HTMLCharacter("&cudarrl;", "&#x02938;", "&#10552;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Right-Side Arc Clockwise Arrow")
  val LeftSideArcAnticlockwiseArrow = new HTMLCharacter("&larrpl;", "&#x02939;", "&#10553;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Left-Side Arc Anticlockwise Arrow")
  val TopArcClockwiseArrowWithMinus = new HTMLCharacter("&curarrm;", "&#x0293C;", "&#10556;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Top Arc Clockwise Arrow With Minus")
  val TopArcAnticlockwiseArrowWithPlus = new HTMLCharacter("&cularrp;", "&#x0293D;", "&#10557;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Top Arc Anticlockwise Arrow With Plus")
  val RightwardsArrowWithPlusBelow = new HTMLCharacter("&rarrpl;", "&#x02945;", "&#10565;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow With Plus Below")
  val LeftRightArrowThroughSmallCircle = new HTMLCharacter("&harrcir;", "&#x02948;", "&#10568;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Left Right Arrow Through Small Circle")
  val UpwardsTwoHeadedArrowFromSmallCircle = new HTMLCharacter("&Uarrocir;", "&#x02949;", "&#10569;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Upwards Two-Headed Arrow From Small Circle")
  val LeftBarbUpRightBarbDownHarpoon = new HTMLCharacter("&lurdshar;", "&#x0294A;", "&#10570;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Left Barb Up Right Barb Down Harpoon")
  val LeftBarbDownRightBarbUpHarpoon = new HTMLCharacter("&ldrushar;", "&#x0294B;", "&#10571;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Left Barb Down Right Barb Up Harpoon")
  val LeftBarbUpRightBarbUpHarpoon = new HTMLCharacter("&LeftRightVector;", "&#x0294E;", "&#10574;", "Supplemental Arrows-B", "Sm", "mmlextra", "Left Barb Up Right Barb Up Harpoon")
  val UpBarbRightDownBarbRightHarpoon = new HTMLCharacter("&RightUpDownVector;", "&#x0294F;", "&#10575;", "Supplemental Arrows-B", "Sm", "mmlextra", "Up Barb Right Down Barb Right Harpoon")
  val LeftBarbDownRightBarbDownHarpoon = new HTMLCharacter("&DownLeftRightVector;", "&#x02950;", "&#10576;", "Supplemental Arrows-B", "Sm", "mmlextra", "Left Barb Down Right Barb Down Harpoon")
  val UpBarbLeftDownBarbLeftHarpoon = new HTMLCharacter("&LeftUpDownVector;", "&#x02951;", "&#10577;", "Supplemental Arrows-B", "Sm", "mmlextra", "Up Barb Left Down Barb Left Harpoon")
  val LeftwardsHarpoonWithBarbUpToBar = new HTMLCharacter("&LeftVectorBar;", "&#x02952;", "&#10578;", "Supplemental Arrows-B", "Sm", "mmlextra", "Leftwards Harpoon With Barb Up To Bar")
  val RightwardsHarpoonWithBarbUpToBar = new HTMLCharacter("&RightVectorBar;", "&#x02953;", "&#10579;", "Supplemental Arrows-B", "Sm", "mmlextra", "Rightwards Harpoon With Barb Up To Bar")
  val UpwardsHarpoonWithBarbRightToBar = new HTMLCharacter("&RightUpVectorBar;", "&#x02954;", "&#10580;", "Supplemental Arrows-B", "Sm", "mmlextra", "Upwards Harpoon With Barb Right To Bar")
  val DownwardsHarpoonWithBarbRightToBar = new HTMLCharacter("&RightDownVectorBar;", "&#x02955;", "&#10581;", "Supplemental Arrows-B", "Sm", "mmlextra", "Downwards Harpoon With Barb Right To Bar")
  val LeftwardsHarpoonWithBarbDownToBar = new HTMLCharacter("&DownLeftVectorBar;", "&#x02956;", "&#10582;", "Supplemental Arrows-B", "Sm", "mmlextra", "Leftwards Harpoon With Barb Down To Bar")
  val RightwardsHarpoonWithBarbDownToBar = new HTMLCharacter("&DownRightVectorBar;", "&#x02957;", "&#10583;", "Supplemental Arrows-B", "Sm", "mmlextra", "Rightwards Harpoon With Barb Down To Bar")
  val UpwardsHarpoonWithBarbLeftToBar = new HTMLCharacter("&LeftUpVectorBar;", "&#x02958;", "&#10584;", "Supplemental Arrows-B", "Sm", "mmlextra", "Upwards Harpoon With Barb Left To Bar")
  val DownwardsHarpoonWithBarbLeftToBar = new HTMLCharacter("&LeftDownVectorBar;", "&#x02959;", "&#10585;", "Supplemental Arrows-B", "Sm", "mmlextra", "Downwards Harpoon With Barb Left To Bar")
  val LeftwardsHarpoonWithBarbUpFromBar = new HTMLCharacter("&LeftTeeVector;", "&#x0295A;", "&#10586;", "Supplemental Arrows-B", "Sm", "mmlextra", "Leftwards Harpoon With Barb Up From Bar")
  val RightwardsHarpoonWithBarbUpFromBar = new HTMLCharacter("&RightTeeVector;", "&#x0295B;", "&#10587;", "Supplemental Arrows-B", "Sm", "mmlextra", "Rightwards Harpoon With Barb Up From Bar")
  val UpwardsHarpoonWithBarbRightFromBar = new HTMLCharacter("&RightUpTeeVector;", "&#x0295C;", "&#10588;", "Supplemental Arrows-B", "Sm", "mmlextra", "Upwards Harpoon With Barb Right From Bar")
  val DownwardsHarpoonWithBarbRightFromBar = new HTMLCharacter("&RightDownTeeVector;", "&#x0295D;", "&#10589;", "Supplemental Arrows-B", "Sm", "mmlextra", "Downwards Harpoon With Barb Right From Bar")
  val LeftwardsHarpoonWithBarbDownFromBar = new HTMLCharacter("&DownLeftTeeVector;", "&#x0295E;", "&#10590;", "Supplemental Arrows-B", "Sm", "mmlextra", "Leftwards Harpoon With Barb Down From Bar")
  val RightwardsHarpoonWithBarbDownFromBar = new HTMLCharacter("&DownRightTeeVector;", "&#x0295F;", "&#10591;", "Supplemental Arrows-B", "Sm", "mmlextra", "Rightwards Harpoon With Barb Down From Bar")
  val UpwardsHarpoonWithBarbLeftFromBar = new HTMLCharacter("&LeftUpTeeVector;", "&#x02960;", "&#10592;", "Supplemental Arrows-B", "Sm", "mmlextra", "Upwards Harpoon With Barb Left From Bar")
  val DownwardsHarpoonWithBarbLeftFromBar = new HTMLCharacter("&LeftDownTeeVector;", "&#x02961;", "&#10593;", "Supplemental Arrows-B", "Sm", "mmlextra", "Downwards Harpoon With Barb Left From Bar")
  val LeftwardsHarpoonWithBarbUpAboveLeftwardsHarpoonWithBarbDown = new HTMLCharacter("&lHar;", "&#x02962;", "&#10594;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Harpoon With Barb Up Above Leftwards Harpoon With Barb Down")
  val UpwardsHarpoonWithBarbLeftBesideUpwardsHarpoonWithBarbRight = new HTMLCharacter("&uHar;", "&#x02963;", "&#10595;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Upwards Harpoon With Barb Left Beside Upwards Harpoon With Barb Right")
  val RightwardsHarpoonWithBarbUpAboveRightwardsHarpoonWithBarbDown = new HTMLCharacter("&rHar;", "&#x02964;", "&#10596;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Harpoon With Barb Up Above Rightwards Harpoon With Barb Down")
  val DownwardsHarpoonWithBarbLeftBesideDownwardsHarpoonWithBarbRight = new HTMLCharacter("&dHar;", "&#x02965;", "&#10597;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Downwards Harpoon With Barb Left Beside Downwards Harpoon With Barb Right")
  val LeftwardsHarpoonWithBarbUpAboveRightwardsHarpoonWithBarbUp = new HTMLCharacter("&luruhar;", "&#x02966;", "&#10598;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Harpoon With Barb Up Above Rightwards Harpoon With Barb Up")
  val LeftwardsHarpoonWithBarbDownAboveRightwardsHarpoonWithBarbDown = new HTMLCharacter("&ldrdhar;", "&#x02967;", "&#10599;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Harpoon With Barb Down Above Rightwards Harpoon With Barb Down")
  val RightwardsHarpoonWithBarbUpAboveLeftwardsHarpoonWithBarbUp = new HTMLCharacter("&ruluhar;", "&#x02968;", "&#10600;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Harpoon With Barb Up Above Leftwards Harpoon With Barb Up")
  val RightwardsHarpoonWithBarbDownAboveLeftwardsHarpoonWithBarbDown = new HTMLCharacter("&rdldhar;", "&#x02969;", "&#10601;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Harpoon With Barb Down Above Leftwards Harpoon With Barb Down")
  val LeftwardsHarpoonWithBarbUpAboveLongDash = new HTMLCharacter("&lharul;", "&#x0296A;", "&#10602;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Harpoon With Barb Up Above Long Dash")
  val LeftwardsHarpoonWithBarbDownBelowLongDash = new HTMLCharacter("&llhard;", "&#x0296B;", "&#10603;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Harpoon With Barb Down Below Long Dash")
  val RightwardsHarpoonWithBarbUpAboveLongDash = new HTMLCharacter("&rharul;", "&#x0296C;", "&#10604;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Harpoon With Barb Up Above Long Dash")
  val RightwardsHarpoonWithBarbDownBelowLongDash = new HTMLCharacter("&lrhard;", "&#x0296D;", "&#10605;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Harpoon With Barb Down Below Long Dash")
  val UpwardsHarpoonWithBarbLeftBesideDownwardsHarpoonWithBarbRight = new HTMLCharacter("&udhar;", "&#x0296E;", "&#10606;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "Upwards Harpoon With Barb Left Beside Downwards Harpoon With Barb Right")
  val DownwardsHarpoonWithBarbLeftBesideUpwardsHarpoonWithBarbRight = new HTMLCharacter("&duhar;", "&#x0296F;", "&#10607;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa mmlalias", "Downwards Harpoon With Barb Left Beside Upwards Harpoon With Barb Right")
  val RightDoubleArrowWithRoundedHead = new HTMLCharacter("&RoundImplies;", "&#x02970;", "&#10608;", "Supplemental Arrows-B", "Sm", "mmlextra", "Right Double Arrow With Rounded Head")
  val EqualsSignAboveRightwardsArrow = new HTMLCharacter("&erarr;", "&#x02971;", "&#10609;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Equals Sign Above Rightwards Arrow")
  val TildeOperatorAboveRightwardsArrow = new HTMLCharacter("&simrarr;", "&#x02972;", "&#10610;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Tilde Operator Above Rightwards Arrow")
  val LeftwardsArrowAboveTildeOperator = new HTMLCharacter("&larrsim;", "&#x02973;", "&#10611;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Leftwards Arrow Above Tilde Operator")
  val RightwardsArrowAboveTildeOperator = new HTMLCharacter("&rarrsim;", "&#x02974;", "&#10612;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow Above Tilde Operator")
  val RightwardsArrowAboveAlmostEqualTo = new HTMLCharacter("&rarrap;", "&#x02975;", "&#10613;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Rightwards Arrow Above Almost Equal To")
  val LessThanAboveLeftwardsArrow = new HTMLCharacter("&ltlarr;", "&#x02976;", "&#10614;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsr", "Less-Than Above Leftwards Arrow")
  val GreaterThanAboveRightwardsArrow = new HTMLCharacter("&gtrarr;", "&#x02978;", "&#10616;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsr", "Greater-Than Above Rightwards Arrow")
  val SubsetAboveRightwardsArrow = new HTMLCharacter("&subrarr;", "&#x02979;", "&#10617;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsr", "Subset Above Rightwards Arrow")
  val SupersetAboveLeftwardsArrow = new HTMLCharacter("&suplarr;", "&#x0297B;", "&#10619;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsr", "Superset Above Leftwards Arrow")
  val LeftFishTail = new HTMLCharacter("&lfisht;", "&#x0297C;", "&#10620;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Left Fish Tail")
  val RightFishTail = new HTMLCharacter("&rfisht;", "&#x0297D;", "&#10621;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Right Fish Tail")
  val UpFishTail = new HTMLCharacter("&ufisht;", "&#x0297E;", "&#10622;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Up Fish Tail")
  val DownFishTail = new HTMLCharacter("&dfisht;", "&#x0297F;", "&#10623;", "Supplemental Arrows-B", "Sm", "9573-2003-isoamsa", "Down Fish Tail")
  val LeftWhiteParenthesis = new HTMLCharacter("&lopar;", "&#x02985;", "&#10629;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isotech", "Left White Parenthesis")
  val RightWhiteParenthesis = new HTMLCharacter("&ropar;", "&#x02986;", "&#10630;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isotech", "Right White Parenthesis")
  val LeftSquareBracketWithUnderbar = new HTMLCharacter("&lbrke;", "&#x0298B;", "&#10635;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsc", "Left Square Bracket With Underbar")
  val RightSquareBracketWithUnderbar = new HTMLCharacter("&rbrke;", "&#x0298C;", "&#10636;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isoamsc", "Right Square Bracket With Underbar")
  val LeftSquareBracketWithTickInTopCorner = new HTMLCharacter("&lbrkslu;", "&#x0298D;", "&#10637;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsc", "Left Square Bracket With Tick In Top Corner")
  val RightSquareBracketWithTickInBottomCorner = new HTMLCharacter("&rbrksld;", "&#x0298E;", "&#10638;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isoamsc", "Right Square Bracket With Tick In Bottom Corner")
  val LeftSquareBracketWithTickInBottomCorner = new HTMLCharacter("&lbrksld;", "&#x0298F;", "&#10639;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsc", "Left Square Bracket With Tick In Bottom Corner")
  val RightSquareBracketWithTickInTopCorner = new HTMLCharacter("&rbrkslu;", "&#x02990;", "&#10640;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isoamsc", "Right Square Bracket With Tick In Top Corner")
  val LeftAngleBracketWithDot = new HTMLCharacter("&langd;", "&#x02991;", "&#10641;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsc", "Left Angle Bracket With Dot")
  val RightAngleBracketWithDot = new HTMLCharacter("&rangd;", "&#x02992;", "&#10642;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isoamsc", "Right Angle Bracket With Dot")
  val LeftArcLessThanBracket = new HTMLCharacter("&lparlt;", "&#x02993;", "&#10643;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsc", "Left Arc Less-Than Bracket")
  val RightArcGreaterThanBracket = new HTMLCharacter("&rpargt;", "&#x02994;", "&#10644;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isoamsc", "Right Arc Greater-Than Bracket")
  val DoubleLeftArcGreaterThanBracket = new HTMLCharacter("&gtlPar;", "&#x02995;", "&#10645;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsc", "Double Left Arc Greater-Than Bracket")
  val DoubleRightArcLessThanBracket = new HTMLCharacter("&ltrPar;", "&#x02996;", "&#10646;", "Miscellaneous Mathematical Symbols-B", "Pe", "9573-2003-isoamsc", "Double Right Arc Less-Than Bracket")
  val VerticalZigzagLine = new HTMLCharacter("&vzigzag;", "&#x0299A;", "&#10650;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Vertical Zigzag Line")
  val RightAngleVariantWithSquare = new HTMLCharacter("&vangrt;", "&#x0299C;", "&#10652;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Right Angle Variant With Square")
  val MeasuredRightAngleWithDot = new HTMLCharacter("&angrtvbd;", "&#x0299D;", "&#10653;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Right Angle With Dot")
  val AngleWithUnderbar = new HTMLCharacter("&ange;", "&#x029A4;", "&#10660;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Angle With Underbar")
  val ReversedAngleWithUnderbar = new HTMLCharacter("&range;", "&#x029A5;", "&#10661;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Reversed Angle With Underbar")
  val ObliqueAngleOpeningUp = new HTMLCharacter("&dwangle;", "&#x029A6;", "&#10662;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Oblique Angle Opening Up")
  val ObliqueAngleOpeningDown = new HTMLCharacter("&uwangle;", "&#x029A7;", "&#10663;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Oblique Angle Opening Down")
  val MeasuredAngleWithOpenArmEndingInArrowPointingUpAndRight = new HTMLCharacter("&angmsdaa;", "&#x029A8;", "&#10664;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Up And Right")
  val MeasuredAngleWithOpenArmEndingInArrowPointingUpAndLeft = new HTMLCharacter("&angmsdab;", "&#x029A9;", "&#10665;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Up And Left")
  val MeasuredAngleWithOpenArmEndingInArrowPointingDownAndRight = new HTMLCharacter("&angmsdac;", "&#x029AA;", "&#10666;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Down And Right")
  val MeasuredAngleWithOpenArmEndingInArrowPointingDownAndLeft = new HTMLCharacter("&angmsdad;", "&#x029AB;", "&#10667;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Down And Left")
  val MeasuredAngleWithOpenArmEndingInArrowPointingRightAndUp = new HTMLCharacter("&angmsdae;", "&#x029AC;", "&#10668;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Right And Up")
  val MeasuredAngleWithOpenArmEndingInArrowPointingLeftAndUp = new HTMLCharacter("&angmsdaf;", "&#x029AD;", "&#10669;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Left And Up")
  val MeasuredAngleWithOpenArmEndingInArrowPointingRightAndDown = new HTMLCharacter("&angmsdag;", "&#x029AE;", "&#10670;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Right And Down")
  val MeasuredAngleWithOpenArmEndingInArrowPointingLeftAndDown = new HTMLCharacter("&angmsdah;", "&#x029AF;", "&#10671;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Measured Angle With Open Arm Ending In Arrow Pointing Left And Down")
  val ReversedEmptySet = new HTMLCharacter("&bemptyv;", "&#x029B0;", "&#10672;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Reversed Empty Set")
  val EmptySetWithOverbar = new HTMLCharacter("&demptyv;", "&#x029B1;", "&#10673;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Empty Set With Overbar")
  val EmptySetWithSmallCircleAbove = new HTMLCharacter("&cemptyv;", "&#x029B2;", "&#10674;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Empty Set With Small Circle Above")
  val EmptySetWithRightArrowAbove = new HTMLCharacter("&raemptyv;", "&#x029B3;", "&#10675;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Empty Set With Right Arrow Above")
  val EmptySetWithLeftArrowAbove = new HTMLCharacter("&laemptyv;", "&#x029B4;", "&#10676;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Empty Set With Left Arrow Above")
  val CircleWithHorizontalBar = new HTMLCharacter("&ohbar;", "&#x029B5;", "&#10677;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circle With Horizontal Bar")
  val CircledVerticalBar = new HTMLCharacter("&omid;", "&#x029B6;", "&#10678;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Vertical Bar")
  val CircledParallel = new HTMLCharacter("&opar;", "&#x029B7;", "&#10679;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Parallel")
  val CircledPerpendicular = new HTMLCharacter("&operp;", "&#x029B9;", "&#10681;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Perpendicular")
  val CircleWithSuperimposedX = new HTMLCharacter("&olcross;", "&#x029BB;", "&#10683;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Circle With Superimposed X")
  val CircledAnticlockwiseRotatedDivisionSign = new HTMLCharacter("&odsold;", "&#x029BC;", "&#10684;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Anticlockwise-Rotated Division Sign")
  val CircledWhiteBullet = new HTMLCharacter("&olcir;", "&#x029BE;", "&#10686;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled White Bullet")
  val CircledBullet = new HTMLCharacter("&ofcir;", "&#x029BF;", "&#10687;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Bullet")
  val CircledLessThan = new HTMLCharacter("&olt;", "&#x029C0;", "&#10688;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Less-Than")
  val CircledGreaterThan = new HTMLCharacter("&ogt;", "&#x029C1;", "&#10689;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Circled Greater-Than")
  val CircleWithSmallCircleToTheRight = new HTMLCharacter("&cirscir;", "&#x029C2;", "&#10690;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Circle With Small Circle To The Right")
  val CircleWithTwoHorizontalStrokesToTheRight = new HTMLCharacter("&cirE;", "&#x029C3;", "&#10691;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Circle With Two Horizontal Strokes To The Right")
  val SquaredRisingDiagonalSlash = new HTMLCharacter("&solb;", "&#x029C4;", "&#10692;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Squared Rising Diagonal Slash")
  val SquaredFallingDiagonalSlash = new HTMLCharacter("&bsolb;", "&#x029C5;", "&#10693;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Squared Falling Diagonal Slash")
  val TwoJoinedSquares = new HTMLCharacter("&boxbox;", "&#x029C9;", "&#10697;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamso", "Two Joined Squares")
  val TriangleWithSerifsAtBottom = new HTMLCharacter("&trisb;", "&#x029CD;", "&#10701;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsb", "Triangle With Serifs At Bottom")
  val RightTriangleAboveLeftTriangle = new HTMLCharacter("&rtriltri;", "&#x029CE;", "&#10702;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isoamsr", "Right Triangle Above Left Triangle")
  val LeftTriangleBesideVerticalBar = new HTMLCharacter("&LeftTriangleBar;", "&#x029CF;", "&#10703;", "Miscellaneous Mathematical Symbols-B", "Sm", "mmlextra", "Left Triangle Beside Vertical Bar")
  val VerticalBarBesideRightTriangle = new HTMLCharacter("&RightTriangleBar;", "&#x029D0;", "&#10704;", "Miscellaneous Mathematical Symbols-B", "Sm", "mmlextra", "Vertical Bar Beside Right Triangle")
  val LeftDoubleWigglyFence = new HTMLCharacter("&race;", "&#x029DA;", "&#10714;", "Miscellaneous Mathematical Symbols-B", "Ps", "9573-2003-isoamsb", "Left Double Wiggly Fence")
  val IncompleteInfinity = new HTMLCharacter("&iinfin;", "&#x029DC;", "&#10716;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Incomplete Infinity")
  val TieOverInfinity = new HTMLCharacter("&infintie;", "&#x029DD;", "&#10717;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Tie Over Infinity")
  val InfinityNegatedWithVerticalBar = new HTMLCharacter("&nvinfin;", "&#x029DE;", "&#10718;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Infinity Negated With Vertical Bar")
  val EqualsSignAndSlantedParallel = new HTMLCharacter("&eparsl;", "&#x029E3;", "&#10723;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Equals Sign And Slanted Parallel")
  val EqualsSignAndSlantedParallelWithTildeAbove = new HTMLCharacter("&smeparsl;", "&#x029E4;", "&#10724;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Equals Sign And Slanted Parallel With Tilde Above")
  val IdenticalToAndSlantedParallel = new HTMLCharacter("&eqvparsl;", "&#x029E5;", "&#10725;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Identical To And Slanted Parallel")
  val BlackLozenge = new HTMLCharacter("&lozf;", "&#x029EB;", "&#10731;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isopub mmlalias", "Black Lozenge")
  val RuleDelayed = new HTMLCharacter("&RuleDelayed;", "&#x029F4;", "&#10740;", "Miscellaneous Mathematical Symbols-B", "Sm", "mmlextra", "Rule-Delayed")
  val SolidusWithOverbar = new HTMLCharacter("&dsol;", "&#x029F6;", "&#10742;", "Miscellaneous Mathematical Symbols-B", "Sm", "9573-2003-isotech", "Solidus With Overbar")
  val NAryCircledDotOperator = new HTMLCharacter("&xodot;", "&#x02A00;", "&#10752;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Circled Dot Operator")
  val NAryCircledPlusOperator = new HTMLCharacter("&xoplus;", "&#x02A01;", "&#10753;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Circled Plus Operator")
  val NAryCircledTimesOperator = new HTMLCharacter("&xotime;", "&#x02A02;", "&#10754;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Circled Times Operator")
  val NAryUnionOperatorWithPlus = new HTMLCharacter("&xuplus;", "&#x02A04;", "&#10756;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Union Operator With Plus")
  val NArySquareUnionOperator = new HTMLCharacter("&xsqcup;", "&#x02A06;", "&#10758;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "N-Ary Square Union Operator")
  val QuadrupleIntegralOperator = new HTMLCharacter("&qint;", "&#x02A0C;", "&#10764;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech mmlalias", "Quadruple Integral Operator")
  val FinitePartIntegral = new HTMLCharacter("&fpartint;", "&#x02A0D;", "&#10765;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Finite Part Integral")
  val CirculationFunction = new HTMLCharacter("&cirfnint;", "&#x02A10;", "&#10768;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Circulation Function")
  val AnticlockwiseIntegration = new HTMLCharacter("&awint;", "&#x02A11;", "&#10769;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Anticlockwise Integration")
  val LineIntegrationWithRectangularPathAroundPole = new HTMLCharacter("&rppolint;", "&#x02A12;", "&#10770;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Line Integration With Rectangular Path Around Pole")
  val LineIntegrationWithSemicircularPathAroundPole = new HTMLCharacter("&scpolint;", "&#x02A13;", "&#10771;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Line Integration With Semicircular Path Around Pole")
  val LineIntegrationNotIncludingThePole = new HTMLCharacter("&npolint;", "&#x02A14;", "&#10772;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Line Integration Not Including The Pole")
  val IntegralAroundAPointOperator = new HTMLCharacter("&pointint;", "&#x02A15;", "&#10773;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Integral Around A Point Operator")
  val QuaternionIntegralOperator = new HTMLCharacter("&quatint;", "&#x02A16;", "&#10774;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Quaternion Integral Operator")
  val IntegralWithLeftwardsArrowWithHook = new HTMLCharacter("&intlarhk;", "&#x02A17;", "&#10775;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Integral With Leftwards Arrow With Hook")
  val PlusSignWithSmallCircleAbove = new HTMLCharacter("&pluscir;", "&#x02A22;", "&#10786;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign With Small Circle Above")
  val PlusSignWithCircumflexAccentAbove = new HTMLCharacter("&plusacir;", "&#x02A23;", "&#10787;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign With Circumflex Accent Above")
  val PlusSignWithTildeAbove = new HTMLCharacter("&simplus;", "&#x02A24;", "&#10788;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign With Tilde Above")
  val PlusSignWithDotBelow = new HTMLCharacter("&plusdu;", "&#x02A25;", "&#10789;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign With Dot Below")
  val PlusSignWithTildeBelow = new HTMLCharacter("&plussim;", "&#x02A26;", "&#10790;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign With Tilde Below")
  val PlusSignWithSubscriptTwo = new HTMLCharacter("&plustwo;", "&#x02A27;", "&#10791;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign With Subscript Two")
  val MinusSignWithCommaAbove = new HTMLCharacter("&mcomma;", "&#x02A29;", "&#10793;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Minus Sign With Comma Above")
  val MinusSignWithDotBelow = new HTMLCharacter("&minusdu;", "&#x02A2A;", "&#10794;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Minus Sign With Dot Below")
  val PlusSignInLeftHalfCircle = new HTMLCharacter("&loplus;", "&#x02A2D;", "&#10797;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign In Left Half Circle")
  val PlusSignInRightHalfCircle = new HTMLCharacter("&roplus;", "&#x02A2E;", "&#10798;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign In Right Half Circle")
  val VectorOrCrossProduct = new HTMLCharacter("&Cross;", "&#x02A2F;", "&#10799;", "Supplemental Mathematical Operators", "Sm", "mmlextra", "Vector Or Cross Product")
  val MultiplicationSignWithDotAbove = new HTMLCharacter("&timesd;", "&#x02A30;", "&#10800;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiplication Sign With Dot Above")
  val MultiplicationSignWithUnderbar = new HTMLCharacter("&timesbar;", "&#x02A31;", "&#10801;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiplication Sign With Underbar")
  val SmashProduct = new HTMLCharacter("&smashp;", "&#x02A33;", "&#10803;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Smash Product")
  val MultiplicationSignInLeftHalfCircle = new HTMLCharacter("&lotimes;", "&#x02A34;", "&#10804;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiplication Sign In Left Half Circle")
  val MultiplicationSignInRightHalfCircle = new HTMLCharacter("&rotimes;", "&#x02A35;", "&#10805;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiplication Sign In Right Half Circle")
  val CircledMultiplicationSignWithCircumflexAccent = new HTMLCharacter("&otimesas;", "&#x02A36;", "&#10806;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Circled Multiplication Sign With Circumflex Accent")
  val MultiplicationSignInDoubleCircle = new HTMLCharacter("&Otimes;", "&#x02A37;", "&#10807;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiplication Sign In Double Circle")
  val CircledDivisionSign = new HTMLCharacter("&odiv;", "&#x02A38;", "&#10808;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Circled Division Sign")
  val PlusSignInTriangle = new HTMLCharacter("&triplus;", "&#x02A39;", "&#10809;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign In Triangle")
  val MinusSignInTriangle = new HTMLCharacter("&triminus;", "&#x02A3A;", "&#10810;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Minus Sign In Triangle")
  val MultiplicationSignInTriangle = new HTMLCharacter("&tritime;", "&#x02A3B;", "&#10811;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Multiplication Sign In Triangle")
  val InteriorProduct = new HTMLCharacter("&iprod;", "&#x02A3C;", "&#10812;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb mmlalias", "Interior Product")
  val AmalgamationOrCoproduct = new HTMLCharacter("&amalg;", "&#x02A3F;", "&#10815;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Amalgamation Or Coproduct")
  val IntersectionWithDot = new HTMLCharacter("&capdot;", "&#x02A40;", "&#10816;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Intersection With Dot")
  val UnionWithOverbar = new HTMLCharacter("&ncup;", "&#x02A42;", "&#10818;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Union With Overbar")
  val IntersectionWithOverbar = new HTMLCharacter("&ncap;", "&#x02A43;", "&#10819;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Intersection With Overbar")
  val IntersectionWithLogicalAnd = new HTMLCharacter("&capand;", "&#x02A44;", "&#10820;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Intersection With Logical And")
  val UnionWithLogicalOr = new HTMLCharacter("&cupor;", "&#x02A45;", "&#10821;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Union With Logical Or")
  val UnionAboveIntersection = new HTMLCharacter("&cupcap;", "&#x02A46;", "&#10822;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Union Above Intersection")
  val IntersectionAboveUnion = new HTMLCharacter("&capcup;", "&#x02A47;", "&#10823;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Intersection Above Union")
  val UnionAboveBarAboveIntersection = new HTMLCharacter("&cupbrcap;", "&#x02A48;", "&#10824;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Union Above Bar Above Intersection")
  val IntersectionAboveBarAboveUnion = new HTMLCharacter("&capbrcup;", "&#x02A49;", "&#10825;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Intersection Above Bar Above Union")
  val UnionBesideAndJoinedWithUnion = new HTMLCharacter("&cupcup;", "&#x02A4A;", "&#10826;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Union Beside And Joined With Union")
  val IntersectionBesideAndJoinedWithIntersection = new HTMLCharacter("&capcap;", "&#x02A4B;", "&#10827;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Intersection Beside And Joined With Intersection")
  val ClosedUnionWithSerifs = new HTMLCharacter("&ccups;", "&#x02A4C;", "&#10828;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Closed Union With Serifs")
  val ClosedIntersectionWithSerifs = new HTMLCharacter("&ccaps;", "&#x02A4D;", "&#10829;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Closed Intersection With Serifs")
  val ClosedUnionWithSerifsAndSmashProduct = new HTMLCharacter("&ccupssm;", "&#x02A50;", "&#10832;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Closed Union With Serifs And Smash Product")
  val DoubleLogicalAnd = new HTMLCharacter("&And;", "&#x02A53;", "&#10835;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Double Logical And")
  val DoubleLogicalOr = new HTMLCharacter("&Or;", "&#x02A54;", "&#10836;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Double Logical Or")
  val TwoIntersectingLogicalAnd = new HTMLCharacter("&andand;", "&#x02A55;", "&#10837;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Two Intersecting Logical And")
  val TwoIntersectingLogicalOr = new HTMLCharacter("&oror;", "&#x02A56;", "&#10838;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Two Intersecting Logical Or")
  val SlopingLargeOr = new HTMLCharacter("&orslope;", "&#x02A57;", "&#10839;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Sloping Large Or")
  val SlopingLargeAnd = new HTMLCharacter("&andslope;", "&#x02A58;", "&#10840;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Sloping Large And")
  val LogicalAndWithMiddleStem = new HTMLCharacter("&andv;", "&#x02A5A;", "&#10842;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Logical And With Middle Stem")
  val LogicalOrWithMiddleStem = new HTMLCharacter("&orv;", "&#x02A5B;", "&#10843;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Logical Or With Middle Stem")
  val LogicalAndWithHorizontalDash = new HTMLCharacter("&andd;", "&#x02A5C;", "&#10844;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Logical And With Horizontal Dash")
  val LogicalOrWithHorizontalDash = new HTMLCharacter("&ord;", "&#x02A5D;", "&#10845;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Logical Or With Horizontal Dash")
  val LogicalAndWithUnderbar = new HTMLCharacter("&wedbar;", "&#x02A5F;", "&#10847;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Logical And With Underbar")
  val EqualsSignWithDotBelow = new HTMLCharacter("&sdote;", "&#x02A66;", "&#10854;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Equals Sign With Dot Below")
  val TildeOperatorWithDotAbove = new HTMLCharacter("&simdot;", "&#x02A6A;", "&#10858;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Tilde Operator With Dot Above")
  val CongruentWithDotAbove = new HTMLCharacter("&congdot;", "&#x02A6D;", "&#10861;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Congruent With Dot Above")
  val EqualsWithAsterisk = new HTMLCharacter("&easter;", "&#x02A6E;", "&#10862;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Equals With Asterisk")
  val AlmostEqualToWithCircumflexAccent = new HTMLCharacter("&apacir;", "&#x02A6F;", "&#10863;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Almost Equal To With Circumflex Accent")
  val ApproximatelyEqualOrEqualTo = new HTMLCharacter("&apE;", "&#x02A70;", "&#10864;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Approximately Equal Or Equal To")
  val EqualsSignAbovePlusSign = new HTMLCharacter("&eplus;", "&#x02A71;", "&#10865;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Equals Sign Above Plus Sign")
  val PlusSignAboveEqualsSign = new HTMLCharacter("&pluse;", "&#x02A72;", "&#10866;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Plus Sign Above Equals Sign")
  val EqualsSignAboveTildeOperator = new HTMLCharacter("&Esim;", "&#x02A73;", "&#10867;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Equals Sign Above Tilde Operator")
  val DoubleColonEqual = new HTMLCharacter("&Colone;", "&#x02A74;", "&#10868;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double Colon Equal")
  val TwoConsecutiveEqualsSigns = new HTMLCharacter("&Equal;", "&#x02A75;", "&#10869;", "Supplemental Mathematical Operators", "Sm", "mmlextra", "Two Consecutive Equals Signs")
  val EqualsSignWithTwoDotsAboveAndTwoDotsBelow = new HTMLCharacter("&eDDot;", "&#x02A77;", "&#10871;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Equals Sign With Two Dots Above And Two Dots Below")
  val EquivalentWithFourDotsAbove = new HTMLCharacter("&equivDD;", "&#x02A78;", "&#10872;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Equivalent With Four Dots Above")
  val LessThanWithCircleInside = new HTMLCharacter("&ltcir;", "&#x02A79;", "&#10873;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than With Circle Inside")
  val GreaterThanWithCircleInside = new HTMLCharacter("&gtcir;", "&#x02A7A;", "&#10874;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than With Circle Inside")
  val LessThanWithQuestionMarkAbove = new HTMLCharacter("&ltquest;", "&#x02A7B;", "&#10875;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than With Question Mark Above")
  val GreaterThanWithQuestionMarkAbove = new HTMLCharacter("&gtquest;", "&#x02A7C;", "&#10876;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than With Question Mark Above")
  val LessThanOrSlantedEqualTo = new HTMLCharacter("&les;", "&#x02A7D;", "&#10877;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Or Slanted Equal To")
  val GreaterThanOrSlantedEqualTo = new HTMLCharacter("&ges;", "&#x02A7E;", "&#10878;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Or Slanted Equal To")
  val LessThanOrSlantedEqualToWithDotInside = new HTMLCharacter("&lesdot;", "&#x02A7F;", "&#10879;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Or Slanted Equal To With Dot Inside")
  val GreaterThanOrSlantedEqualToWithDotInside = new HTMLCharacter("&gesdot;", "&#x02A80;", "&#10880;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Or Slanted Equal To With Dot Inside")
  val LessThanOrSlantedEqualToWithDotAbove = new HTMLCharacter("&lesdoto;", "&#x02A81;", "&#10881;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Or Slanted Equal To With Dot Above")
  val GreaterThanOrSlantedEqualToWithDotAbove = new HTMLCharacter("&gesdoto;", "&#x02A82;", "&#10882;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Or Slanted Equal To With Dot Above")
  val LessThanOrSlantedEqualToWithDotAboveRight = new HTMLCharacter("&lesdotor;", "&#x02A83;", "&#10883;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Or Slanted Equal To With Dot Above Right")
  val GreaterThanOrSlantedEqualToWithDotAboveLeft = new HTMLCharacter("&gesdotol;", "&#x02A84;", "&#10884;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Or Slanted Equal To With Dot Above Left")
  val LessThanOrApproximate = new HTMLCharacter("&lap;", "&#x02A85;", "&#10885;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Or Approximate")
  val GreaterThanOrApproximate = new HTMLCharacter("&gap;", "&#x02A86;", "&#10886;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Or Approximate")
  val LessThanAndSingleLineNotEqualTo = new HTMLCharacter("&lne;", "&#x02A87;", "&#10887;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Less-Than And Single-Line Not Equal To")
  val GreaterThanAndSingleLineNotEqualTo = new HTMLCharacter("&gne;", "&#x02A88;", "&#10888;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Greater-Than And Single-Line Not Equal To")
  val LessThanAndNotApproximate = new HTMLCharacter("&lnap;", "&#x02A89;", "&#10889;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Less-Than And Not Approximate")
  val GreaterThanAndNotApproximate = new HTMLCharacter("&gnap;", "&#x02A8A;", "&#10890;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Greater-Than And Not Approximate")
  val LessThanAboveDoubleLineEqualAboveGreaterThan = new HTMLCharacter("&lEg;", "&#x02A8B;", "&#10891;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Less-Than Above Double-Line Equal Above Greater-Than")
  val GreaterThanAboveDoubleLineEqualAboveLessThan = new HTMLCharacter("&gEl;", "&#x02A8C;", "&#10892;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Greater-Than Above Double-Line Equal Above Less-Than")
  val LessThanAboveSimilarOrEqual = new HTMLCharacter("&lsime;", "&#x02A8D;", "&#10893;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Above Similar Or Equal")
  val GreaterThanAboveSimilarOrEqual = new HTMLCharacter("&gsime;", "&#x02A8E;", "&#10894;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Above Similar Or Equal")
  val LessThanAboveSimilarAboveGreaterThan = new HTMLCharacter("&lsimg;", "&#x02A8F;", "&#10895;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Above Similar Above Greater-Than")
  val GreaterThanAboveSimilarAboveLessThan = new HTMLCharacter("&gsiml;", "&#x02A90;", "&#10896;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Above Similar Above Less-Than")
  val LessThanAboveGreaterThanAboveDoubleLineEqual = new HTMLCharacter("&lgE;", "&#x02A91;", "&#10897;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Above Greater-Than Above Double-Line Equal")
  val GreaterThanAboveLessThanAboveDoubleLineEqual = new HTMLCharacter("&glE;", "&#x02A92;", "&#10898;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Above Less-Than Above Double-Line Equal")
  val LessThanAboveSlantedEqualAboveGreaterThanAboveSlantedEqual = new HTMLCharacter("&lesges;", "&#x02A93;", "&#10899;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Above Slanted Equal Above Greater-Than Above Slanted Equal")
  val GreaterThanAboveSlantedEqualAboveLessThanAboveSlantedEqual = new HTMLCharacter("&gesles;", "&#x02A94;", "&#10900;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Above Slanted Equal Above Less-Than Above Slanted Equal")
  val SlantedEqualToOrLessThan = new HTMLCharacter("&els;", "&#x02A95;", "&#10901;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Slanted Equal To Or Less-Than")
  val SlantedEqualToOrGreaterThan = new HTMLCharacter("&egs;", "&#x02A96;", "&#10902;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Slanted Equal To Or Greater-Than")
  val SlantedEqualToOrLessThanWithDotInside = new HTMLCharacter("&elsdot;", "&#x02A97;", "&#10903;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Slanted Equal To Or Less-Than With Dot Inside")
  val SlantedEqualToOrGreaterThanWithDotInside = new HTMLCharacter("&egsdot;", "&#x02A98;", "&#10904;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Slanted Equal To Or Greater-Than With Dot Inside")
  val DoubleLineEqualToOrLessThan = new HTMLCharacter("&el;", "&#x02A99;", "&#10905;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double-Line Equal To Or Less-Than")
  val DoubleLineEqualToOrGreaterThan = new HTMLCharacter("&eg;", "&#x02A9A;", "&#10906;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double-Line Equal To Or Greater-Than")
  val SimilarOrLessThan = new HTMLCharacter("&siml;", "&#x02A9D;", "&#10909;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Similar Or Less-Than")
  val SimilarOrGreaterThan = new HTMLCharacter("&simg;", "&#x02A9E;", "&#10910;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Similar Or Greater-Than")
  val SimilarAboveLessThanAboveEqualsSign = new HTMLCharacter("&simlE;", "&#x02A9F;", "&#10911;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Similar Above Less-Than Above Equals Sign")
  val SimilarAboveGreaterThanAboveEqualsSign = new HTMLCharacter("&simgE;", "&#x02AA0;", "&#10912;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Similar Above Greater-Than Above Equals Sign")
  val DoubleNestedLessThan = new HTMLCharacter("&LessLess;", "&#x02AA1;", "&#10913;", "Supplemental Mathematical Operators", "Sm", "mmlextra", "Double Nested Less-Than")
  val DoubleNestedGreaterThan = new HTMLCharacter("&GreaterGreater;", "&#x02AA2;", "&#10914;", "Supplemental Mathematical Operators", "Sm", "mmlextra", "Double Nested Greater-Than")
  val GreaterThanOverlappingLessThan = new HTMLCharacter("&glj;", "&#x02AA4;", "&#10916;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Overlapping Less-Than")
  val GreaterThanBesideLessThan = new HTMLCharacter("&gla;", "&#x02AA5;", "&#10917;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Beside Less-Than")
  val LessThanClosedByCurve = new HTMLCharacter("&ltcc;", "&#x02AA6;", "&#10918;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Closed By Curve")
  val GreaterThanClosedByCurve = new HTMLCharacter("&gtcc;", "&#x02AA7;", "&#10919;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Closed By Curve")
  val LessThanClosedByCurveAboveSlantedEqual = new HTMLCharacter("&lescc;", "&#x02AA8;", "&#10920;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Less-Than Closed By Curve Above Slanted Equal")
  val GreaterThanClosedByCurveAboveSlantedEqual = new HTMLCharacter("&gescc;", "&#x02AA9;", "&#10921;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Greater-Than Closed By Curve Above Slanted Equal")
  val SmallerThan = new HTMLCharacter("&smt;", "&#x02AAA;", "&#10922;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Smaller Than")
  val LargerThan = new HTMLCharacter("&lat;", "&#x02AAB;", "&#10923;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Larger Than")
  val SmallerThanOrEqualTo = new HTMLCharacter("&smte;", "&#x02AAC;", "&#10924;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Smaller Than Or Equal To")
  val LargerThanOrEqualTo = new HTMLCharacter("&late;", "&#x02AAD;", "&#10925;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Larger Than Or Equal To")
  val EqualsSignWithBumpyAbove = new HTMLCharacter("&bumpE;", "&#x02AAE;", "&#10926;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Equals Sign With Bumpy Above")
  val PrecedesAboveSingleLineEqualsSign = new HTMLCharacter("&pre;", "&#x02AAF;", "&#10927;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Precedes Above Single-Line Equals Sign")
  val SucceedsAboveSingleLineEqualsSign = new HTMLCharacter("&sce;", "&#x02AB0;", "&#10928;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Succeeds Above Single-Line Equals Sign")
  val PrecedesAboveEqualsSign = new HTMLCharacter("&prE;", "&#x02AB3;", "&#10931;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Precedes Above Equals Sign")
  val SucceedsAboveEqualsSign = new HTMLCharacter("&scE;", "&#x02AB4;", "&#10932;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Succeeds Above Equals Sign")
  val PrecedesAboveNotEqualTo = new HTMLCharacter("&prnE;", "&#x02AB5;", "&#10933;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Precedes Above Not Equal To")
  val SucceedsAboveNotEqualTo = new HTMLCharacter("&scnE;", "&#x02AB6;", "&#10934;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Succeeds Above Not Equal To")
  val PrecedesAboveAlmostEqualTo = new HTMLCharacter("&prap;", "&#x02AB7;", "&#10935;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Precedes Above Almost Equal To")
  val SucceedsAboveAlmostEqualTo = new HTMLCharacter("&scap;", "&#x02AB8;", "&#10936;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Succeeds Above Almost Equal To")
  val PrecedesAboveNotAlmostEqualTo = new HTMLCharacter("&prnap;", "&#x02AB9;", "&#10937;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Precedes Above Not Almost Equal To")
  val SucceedsAboveNotAlmostEqualTo = new HTMLCharacter("&scnap;", "&#x02ABA;", "&#10938;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Succeeds Above Not Almost Equal To")
  val DoublePrecedes = new HTMLCharacter("&Pr;", "&#x02ABB;", "&#10939;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double Precedes")
  val DoubleSucceeds = new HTMLCharacter("&Sc;", "&#x02ABC;", "&#10940;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double Succeeds")
  val SubsetWithDot = new HTMLCharacter("&subdot;", "&#x02ABD;", "&#10941;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Subset With Dot")
  val SupersetWithDot = new HTMLCharacter("&supdot;", "&#x02ABE;", "&#10942;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsb", "Superset With Dot")
  val SubsetWithPlusSignBelow = new HTMLCharacter("&subplus;", "&#x02ABF;", "&#10943;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Subset With Plus Sign Below")
  val SupersetWithPlusSignBelow = new HTMLCharacter("&supplus;", "&#x02AC0;", "&#10944;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset With Plus Sign Below")
  val SubsetWithMultiplicationSignBelow = new HTMLCharacter("&submult;", "&#x02AC1;", "&#10945;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Subset With Multiplication Sign Below")
  val SupersetWithMultiplicationSignBelow = new HTMLCharacter("&supmult;", "&#x02AC2;", "&#10946;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset With Multiplication Sign Below")
  val SubsetOfOrEqualToWithDotAbove = new HTMLCharacter("&subedot;", "&#x02AC3;", "&#10947;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Subset Of Or Equal To With Dot Above")
  val SupersetOfOrEqualToWithDotAbove = new HTMLCharacter("&supedot;", "&#x02AC4;", "&#10948;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset Of Or Equal To With Dot Above")
  val SubsetOfAboveEqualsSign = new HTMLCharacter("&subE;", "&#x02AC5;", "&#10949;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Subset Of Above Equals Sign")
  val SupersetOfAboveEqualsSign = new HTMLCharacter("&supE;", "&#x02AC6;", "&#10950;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Superset Of Above Equals Sign")
  val SubsetOfAboveTildeOperator = new HTMLCharacter("&subsim;", "&#x02AC7;", "&#10951;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Subset Of Above Tilde Operator")
  val SupersetOfAboveTildeOperator = new HTMLCharacter("&supsim;", "&#x02AC8;", "&#10952;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset Of Above Tilde Operator")
  val SubsetOfAboveNotEqualTo = new HTMLCharacter("&subnE;", "&#x02ACB;", "&#10955;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Subset Of Above Not Equal To")
  val SupersetOfAboveNotEqualTo = new HTMLCharacter("&supnE;", "&#x02ACC;", "&#10956;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn mmlalias", "Superset Of Above Not Equal To")
  val ClosedSubset = new HTMLCharacter("&csub;", "&#x02ACF;", "&#10959;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Closed Subset")
  val ClosedSuperset = new HTMLCharacter("&csup;", "&#x02AD0;", "&#10960;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Closed Superset")
  val ClosedSubsetOrEqualTo = new HTMLCharacter("&csube;", "&#x02AD1;", "&#10961;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Closed Subset Or Equal To")
  val ClosedSupersetOrEqualTo = new HTMLCharacter("&csupe;", "&#x02AD2;", "&#10962;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Closed Superset Or Equal To")
  val SubsetAboveSuperset = new HTMLCharacter("&subsup;", "&#x02AD3;", "&#10963;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Subset Above Superset")
  val SupersetAboveSubset = new HTMLCharacter("&supsub;", "&#x02AD4;", "&#10964;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset Above Subset")
  val SubsetAboveSubset = new HTMLCharacter("&subsub;", "&#x02AD5;", "&#10965;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Subset Above Subset")
  val SupersetAboveSuperset = new HTMLCharacter("&supsup;", "&#x02AD6;", "&#10966;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset Above Superset")
  val SupersetBesideSubset = new HTMLCharacter("&suphsub;", "&#x02AD7;", "&#10967;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset Beside Subset")
  val SupersetBesideAndJoinedByDashWithSubset = new HTMLCharacter("&supdsub;", "&#x02AD8;", "&#10968;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Superset Beside And Joined By Dash With Subset")
  val ElementOfOpeningDownwards = new HTMLCharacter("&forkv;", "&#x02AD9;", "&#10969;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Element Of Opening Downwards")
  val PitchforkWithTeeTop = new HTMLCharacter("&topfork;", "&#x02ADA;", "&#10970;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Pitchfork With Tee Top")
  val TransversalIntersection = new HTMLCharacter("&mlcp;", "&#x02ADB;", "&#10971;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Transversal Intersection")
  val VerticalBarDoubleLeftTurnstile = new HTMLCharacter("&Dashv;", "&#x02AE4;", "&#10980;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr mmlalias", "Vertical Bar Double Left Turnstile")
  val LongDashFromLeftMemberOfDoubleVertical = new HTMLCharacter("&Vdashl;", "&#x02AE6;", "&#10982;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Long Dash From Left Member Of Double Vertical")
  val ShortDownTackWithOverbar = new HTMLCharacter("&Barv;", "&#x02AE7;", "&#10983;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Short Down Tack With Overbar")
  val ShortUpTackWithUnderbar = new HTMLCharacter("&vBar;", "&#x02AE8;", "&#10984;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Short Up Tack With Underbar")
  val ShortUpTackAboveShortDownTack = new HTMLCharacter("&vBarv;", "&#x02AE9;", "&#10985;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Short Up Tack Above Short Down Tack")
  val DoubleUpTack = new HTMLCharacter("&Vbar;", "&#x02AEB;", "&#10987;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsr", "Double Up Tack")
  val DoubleStrokeNotSign = new HTMLCharacter("&Not;", "&#x02AEC;", "&#10988;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Double Stroke Not Sign")
  val ReversedDoubleStrokeNotSign = new HTMLCharacter("&bNot;", "&#x02AED;", "&#10989;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Reversed Double Stroke Not Sign")
  val DoesNotDivideWithReversedNegationSlash = new HTMLCharacter("&rnmid;", "&#x02AEE;", "&#10990;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn", "Does Not Divide With Reversed Negation Slash")
  val VerticalLineWithCircleAbove = new HTMLCharacter("&cirmid;", "&#x02AEF;", "&#10991;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsa", "Vertical Line With Circle Above")
  val VerticalLineWithCircleBelow = new HTMLCharacter("&midcir;", "&#x02AF0;", "&#10992;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsa", "Vertical Line With Circle Below")
  val DownTackWithCircleBelow = new HTMLCharacter("&topcir;", "&#x02AF1;", "&#10993;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Down Tack With Circle Below")
  val ParallelWithHorizontalStroke = new HTMLCharacter("&nhpar;", "&#x02AF2;", "&#10994;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Parallel With Horizontal Stroke")
  val ParallelWithTildeOperator = new HTMLCharacter("&parsim;", "&#x02AF3;", "&#10995;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isoamsn", "Parallel With Tilde Operator")
  val DoubleSolidusOperator = new HTMLCharacter("&parsl;", "&#x02AFD;", "&#11005;", "Supplemental Mathematical Operators", "Sm", "9573-2003-isotech", "Double Solidus Operator")
  val LatinSmallLigatureFf = new HTMLCharacter("&fflig;", "&#x0FB00;", "&#64256;", "Alphabetic Presentation Forms", "Ll", "9573-2003-isopub", "Latin Small Ligature Ff")
  val LatinSmallLigatureFi = new HTMLCharacter("&filig;", "&#x0FB01;", "&#64257;", "Alphabetic Presentation Forms", "Ll", "9573-2003-isopub", "Latin Small Ligature Fi")
  val LatinSmallLigatureFl = new HTMLCharacter("&fllig;", "&#x0FB02;", "&#64258;", "Alphabetic Presentation Forms", "Ll", "9573-2003-isopub", "Latin Small Ligature Fl")
  val LatinSmallLigatureFfi = new HTMLCharacter("&ffilig;", "&#x0FB03;", "&#64259;", "Alphabetic Presentation Forms", "Ll", "9573-2003-isopub", "Latin Small Ligature Ffi")
  val LatinSmallLigatureFfl = new HTMLCharacter("&ffllig;", "&#x0FB04;", "&#64260;", "Alphabetic Presentation Forms", "Ll", "9573-2003-isopub", "Latin Small Ligature Ffl")
  val MathematicalScriptCapitalA = new HTMLCharacter("&Ascr;", "&#x1D49C;", "&#119964;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital A")
  val MathematicalScriptCapitalC = new HTMLCharacter("&Cscr;", "&#x1D49E;", "&#119966;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital C")
  val MathematicalScriptCapitalD = new HTMLCharacter("&Dscr;", "&#x1D49F;", "&#119967;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital D")
  val MathematicalScriptCapitalG = new HTMLCharacter("&Gscr;", "&#x1D4A2;", "&#119970;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital G")
  val MathematicalScriptCapitalJ = new HTMLCharacter("&Jscr;", "&#x1D4A5;", "&#119973;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital J")
  val MathematicalScriptCapitalK = new HTMLCharacter("&Kscr;", "&#x1D4A6;", "&#119974;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital K")
  val MathematicalScriptCapitalN = new HTMLCharacter("&Nscr;", "&#x1D4A9;", "&#119977;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital N")
  val MathematicalScriptCapitalO = new HTMLCharacter("&Oscr;", "&#x1D4AA;", "&#119978;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital O")
  val MathematicalScriptCapitalP = new HTMLCharacter("&Pscr;", "&#x1D4AB;", "&#119979;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital P")
  val MathematicalScriptCapitalQ = new HTMLCharacter("&Qscr;", "&#x1D4AC;", "&#119980;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital Q")
  val MathematicalScriptCapitalS = new HTMLCharacter("&Sscr;", "&#x1D4AE;", "&#119982;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital S")
  val MathematicalScriptCapitalT = new HTMLCharacter("&Tscr;", "&#x1D4AF;", "&#119983;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital T")
  val MathematicalScriptCapitalU = new HTMLCharacter("&Uscr;", "&#x1D4B0;", "&#119984;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital U")
  val MathematicalScriptCapitalV = new HTMLCharacter("&Vscr;", "&#x1D4B1;", "&#119985;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital V")
  val MathematicalScriptCapitalW = new HTMLCharacter("&Wscr;", "&#x1D4B2;", "&#119986;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital W")
  val MathematicalScriptCapitalX = new HTMLCharacter("&Xscr;", "&#x1D4B3;", "&#119987;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital X")
  val MathematicalScriptCapitalY = new HTMLCharacter("&Yscr;", "&#x1D4B4;", "&#119988;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital Y")
  val MathematicalScriptCapitalZ = new HTMLCharacter("&Zscr;", "&#x1D4B5;", "&#119989;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomscr", "Mathematical Script Capital Z")
  val MathematicalScriptSmallA = new HTMLCharacter("&ascr;", "&#x1D4B6;", "&#119990;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small A")
  val MathematicalScriptSmallB = new HTMLCharacter("&bscr;", "&#x1D4B7;", "&#119991;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small B")
  val MathematicalScriptSmallC = new HTMLCharacter("&cscr;", "&#x1D4B8;", "&#119992;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small C")
  val MathematicalScriptSmallD = new HTMLCharacter("&dscr;", "&#x1D4B9;", "&#119993;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small D")
  val MathematicalScriptSmallF = new HTMLCharacter("&fscr;", "&#x1D4BB;", "&#119995;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small F")
  val MathematicalScriptSmallH = new HTMLCharacter("&hscr;", "&#x1D4BD;", "&#119997;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small H")
  val MathematicalScriptSmallI = new HTMLCharacter("&iscr;", "&#x1D4BE;", "&#119998;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small I")
  val MathematicalScriptSmallJ = new HTMLCharacter("&jscr;", "&#x1D4BF;", "&#119999;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small J")
  val MathematicalScriptSmallK = new HTMLCharacter("&kscr;", "&#x1D4C0;", "&#120000;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small K")
  val MathematicalScriptSmallL = new HTMLCharacter("&lscr;", "&#x1D4C1;", "&#120001;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small L")
  val MathematicalScriptSmallM = new HTMLCharacter("&mscr;", "&#x1D4C2;", "&#120002;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small M")
  val MathematicalScriptSmallN = new HTMLCharacter("&nscr;", "&#x1D4C3;", "&#120003;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small N")
  val MathematicalScriptSmallP = new HTMLCharacter("&pscr;", "&#x1D4C5;", "&#120005;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small P")
  val MathematicalScriptSmallQ = new HTMLCharacter("&qscr;", "&#x1D4C6;", "&#120006;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small Q")
  val MathematicalScriptSmallR = new HTMLCharacter("&rscr;", "&#x1D4C7;", "&#120007;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small R")
  val MathematicalScriptSmallS = new HTMLCharacter("&sscr;", "&#x1D4C8;", "&#120008;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small S")
  val MathematicalScriptSmallT = new HTMLCharacter("&tscr;", "&#x1D4C9;", "&#120009;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small T")
  val MathematicalScriptSmallU = new HTMLCharacter("&uscr;", "&#x1D4CA;", "&#120010;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small U")
  val MathematicalScriptSmallV = new HTMLCharacter("&vscr;", "&#x1D4CB;", "&#120011;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small V")
  val MathematicalScriptSmallW = new HTMLCharacter("&wscr;", "&#x1D4CC;", "&#120012;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small W")
  val MathematicalScriptSmallX = new HTMLCharacter("&xscr;", "&#x1D4CD;", "&#120013;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small X")
  val MathematicalScriptSmallY = new HTMLCharacter("&yscr;", "&#x1D4CE;", "&#120014;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small Y")
  val MathematicalScriptSmallZ = new HTMLCharacter("&zscr;", "&#x1D4CF;", "&#120015;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomscr", "Mathematical Script Small Z")
  val MathematicalFrakturCapitalA = new HTMLCharacter("&Afr;", "&#x1D504;", "&#120068;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital A")
  val MathematicalFrakturCapitalB = new HTMLCharacter("&Bfr;", "&#x1D505;", "&#120069;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital B")
  val MathematicalFrakturCapitalD = new HTMLCharacter("&Dfr;", "&#x1D507;", "&#120071;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital D")
  val MathematicalFrakturCapitalE = new HTMLCharacter("&Efr;", "&#x1D508;", "&#120072;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital E")
  val MathematicalFrakturCapitalF = new HTMLCharacter("&Ffr;", "&#x1D509;", "&#120073;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital F")
  val MathematicalFrakturCapitalG = new HTMLCharacter("&Gfr;", "&#x1D50A;", "&#120074;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital G")
  val MathematicalFrakturCapitalJ = new HTMLCharacter("&Jfr;", "&#x1D50D;", "&#120077;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital J")
  val MathematicalFrakturCapitalK = new HTMLCharacter("&Kfr;", "&#x1D50E;", "&#120078;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital K")
  val MathematicalFrakturCapitalL = new HTMLCharacter("&Lfr;", "&#x1D50F;", "&#120079;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital L")
  val MathematicalFrakturCapitalM = new HTMLCharacter("&Mfr;", "&#x1D510;", "&#120080;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital M")
  val MathematicalFrakturCapitalN = new HTMLCharacter("&Nfr;", "&#x1D511;", "&#120081;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital N")
  val MathematicalFrakturCapitalO = new HTMLCharacter("&Ofr;", "&#x1D512;", "&#120082;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital O")
  val MathematicalFrakturCapitalP = new HTMLCharacter("&Pfr;", "&#x1D513;", "&#120083;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital P")
  val MathematicalFrakturCapitalQ = new HTMLCharacter("&Qfr;", "&#x1D514;", "&#120084;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital Q")
  val MathematicalFrakturCapitalS = new HTMLCharacter("&Sfr;", "&#x1D516;", "&#120086;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital S")
  val MathematicalFrakturCapitalT = new HTMLCharacter("&Tfr;", "&#x1D517;", "&#120087;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital T")
  val MathematicalFrakturCapitalU = new HTMLCharacter("&Ufr;", "&#x1D518;", "&#120088;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital U")
  val MathematicalFrakturCapitalV = new HTMLCharacter("&Vfr;", "&#x1D519;", "&#120089;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital V")
  val MathematicalFrakturCapitalW = new HTMLCharacter("&Wfr;", "&#x1D51A;", "&#120090;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital W")
  val MathematicalFrakturCapitalX = new HTMLCharacter("&Xfr;", "&#x1D51B;", "&#120091;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital X")
  val MathematicalFrakturCapitalY = new HTMLCharacter("&Yfr;", "&#x1D51C;", "&#120092;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomfrk", "Mathematical Fraktur Capital Y")
  val MathematicalFrakturSmallA = new HTMLCharacter("&afr;", "&#x1D51E;", "&#120094;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small A")
  val MathematicalFrakturSmallB = new HTMLCharacter("&bfr;", "&#x1D51F;", "&#120095;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small B")
  val MathematicalFrakturSmallC = new HTMLCharacter("&cfr;", "&#x1D520;", "&#120096;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small C")
  val MathematicalFrakturSmallD = new HTMLCharacter("&dfr;", "&#x1D521;", "&#120097;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small D")
  val MathematicalFrakturSmallE = new HTMLCharacter("&efr;", "&#x1D522;", "&#120098;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small E")
  val MathematicalFrakturSmallF = new HTMLCharacter("&ffr;", "&#x1D523;", "&#120099;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small F")
  val MathematicalFrakturSmallG = new HTMLCharacter("&gfr;", "&#x1D524;", "&#120100;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small G")
  val MathematicalFrakturSmallH = new HTMLCharacter("&hfr;", "&#x1D525;", "&#120101;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small H")
  val MathematicalFrakturSmallI = new HTMLCharacter("&ifr;", "&#x1D526;", "&#120102;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small I")
  val MathematicalFrakturSmallJ = new HTMLCharacter("&jfr;", "&#x1D527;", "&#120103;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small J")
  val MathematicalFrakturSmallK = new HTMLCharacter("&kfr;", "&#x1D528;", "&#120104;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small K")
  val MathematicalFrakturSmallL = new HTMLCharacter("&lfr;", "&#x1D529;", "&#120105;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small L")
  val MathematicalFrakturSmallM = new HTMLCharacter("&mfr;", "&#x1D52A;", "&#120106;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small M")
  val MathematicalFrakturSmallN = new HTMLCharacter("&nfr;", "&#x1D52B;", "&#120107;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small N")
  val MathematicalFrakturSmallO = new HTMLCharacter("&ofr;", "&#x1D52C;", "&#120108;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small O")
  val MathematicalFrakturSmallP = new HTMLCharacter("&pfr;", "&#x1D52D;", "&#120109;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small P")
  val MathematicalFrakturSmallQ = new HTMLCharacter("&qfr;", "&#x1D52E;", "&#120110;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small Q")
  val MathematicalFrakturSmallR = new HTMLCharacter("&rfr;", "&#x1D52F;", "&#120111;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small R")
  val MathematicalFrakturSmallS = new HTMLCharacter("&sfr;", "&#x1D530;", "&#120112;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small S")
  val MathematicalFrakturSmallT = new HTMLCharacter("&tfr;", "&#x1D531;", "&#120113;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small T")
  val MathematicalFrakturSmallU = new HTMLCharacter("&ufr;", "&#x1D532;", "&#120114;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small U")
  val MathematicalFrakturSmallV = new HTMLCharacter("&vfr;", "&#x1D533;", "&#120115;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small V")
  val MathematicalFrakturSmallW = new HTMLCharacter("&wfr;", "&#x1D534;", "&#120116;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small W")
  val MathematicalFrakturSmallX = new HTMLCharacter("&xfr;", "&#x1D535;", "&#120117;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small X")
  val MathematicalFrakturSmallY = new HTMLCharacter("&yfr;", "&#x1D536;", "&#120118;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small Y")
  val MathematicalFrakturSmallZ = new HTMLCharacter("&zfr;", "&#x1D537;", "&#120119;", "Mathematical Alphanumeric Symbols", "Ll", "9573-2003-isomfrk", "Mathematical Fraktur Small Z")
  val MathematicalDoubleStruckCapitalA = new HTMLCharacter("&Aopf;", "&#x1D538;", "&#120120;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital A")
  val MathematicalDoubleStruckCapitalB = new HTMLCharacter("&Bopf;", "&#x1D539;", "&#120121;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital B")
  val MathematicalDoubleStruckCapitalD = new HTMLCharacter("&Dopf;", "&#x1D53B;", "&#120123;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital D")
  val MathematicalDoubleStruckCapitalE = new HTMLCharacter("&Eopf;", "&#x1D53C;", "&#120124;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital E")
  val MathematicalDoubleStruckCapitalF = new HTMLCharacter("&Fopf;", "&#x1D53D;", "&#120125;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital F")
  val MathematicalDoubleStruckCapitalG = new HTMLCharacter("&Gopf;", "&#x1D53E;", "&#120126;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital G")
  val MathematicalDoubleStruckCapitalI = new HTMLCharacter("&Iopf;", "&#x1D540;", "&#120128;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital I")
  val MathematicalDoubleStruckCapitalJ = new HTMLCharacter("&Jopf;", "&#x1D541;", "&#120129;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital J")
  val MathematicalDoubleStruckCapitalK = new HTMLCharacter("&Kopf;", "&#x1D542;", "&#120130;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital K")
  val MathematicalDoubleStruckCapitalL = new HTMLCharacter("&Lopf;", "&#x1D543;", "&#120131;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital L")
  val MathematicalDoubleStruckCapitalM = new HTMLCharacter("&Mopf;", "&#x1D544;", "&#120132;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital M")
  val MathematicalDoubleStruckCapitalO = new HTMLCharacter("&Oopf;", "&#x1D546;", "&#120134;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital O")
  val MathematicalDoubleStruckCapitalS = new HTMLCharacter("&Sopf;", "&#x1D54A;", "&#120138;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital S")
  val MathematicalDoubleStruckCapitalT = new HTMLCharacter("&Topf;", "&#x1D54B;", "&#120139;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital T")
  val MathematicalDoubleStruckCapitalU = new HTMLCharacter("&Uopf;", "&#x1D54C;", "&#120140;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital U")
  val MathematicalDoubleStruckCapitalV = new HTMLCharacter("&Vopf;", "&#x1D54D;", "&#120141;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital V")
  val MathematicalDoubleStruckCapitalW = new HTMLCharacter("&Wopf;", "&#x1D54E;", "&#120142;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital W")
  val MathematicalDoubleStruckCapitalX = new HTMLCharacter("&Xopf;", "&#x1D54F;", "&#120143;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital X")
  val MathematicalDoubleStruckCapitalY = new HTMLCharacter("&Yopf;", "&#x1D550;", "&#120144;", "Mathematical Alphanumeric Symbols", "Lu", "9573-2003-isomopf", "Mathematical Double-Struck Capital Y")
  val MathematicalDoubleStruckSmallA = new HTMLCharacter("&aopf;", "&#x1D552;", "&#120146;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small A")
  val MathematicalDoubleStruckSmallB = new HTMLCharacter("&bopf;", "&#x1D553;", "&#120147;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small B")
  val MathematicalDoubleStruckSmallC = new HTMLCharacter("&copf;", "&#x1D554;", "&#120148;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small C")
  val MathematicalDoubleStruckSmallD = new HTMLCharacter("&dopf;", "&#x1D555;", "&#120149;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small D")
  val MathematicalDoubleStruckSmallE = new HTMLCharacter("&eopf;", "&#x1D556;", "&#120150;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small E")
  val MathematicalDoubleStruckSmallF = new HTMLCharacter("&fopf;", "&#x1D557;", "&#120151;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small F")
  val MathematicalDoubleStruckSmallG = new HTMLCharacter("&gopf;", "&#x1D558;", "&#120152;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small G")
  val MathematicalDoubleStruckSmallH = new HTMLCharacter("&hopf;", "&#x1D559;", "&#120153;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small H")
  val MathematicalDoubleStruckSmallI = new HTMLCharacter("&iopf;", "&#x1D55A;", "&#120154;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small I")
  val MathematicalDoubleStruckSmallJ = new HTMLCharacter("&jopf;", "&#x1D55B;", "&#120155;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small J")
  val MathematicalDoubleStruckSmallK = new HTMLCharacter("&kopf;", "&#x1D55C;", "&#120156;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small K")
  val MathematicalDoubleStruckSmallL = new HTMLCharacter("&lopf;", "&#x1D55D;", "&#120157;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small L")
  val MathematicalDoubleStruckSmallM = new HTMLCharacter("&mopf;", "&#x1D55E;", "&#120158;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small M")
  val MathematicalDoubleStruckSmallN = new HTMLCharacter("&nopf;", "&#x1D55F;", "&#120159;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small N")
  val MathematicalDoubleStruckSmallO = new HTMLCharacter("&oopf;", "&#x1D560;", "&#120160;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small O")
  val MathematicalDoubleStruckSmallP = new HTMLCharacter("&popf;", "&#x1D561;", "&#120161;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small P")
  val MathematicalDoubleStruckSmallQ = new HTMLCharacter("&qopf;", "&#x1D562;", "&#120162;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small Q")
  val MathematicalDoubleStruckSmallR = new HTMLCharacter("&ropf;", "&#x1D563;", "&#120163;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small R")
  val MathematicalDoubleStruckSmallS = new HTMLCharacter("&sopf;", "&#x1D564;", "&#120164;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small S")
  val MathematicalDoubleStruckSmallT = new HTMLCharacter("&topf;", "&#x1D565;", "&#120165;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small T")
  val MathematicalDoubleStruckSmallU = new HTMLCharacter("&uopf;", "&#x1D566;", "&#120166;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small U")
  val MathematicalDoubleStruckSmallV = new HTMLCharacter("&vopf;", "&#x1D567;", "&#120167;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small V")
  val MathematicalDoubleStruckSmallW = new HTMLCharacter("&wopf;", "&#x1D568;", "&#120168;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small W")
  val MathematicalDoubleStruckSmallX = new HTMLCharacter("&xopf;", "&#x1D569;", "&#120169;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small X")
  val MathematicalDoubleStruckSmallY = new HTMLCharacter("&yopf;", "&#x1D56A;", "&#120170;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small Y")
  val MathematicalDoubleStruckSmallZ = new HTMLCharacter("&zopf;", "&#x1D56B;", "&#120171;", "Mathematical Alphanumeric Symbols", "Ll", "mmlextra", "Mathematical Double-Struck Small Z")
}